
FSL_LineFollower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interrupts   000000c0  00000000  00000000  000000d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .cfmprotect   00000010  00000400  00000400  00000194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002dec  00000410  00000410  000001a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          000001ec  1ffff000  1ffff000  00002fa8  2**2
                  ALLOC
  4 .romp         00000018  1ffff1ec  000031fc  00002f90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 ._user_heap_stack 00000400  1ffff204  00003214  00002fa8  2**0
                  ALLOC
  6 .ARM.attributes 00000031  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY
  7 .debug_info   000077b5  00000000  00000000  00002fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002706  00000000  00000000  0000a78e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000024a4  00000000  00000000  0000ce94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008e8  00000000  00000000  0000f338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 005ee7db  00000000  00000000  0000fc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000077cf  00000000  00000000  005fe3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e45  00000000  00000000  00605bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000079  00000000  00000000  00607a0f  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001698  00000000  00000000  00607a88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000410 <__aeabi_uidiv>:
     410:	2900      	cmp	r1, #0
     412:	d034      	beq.n	47e <.udivsi3_skip_div0_test+0x6a>

00000414 <.udivsi3_skip_div0_test>:
     414:	2301      	movs	r3, #1
     416:	2200      	movs	r2, #0
     418:	b410      	push	{r4}
     41a:	4288      	cmp	r0, r1
     41c:	d32c      	bcc.n	478 <.udivsi3_skip_div0_test+0x64>
     41e:	2401      	movs	r4, #1
     420:	0724      	lsls	r4, r4, #28
     422:	42a1      	cmp	r1, r4
     424:	d204      	bcs.n	430 <.udivsi3_skip_div0_test+0x1c>
     426:	4281      	cmp	r1, r0
     428:	d202      	bcs.n	430 <.udivsi3_skip_div0_test+0x1c>
     42a:	0109      	lsls	r1, r1, #4
     42c:	011b      	lsls	r3, r3, #4
     42e:	e7f8      	b.n	422 <.udivsi3_skip_div0_test+0xe>
     430:	00e4      	lsls	r4, r4, #3
     432:	42a1      	cmp	r1, r4
     434:	d204      	bcs.n	440 <.udivsi3_skip_div0_test+0x2c>
     436:	4281      	cmp	r1, r0
     438:	d202      	bcs.n	440 <.udivsi3_skip_div0_test+0x2c>
     43a:	0049      	lsls	r1, r1, #1
     43c:	005b      	lsls	r3, r3, #1
     43e:	e7f8      	b.n	432 <.udivsi3_skip_div0_test+0x1e>
     440:	4288      	cmp	r0, r1
     442:	d301      	bcc.n	448 <.udivsi3_skip_div0_test+0x34>
     444:	1a40      	subs	r0, r0, r1
     446:	431a      	orrs	r2, r3
     448:	084c      	lsrs	r4, r1, #1
     44a:	42a0      	cmp	r0, r4
     44c:	d302      	bcc.n	454 <.udivsi3_skip_div0_test+0x40>
     44e:	1b00      	subs	r0, r0, r4
     450:	085c      	lsrs	r4, r3, #1
     452:	4322      	orrs	r2, r4
     454:	088c      	lsrs	r4, r1, #2
     456:	42a0      	cmp	r0, r4
     458:	d302      	bcc.n	460 <.udivsi3_skip_div0_test+0x4c>
     45a:	1b00      	subs	r0, r0, r4
     45c:	089c      	lsrs	r4, r3, #2
     45e:	4322      	orrs	r2, r4
     460:	08cc      	lsrs	r4, r1, #3
     462:	42a0      	cmp	r0, r4
     464:	d302      	bcc.n	46c <.udivsi3_skip_div0_test+0x58>
     466:	1b00      	subs	r0, r0, r4
     468:	08dc      	lsrs	r4, r3, #3
     46a:	4322      	orrs	r2, r4
     46c:	2800      	cmp	r0, #0
     46e:	d003      	beq.n	478 <.udivsi3_skip_div0_test+0x64>
     470:	091b      	lsrs	r3, r3, #4
     472:	d001      	beq.n	478 <.udivsi3_skip_div0_test+0x64>
     474:	0909      	lsrs	r1, r1, #4
     476:	e7e3      	b.n	440 <.udivsi3_skip_div0_test+0x2c>
     478:	1c10      	adds	r0, r2, #0
     47a:	bc10      	pop	{r4}
     47c:	4770      	bx	lr
     47e:	2800      	cmp	r0, #0
     480:	d001      	beq.n	486 <.udivsi3_skip_div0_test+0x72>
     482:	2000      	movs	r0, #0
     484:	43c0      	mvns	r0, r0
     486:	b407      	push	{r0, r1, r2}
     488:	4802      	ldr	r0, [pc, #8]	; (494 <.udivsi3_skip_div0_test+0x80>)
     48a:	a102      	add	r1, pc, #8	; (adr r1, 494 <.udivsi3_skip_div0_test+0x80>)
     48c:	1840      	adds	r0, r0, r1
     48e:	9002      	str	r0, [sp, #8]
     490:	bd03      	pop	{r0, r1, pc}
     492:	46c0      	nop			; (mov r8, r8)
     494:	000000d9 	.word	0x000000d9

00000498 <__aeabi_uidivmod>:
     498:	2900      	cmp	r1, #0
     49a:	d0f0      	beq.n	47e <.udivsi3_skip_div0_test+0x6a>
     49c:	b503      	push	{r0, r1, lr}
     49e:	f7ff ffb9 	bl	414 <.udivsi3_skip_div0_test>
     4a2:	bc0e      	pop	{r1, r2, r3}
     4a4:	4342      	muls	r2, r0
     4a6:	1a89      	subs	r1, r1, r2
     4a8:	4718      	bx	r3
     4aa:	46c0      	nop			; (mov r8, r8)

000004ac <__aeabi_idiv>:
     4ac:	2900      	cmp	r1, #0
     4ae:	d041      	beq.n	534 <.divsi3_skip_div0_test+0x84>

000004b0 <.divsi3_skip_div0_test>:
     4b0:	b410      	push	{r4}
     4b2:	1c04      	adds	r4, r0, #0
     4b4:	404c      	eors	r4, r1
     4b6:	46a4      	mov	ip, r4
     4b8:	2301      	movs	r3, #1
     4ba:	2200      	movs	r2, #0
     4bc:	2900      	cmp	r1, #0
     4be:	d500      	bpl.n	4c2 <.divsi3_skip_div0_test+0x12>
     4c0:	4249      	negs	r1, r1
     4c2:	2800      	cmp	r0, #0
     4c4:	d500      	bpl.n	4c8 <.divsi3_skip_div0_test+0x18>
     4c6:	4240      	negs	r0, r0
     4c8:	4288      	cmp	r0, r1
     4ca:	d32c      	bcc.n	526 <.divsi3_skip_div0_test+0x76>
     4cc:	2401      	movs	r4, #1
     4ce:	0724      	lsls	r4, r4, #28
     4d0:	42a1      	cmp	r1, r4
     4d2:	d204      	bcs.n	4de <.divsi3_skip_div0_test+0x2e>
     4d4:	4281      	cmp	r1, r0
     4d6:	d202      	bcs.n	4de <.divsi3_skip_div0_test+0x2e>
     4d8:	0109      	lsls	r1, r1, #4
     4da:	011b      	lsls	r3, r3, #4
     4dc:	e7f8      	b.n	4d0 <.divsi3_skip_div0_test+0x20>
     4de:	00e4      	lsls	r4, r4, #3
     4e0:	42a1      	cmp	r1, r4
     4e2:	d204      	bcs.n	4ee <.divsi3_skip_div0_test+0x3e>
     4e4:	4281      	cmp	r1, r0
     4e6:	d202      	bcs.n	4ee <.divsi3_skip_div0_test+0x3e>
     4e8:	0049      	lsls	r1, r1, #1
     4ea:	005b      	lsls	r3, r3, #1
     4ec:	e7f8      	b.n	4e0 <.divsi3_skip_div0_test+0x30>
     4ee:	4288      	cmp	r0, r1
     4f0:	d301      	bcc.n	4f6 <.divsi3_skip_div0_test+0x46>
     4f2:	1a40      	subs	r0, r0, r1
     4f4:	431a      	orrs	r2, r3
     4f6:	084c      	lsrs	r4, r1, #1
     4f8:	42a0      	cmp	r0, r4
     4fa:	d302      	bcc.n	502 <.divsi3_skip_div0_test+0x52>
     4fc:	1b00      	subs	r0, r0, r4
     4fe:	085c      	lsrs	r4, r3, #1
     500:	4322      	orrs	r2, r4
     502:	088c      	lsrs	r4, r1, #2
     504:	42a0      	cmp	r0, r4
     506:	d302      	bcc.n	50e <.divsi3_skip_div0_test+0x5e>
     508:	1b00      	subs	r0, r0, r4
     50a:	089c      	lsrs	r4, r3, #2
     50c:	4322      	orrs	r2, r4
     50e:	08cc      	lsrs	r4, r1, #3
     510:	42a0      	cmp	r0, r4
     512:	d302      	bcc.n	51a <.divsi3_skip_div0_test+0x6a>
     514:	1b00      	subs	r0, r0, r4
     516:	08dc      	lsrs	r4, r3, #3
     518:	4322      	orrs	r2, r4
     51a:	2800      	cmp	r0, #0
     51c:	d003      	beq.n	526 <.divsi3_skip_div0_test+0x76>
     51e:	091b      	lsrs	r3, r3, #4
     520:	d001      	beq.n	526 <.divsi3_skip_div0_test+0x76>
     522:	0909      	lsrs	r1, r1, #4
     524:	e7e3      	b.n	4ee <.divsi3_skip_div0_test+0x3e>
     526:	1c10      	adds	r0, r2, #0
     528:	4664      	mov	r4, ip
     52a:	2c00      	cmp	r4, #0
     52c:	d500      	bpl.n	530 <.divsi3_skip_div0_test+0x80>
     52e:	4240      	negs	r0, r0
     530:	bc10      	pop	{r4}
     532:	4770      	bx	lr
     534:	2800      	cmp	r0, #0
     536:	d006      	beq.n	546 <.divsi3_skip_div0_test+0x96>
     538:	db03      	blt.n	542 <.divsi3_skip_div0_test+0x92>
     53a:	2000      	movs	r0, #0
     53c:	43c0      	mvns	r0, r0
     53e:	0840      	lsrs	r0, r0, #1
     540:	e001      	b.n	546 <.divsi3_skip_div0_test+0x96>
     542:	2080      	movs	r0, #128	; 0x80
     544:	0600      	lsls	r0, r0, #24
     546:	b407      	push	{r0, r1, r2}
     548:	4802      	ldr	r0, [pc, #8]	; (554 <.divsi3_skip_div0_test+0xa4>)
     54a:	a102      	add	r1, pc, #8	; (adr r1, 554 <.divsi3_skip_div0_test+0xa4>)
     54c:	1840      	adds	r0, r0, r1
     54e:	9002      	str	r0, [sp, #8]
     550:	bd03      	pop	{r0, r1, pc}
     552:	46c0      	nop			; (mov r8, r8)
     554:	00000019 	.word	0x00000019

00000558 <__aeabi_idivmod>:
     558:	2900      	cmp	r1, #0
     55a:	d0eb      	beq.n	534 <.divsi3_skip_div0_test+0x84>
     55c:	b503      	push	{r0, r1, lr}
     55e:	f7ff ffa7 	bl	4b0 <.divsi3_skip_div0_test>
     562:	bc0e      	pop	{r1, r2, r3}
     564:	4342      	muls	r2, r0
     566:	1a89      	subs	r1, r1, r2
     568:	4718      	bx	r3
     56a:	46c0      	nop			; (mov r8, r8)

0000056c <__aeabi_idiv0>:
     56c:	4770      	bx	lr
     56e:	46c0      	nop			; (mov r8, r8)

00000570 <WAIT1_Wait10Cycles>:
__attribute__((naked)) void WAIT1_Wait10Cycles(void)
{
  /* This function will wait 10 CPU cycles (including call overhead). */
  /* NOTE: Cortex-M0 and M4 have 1 cycle for a NOP */
  /* Compiler is GNUC */
  __asm (
     570:	46c0      	nop			; (mov r8, r8)
     572:	46c0      	nop			; (mov r8, r8)
     574:	46c0      	nop			; (mov r8, r8)
     576:	4770      	bx	lr

00000578 <WAIT1_Wait100Cycles>:
** ===================================================================
*/
__attribute__((naked)) void WAIT1_Wait100Cycles(void)
{
  /* This function will spend 100 CPU cycles (including call overhead). */
  __asm (
     578:	2000      	movs	r0, #0

0000057a <loop>:
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	46c0      	nop			; (mov r8, r8)
     57e:	46c0      	nop			; (mov r8, r8)
     580:	46c0      	nop			; (mov r8, r8)
     582:	46c0      	nop			; (mov r8, r8)
     584:	3001      	adds	r0, #1
     586:	2809      	cmp	r0, #9
     588:	d9f7      	bls.n	57a <loop>
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	4770      	bx	lr
     58e:	46c0      	nop			; (mov r8, r8)

00000590 <WAIT1_WaitCycles>:
**         cycles          - The number of cycles to wait.
**     Returns     : Nothing
** ===================================================================
*/
void WAIT1_WaitCycles(uint16_t cycles)
{
     590:	b580      	push	{r7, lr}
     592:	b082      	sub	sp, #8
     594:	af00      	add	r7, sp, #0
     596:	1c02      	adds	r2, r0, #0
     598:	1dbb      	adds	r3, r7, #6
     59a:	801a      	strh	r2, [r3, #0]
  while(cycles > 100) {
     59c:	e006      	b.n	5ac <WAIT1_WaitCycles+0x1c>
    WAIT1_Wait100Cycles();
     59e:	f7ff ffeb 	bl	578 <WAIT1_Wait100Cycles>
    cycles -= 100;
     5a2:	1dbb      	adds	r3, r7, #6
     5a4:	1dba      	adds	r2, r7, #6
     5a6:	8812      	ldrh	r2, [r2, #0]
     5a8:	3a64      	subs	r2, #100	; 0x64
     5aa:	801a      	strh	r2, [r3, #0]
**     Returns     : Nothing
** ===================================================================
*/
void WAIT1_WaitCycles(uint16_t cycles)
{
  while(cycles > 100) {
     5ac:	1dbb      	adds	r3, r7, #6
     5ae:	881b      	ldrh	r3, [r3, #0]
     5b0:	2b64      	cmp	r3, #100	; 0x64
     5b2:	d8f4      	bhi.n	59e <WAIT1_WaitCycles+0xe>
    WAIT1_Wait100Cycles();
    cycles -= 100;
  }
  while(cycles > 10) {
     5b4:	e006      	b.n	5c4 <WAIT1_WaitCycles+0x34>
    WAIT1_Wait10Cycles();
     5b6:	f7ff ffdb 	bl	570 <WAIT1_Wait10Cycles>
    cycles -= 10;
     5ba:	1dbb      	adds	r3, r7, #6
     5bc:	1dba      	adds	r2, r7, #6
     5be:	8812      	ldrh	r2, [r2, #0]
     5c0:	3a0a      	subs	r2, #10
     5c2:	801a      	strh	r2, [r3, #0]
{
  while(cycles > 100) {
    WAIT1_Wait100Cycles();
    cycles -= 100;
  }
  while(cycles > 10) {
     5c4:	1dbb      	adds	r3, r7, #6
     5c6:	881b      	ldrh	r3, [r3, #0]
     5c8:	2b0a      	cmp	r3, #10
     5ca:	d8f4      	bhi.n	5b6 <WAIT1_WaitCycles+0x26>
    WAIT1_Wait10Cycles();
    cycles -= 10;
  }
}
     5cc:	46bd      	mov	sp, r7
     5ce:	b002      	add	sp, #8
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)

000005d4 <WAIT1_WaitLongCycles>:
**         cycles          - The number of cycles to wait.
**     Returns     : Nothing
** ===================================================================
*/
void WAIT1_WaitLongCycles(uint32_t cycles)
{
     5d4:	b580      	push	{r7, lr}
     5d6:	b082      	sub	sp, #8
     5d8:	af00      	add	r7, sp, #0
     5da:	6078      	str	r0, [r7, #4]
  while(cycles>60000) {
     5dc:	e007      	b.n	5ee <WAIT1_WaitLongCycles+0x1a>
    WAIT1_WaitCycles(60000);
     5de:	4b0a      	ldr	r3, [pc, #40]	; (608 <WAIT1_WaitLongCycles+0x34>)
     5e0:	1c18      	adds	r0, r3, #0
     5e2:	f7ff ffd5 	bl	590 <WAIT1_WaitCycles>
    cycles -= 60000;
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	4a08      	ldr	r2, [pc, #32]	; (60c <WAIT1_WaitLongCycles+0x38>)
     5ea:	189b      	adds	r3, r3, r2
     5ec:	607b      	str	r3, [r7, #4]
**     Returns     : Nothing
** ===================================================================
*/
void WAIT1_WaitLongCycles(uint32_t cycles)
{
  while(cycles>60000) {
     5ee:	687a      	ldr	r2, [r7, #4]
     5f0:	4b05      	ldr	r3, [pc, #20]	; (608 <WAIT1_WaitLongCycles+0x34>)
     5f2:	429a      	cmp	r2, r3
     5f4:	d8f3      	bhi.n	5de <WAIT1_WaitLongCycles+0xa>
    WAIT1_WaitCycles(60000);
    cycles -= 60000;
  }
  WAIT1_WaitCycles((uint16_t)cycles);
     5f6:	687b      	ldr	r3, [r7, #4]
     5f8:	b29b      	uxth	r3, r3
     5fa:	1c18      	adds	r0, r3, #0
     5fc:	f7ff ffc8 	bl	590 <WAIT1_WaitCycles>
}
     600:	46bd      	mov	sp, r7
     602:	b002      	add	sp, #8
     604:	bd80      	pop	{r7, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	0000ea60 	.word	0x0000ea60
     60c:	ffff15a0 	.word	0xffff15a0

00000610 <WAIT1_Waitms>:
**                           wait
**     Returns     : Nothing
** ===================================================================
*/
void WAIT1_Waitms(uint16_t ms)
{
     610:	b580      	push	{r7, lr}
     612:	b084      	sub	sp, #16
     614:	af00      	add	r7, sp, #0
     616:	1c02      	adds	r2, r0, #0
     618:	1dbb      	adds	r3, r7, #6
     61a:	801a      	strh	r2, [r3, #0]
  uint32_t msCycles; /* cycles for 1 ms */

  /* static clock/speed configuration */
  msCycles = WAIT1_NofCyclesMs(1, CPU_CORE_CLK_HZ);
     61c:	4b09      	ldr	r3, [pc, #36]	; (644 <WAIT1_Waitms+0x34>)
     61e:	60fb      	str	r3, [r7, #12]
  while(ms>0) {
     620:	e008      	b.n	634 <WAIT1_Waitms+0x24>
    WAIT1_WaitLongCycles(msCycles);
     622:	68fb      	ldr	r3, [r7, #12]
     624:	1c18      	adds	r0, r3, #0
     626:	f7ff ffd5 	bl	5d4 <WAIT1_WaitLongCycles>
    ms--;
     62a:	1dbb      	adds	r3, r7, #6
     62c:	1dba      	adds	r2, r7, #6
     62e:	8812      	ldrh	r2, [r2, #0]
     630:	3a01      	subs	r2, #1
     632:	801a      	strh	r2, [r3, #0]
{
  uint32_t msCycles; /* cycles for 1 ms */

  /* static clock/speed configuration */
  msCycles = WAIT1_NofCyclesMs(1, CPU_CORE_CLK_HZ);
  while(ms>0) {
     634:	1dbb      	adds	r3, r7, #6
     636:	881b      	ldrh	r3, [r3, #0]
     638:	2b00      	cmp	r3, #0
     63a:	d1f2      	bne.n	622 <WAIT1_Waitms+0x12>
    WAIT1_WaitLongCycles(msCycles);
    ms--;
  }
}
     63c:	46bd      	mov	sp, r7
     63e:	b004      	add	sp, #16
     640:	bd80      	pop	{r7, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	000051eb 	.word	0x000051eb

00000648 <TimerIntLdd1_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* TimerIntLdd1_Init(LDD_TUserData *UserDataPtr)
{
     648:	b580      	push	{r7, lr}
     64a:	b084      	sub	sp, #16
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  TimerIntLdd1_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     650:	4b0f      	ldr	r3, [pc, #60]	; (690 <TimerIntLdd1_Init+0x48>)
     652:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     654:	68fb      	ldr	r3, [r7, #12]
     656:	687a      	ldr	r2, [r7, #4]
     658:	609a      	str	r2, [r3, #8]
  DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
     65a:	68fb      	ldr	r3, [r7, #12]
     65c:	2201      	movs	r2, #1
     65e:	711a      	strb	r2, [r3, #4]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TimerIntLdd1_ID,DeviceDataPrv);
     660:	4b0c      	ldr	r3, [pc, #48]	; (694 <TimerIntLdd1_Init+0x4c>)
     662:	68fa      	ldr	r2, [r7, #12]
     664:	61da      	str	r2, [r3, #28]
  DeviceDataPrv->LinkedDeviceDataPtr = TU2_Init((LDD_TUserData *)NULL);
     666:	2000      	movs	r0, #0
     668:	f000 f92a 	bl	8c0 <TU2_Init>
     66c:	1c02      	adds	r2, r0, #0
     66e:	68fb      	ldr	r3, [r7, #12]
     670:	601a      	str	r2, [r3, #0]
  if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful? */
     672:	68fb      	ldr	r3, [r7, #12]
     674:	681b      	ldr	r3, [r3, #0]
     676:	2b00      	cmp	r3, #0
     678:	d104      	bne.n	684 <TimerIntLdd1_Init+0x3c>
    /* Unregistration of the device structure */
    PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_TimerIntLdd1_ID);
     67a:	4b06      	ldr	r3, [pc, #24]	; (694 <TimerIntLdd1_Init+0x4c>)
     67c:	2200      	movs	r2, #0
     67e:	61da      	str	r2, [r3, #28]
    /* Deallocation of the device structure */
    /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deallocation code is generated */
    return NULL;                       /* If so, then the TimerInt initialization is also unsuccessful */
     680:	2300      	movs	r3, #0
     682:	e000      	b.n	686 <TimerIntLdd1_Init+0x3e>
  }
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
     684:	68fb      	ldr	r3, [r7, #12]
}
     686:	1c18      	adds	r0, r3, #0
     688:	46bd      	mov	sp, r7
     68a:	b004      	add	sp, #16
     68c:	bd80      	pop	{r7, pc}
     68e:	46c0      	nop			; (mov r8, r8)
     690:	1ffff000 	.word	0x1ffff000
     694:	1ffff03c 	.word	0x1ffff03c

00000698 <TU2_OnCounterRestart>:
**         eventually invokes event TimerIntLdd1_OnInterrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void TU2_OnCounterRestart(LDD_TUserData *UserDataPtr)
{
     698:	b580      	push	{r7, lr}
     69a:	b084      	sub	sp, #16
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
  TimerIntLdd1_TDeviceData *DeviceDataPrv = PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TimerIntLdd1_ID];
     6a0:	4b05      	ldr	r3, [pc, #20]	; (6b8 <TU2_OnCounterRestart+0x20>)
     6a2:	69db      	ldr	r3, [r3, #28]
     6a4:	60fb      	str	r3, [r7, #12]

  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  TimerIntLdd1_OnInterrupt(DeviceDataPrv->UserDataPtr); /* Invoke OnInterrupt event */
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	689b      	ldr	r3, [r3, #8]
     6aa:	1c18      	adds	r0, r3, #0
     6ac:	f000 fb7e 	bl	dac <TimerIntLdd1_OnInterrupt>
}
     6b0:	46bd      	mov	sp, r7
     6b2:	b004      	add	sp, #16
     6b4:	bd80      	pop	{r7, pc}
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	1ffff03c 	.word	0x1ffff03c

000006bc <Term2_SendChar>:
**         Val             - Char to send
**     Returns     : Nothing
** ===================================================================
*/
void Term2_SendChar(char_t Val)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b082      	sub	sp, #8
     6c0:	af00      	add	r7, sp, #0
     6c2:	1c02      	adds	r2, r0, #0
     6c4:	1dfb      	adds	r3, r7, #7
     6c6:	701a      	strb	r2, [r3, #0]
  while (Inhr2_SendChar((uint8_t)Val) == ERR_TXFULL){} /* Send char */
     6c8:	46c0      	nop			; (mov r8, r8)
     6ca:	1dfb      	adds	r3, r7, #7
     6cc:	781b      	ldrb	r3, [r3, #0]
     6ce:	1c18      	adds	r0, r3, #0
     6d0:	f000 fb86 	bl	de0 <Inhr2_SendChar>
     6d4:	1c03      	adds	r3, r0, #0
     6d6:	2b0b      	cmp	r3, #11
     6d8:	d0f7      	beq.n	6ca <Term2_SendChar+0xe>
}
     6da:	46bd      	mov	sp, r7
     6dc:	b002      	add	sp, #8
     6de:	bd80      	pop	{r7, pc}

000006e0 <Term2_CRLF>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void Term2_CRLF(void)
{
     6e0:	b580      	push	{r7, lr}
     6e2:	af00      	add	r7, sp, #0
  while (Inhr2_SendChar(0x0DU) == ERR_TXFULL){} /* Send the part of the escape sequence ('CR') */
     6e4:	46c0      	nop			; (mov r8, r8)
     6e6:	200d      	movs	r0, #13
     6e8:	f000 fb7a 	bl	de0 <Inhr2_SendChar>
     6ec:	1c03      	adds	r3, r0, #0
     6ee:	2b0b      	cmp	r3, #11
     6f0:	d0f9      	beq.n	6e6 <Term2_CRLF+0x6>
  while (Inhr2_SendChar(0x0AU) == ERR_TXFULL){} /* Send the part of the escape sequence ('LF') */
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	200a      	movs	r0, #10
     6f6:	f000 fb73 	bl	de0 <Inhr2_SendChar>
     6fa:	1c03      	adds	r3, r0, #0
     6fc:	2b0b      	cmp	r3, #11
     6fe:	d0f9      	beq.n	6f4 <Term2_CRLF+0x14>
}
     700:	46bd      	mov	sp, r7
     702:	bd80      	pop	{r7, pc}

00000704 <LongToStr>:
**         The method converts long int number to string.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void LongToStr(char_t* s, int32_t n)
{
     704:	b580      	push	{r7, lr}
     706:	b086      	sub	sp, #24
     708:	af00      	add	r7, sp, #0
     70a:	6078      	str	r0, [r7, #4]
     70c:	6039      	str	r1, [r7, #0]
  uint8_t i=0U, j;
     70e:	1c3b      	adds	r3, r7, #0
     710:	3317      	adds	r3, #23
     712:	2200      	movs	r2, #0
     714:	701a      	strb	r2, [r3, #0]
  char_t tmp;
  uint8_t Tmp;
  bool sign = (bool)((n < 0) ? TRUE : FALSE);
     716:	683b      	ldr	r3, [r7, #0]
     718:	2b00      	cmp	r3, #0
     71a:	da01      	bge.n	720 <LongToStr+0x1c>
     71c:	2301      	movs	r3, #1
     71e:	e000      	b.n	722 <LongToStr+0x1e>
     720:	2300      	movs	r3, #0
     722:	1c3a      	adds	r2, r7, #0
     724:	320f      	adds	r2, #15
     726:	7013      	strb	r3, [r2, #0]
  uint32_t u_n;

  u_n = (uint32_t)n;
     728:	683b      	ldr	r3, [r7, #0]
     72a:	613b      	str	r3, [r7, #16]
  if (sign){
     72c:	1c3b      	adds	r3, r7, #0
     72e:	330f      	adds	r3, #15
     730:	781b      	ldrb	r3, [r3, #0]
     732:	2b00      	cmp	r3, #0
     734:	d002      	beq.n	73c <LongToStr+0x38>
    u_n = (u_n ^ 0xFFFFFFFFUL) + 1U;
     736:	693b      	ldr	r3, [r7, #16]
     738:	425b      	negs	r3, r3
     73a:	613b      	str	r3, [r7, #16]
  }
  if (u_n == 0U){
     73c:	693b      	ldr	r3, [r7, #16]
     73e:	2b00      	cmp	r3, #0
     740:	d130      	bne.n	7a4 <LongToStr+0xa0>
    s[i++] = '0';
     742:	1c3b      	adds	r3, r7, #0
     744:	3317      	adds	r3, #23
     746:	781b      	ldrb	r3, [r3, #0]
     748:	687a      	ldr	r2, [r7, #4]
     74a:	18d3      	adds	r3, r2, r3
     74c:	2230      	movs	r2, #48	; 0x30
     74e:	701a      	strb	r2, [r3, #0]
     750:	1c3b      	adds	r3, r7, #0
     752:	3317      	adds	r3, #23
     754:	1c3a      	adds	r2, r7, #0
     756:	3217      	adds	r2, #23
     758:	7812      	ldrb	r2, [r2, #0]
     75a:	3201      	adds	r2, #1
     75c:	701a      	strb	r2, [r3, #0]
  }
  while (u_n > 0U) {
     75e:	e021      	b.n	7a4 <LongToStr+0xa0>
    Tmp = (uint8_t)((u_n % 10U) + 0x30U);
     760:	693b      	ldr	r3, [r7, #16]
     762:	1c18      	adds	r0, r3, #0
     764:	210a      	movs	r1, #10
     766:	f7ff fe97 	bl	498 <__aeabi_uidivmod>
     76a:	1c0b      	adds	r3, r1, #0
     76c:	b2da      	uxtb	r2, r3
     76e:	1c3b      	adds	r3, r7, #0
     770:	330e      	adds	r3, #14
     772:	3230      	adds	r2, #48	; 0x30
     774:	701a      	strb	r2, [r3, #0]
    s[i++] = (char_t)(Tmp);
     776:	1c3b      	adds	r3, r7, #0
     778:	3317      	adds	r3, #23
     77a:	781b      	ldrb	r3, [r3, #0]
     77c:	687a      	ldr	r2, [r7, #4]
     77e:	18d3      	adds	r3, r2, r3
     780:	1c3a      	adds	r2, r7, #0
     782:	320e      	adds	r2, #14
     784:	7812      	ldrb	r2, [r2, #0]
     786:	701a      	strb	r2, [r3, #0]
     788:	1c3b      	adds	r3, r7, #0
     78a:	3317      	adds	r3, #23
     78c:	1c3a      	adds	r2, r7, #0
     78e:	3217      	adds	r2, #23
     790:	7812      	ldrb	r2, [r2, #0]
     792:	3201      	adds	r2, #1
     794:	701a      	strb	r2, [r3, #0]
    u_n /= 10U;
     796:	693b      	ldr	r3, [r7, #16]
     798:	1c18      	adds	r0, r3, #0
     79a:	210a      	movs	r1, #10
     79c:	f7ff fe38 	bl	410 <__aeabi_uidiv>
     7a0:	1c03      	adds	r3, r0, #0
     7a2:	613b      	str	r3, [r7, #16]
    u_n = (u_n ^ 0xFFFFFFFFUL) + 1U;
  }
  if (u_n == 0U){
    s[i++] = '0';
  }
  while (u_n > 0U) {
     7a4:	693b      	ldr	r3, [r7, #16]
     7a6:	2b00      	cmp	r3, #0
     7a8:	d1da      	bne.n	760 <LongToStr+0x5c>
    Tmp = (uint8_t)((u_n % 10U) + 0x30U);
    s[i++] = (char_t)(Tmp);
    u_n /= 10U;
  }
  if (sign){
     7aa:	1c3b      	adds	r3, r7, #0
     7ac:	330f      	adds	r3, #15
     7ae:	781b      	ldrb	r3, [r3, #0]
     7b0:	2b00      	cmp	r3, #0
     7b2:	d00d      	beq.n	7d0 <LongToStr+0xcc>
    s[i++] = '-';
     7b4:	1c3b      	adds	r3, r7, #0
     7b6:	3317      	adds	r3, #23
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	687a      	ldr	r2, [r7, #4]
     7bc:	18d3      	adds	r3, r2, r3
     7be:	222d      	movs	r2, #45	; 0x2d
     7c0:	701a      	strb	r2, [r3, #0]
     7c2:	1c3b      	adds	r3, r7, #0
     7c4:	3317      	adds	r3, #23
     7c6:	1c3a      	adds	r2, r7, #0
     7c8:	3217      	adds	r2, #23
     7ca:	7812      	ldrb	r2, [r2, #0]
     7cc:	3201      	adds	r2, #1
     7ce:	701a      	strb	r2, [r3, #0]
  }
  for(j=0U; j<(i/2U); j++) {
     7d0:	1c3b      	adds	r3, r7, #0
     7d2:	3316      	adds	r3, #22
     7d4:	2200      	movs	r2, #0
     7d6:	701a      	strb	r2, [r3, #0]
     7d8:	e02e      	b.n	838 <LongToStr+0x134>
    tmp = s[j];
     7da:	1c3b      	adds	r3, r7, #0
     7dc:	3316      	adds	r3, #22
     7de:	781b      	ldrb	r3, [r3, #0]
     7e0:	687a      	ldr	r2, [r7, #4]
     7e2:	18d2      	adds	r2, r2, r3
     7e4:	1c3b      	adds	r3, r7, #0
     7e6:	330d      	adds	r3, #13
     7e8:	7812      	ldrb	r2, [r2, #0]
     7ea:	701a      	strb	r2, [r3, #0]
    s[j] = s[(i-j)-1U];
     7ec:	1c3b      	adds	r3, r7, #0
     7ee:	3316      	adds	r3, #22
     7f0:	781b      	ldrb	r3, [r3, #0]
     7f2:	687a      	ldr	r2, [r7, #4]
     7f4:	18d3      	adds	r3, r2, r3
     7f6:	1c3a      	adds	r2, r7, #0
     7f8:	3217      	adds	r2, #23
     7fa:	7811      	ldrb	r1, [r2, #0]
     7fc:	1c3a      	adds	r2, r7, #0
     7fe:	3216      	adds	r2, #22
     800:	7812      	ldrb	r2, [r2, #0]
     802:	1a8a      	subs	r2, r1, r2
     804:	3a01      	subs	r2, #1
     806:	6879      	ldr	r1, [r7, #4]
     808:	188a      	adds	r2, r1, r2
     80a:	7812      	ldrb	r2, [r2, #0]
     80c:	701a      	strb	r2, [r3, #0]
    s[(i-j)-1U] = tmp;
     80e:	1c3b      	adds	r3, r7, #0
     810:	3317      	adds	r3, #23
     812:	781a      	ldrb	r2, [r3, #0]
     814:	1c3b      	adds	r3, r7, #0
     816:	3316      	adds	r3, #22
     818:	781b      	ldrb	r3, [r3, #0]
     81a:	1ad3      	subs	r3, r2, r3
     81c:	3b01      	subs	r3, #1
     81e:	687a      	ldr	r2, [r7, #4]
     820:	18d3      	adds	r3, r2, r3
     822:	1c3a      	adds	r2, r7, #0
     824:	320d      	adds	r2, #13
     826:	7812      	ldrb	r2, [r2, #0]
     828:	701a      	strb	r2, [r3, #0]
    u_n /= 10U;
  }
  if (sign){
    s[i++] = '-';
  }
  for(j=0U; j<(i/2U); j++) {
     82a:	1c3b      	adds	r3, r7, #0
     82c:	3316      	adds	r3, #22
     82e:	1c3a      	adds	r2, r7, #0
     830:	3216      	adds	r2, #22
     832:	7812      	ldrb	r2, [r2, #0]
     834:	3201      	adds	r2, #1
     836:	701a      	strb	r2, [r3, #0]
     838:	1c3b      	adds	r3, r7, #0
     83a:	3317      	adds	r3, #23
     83c:	781b      	ldrb	r3, [r3, #0]
     83e:	085b      	lsrs	r3, r3, #1
     840:	b2db      	uxtb	r3, r3
     842:	1c3a      	adds	r2, r7, #0
     844:	3216      	adds	r2, #22
     846:	7812      	ldrb	r2, [r2, #0]
     848:	429a      	cmp	r2, r3
     84a:	d3c6      	bcc.n	7da <LongToStr+0xd6>
    tmp = s[j];
    s[j] = s[(i-j)-1U];
    s[(i-j)-1U] = tmp;
  }
  s[i] = '\0';
     84c:	1c3b      	adds	r3, r7, #0
     84e:	3317      	adds	r3, #23
     850:	781b      	ldrb	r3, [r3, #0]
     852:	687a      	ldr	r2, [r7, #4]
     854:	18d3      	adds	r3, r2, r3
     856:	2200      	movs	r2, #0
     858:	701a      	strb	r2, [r3, #0]
}
     85a:	46bd      	mov	sp, r7
     85c:	b006      	add	sp, #24
     85e:	bd80      	pop	{r7, pc}

00000860 <Term2_SendNum>:
**         number          - Long number
**     Returns     : Nothing
** ===================================================================
*/
void Term2_SendNum(int32_t number)
{
     860:	b580      	push	{r7, lr}
     862:	b086      	sub	sp, #24
     864:	af00      	add	r7, sp, #0
     866:	6078      	str	r0, [r7, #4]
  char_t str[15];                      /* Temporary variable */
  uint8_t i=0U;                        /* Temporary variable */
     868:	1c3b      	adds	r3, r7, #0
     86a:	3317      	adds	r3, #23
     86c:	2200      	movs	r2, #0
     86e:	701a      	strb	r2, [r3, #0]

  LongToStr(str, number);              /* Conversion number to the string */
     870:	1c3a      	adds	r2, r7, #0
     872:	3208      	adds	r2, #8
     874:	687b      	ldr	r3, [r7, #4]
     876:	1c10      	adds	r0, r2, #0
     878:	1c19      	adds	r1, r3, #0
     87a:	f7ff ff43 	bl	704 <LongToStr>
  while (str[i] != '\0') {
     87e:	e013      	b.n	8a8 <Term2_SendNum+0x48>
    while (Inhr2_SendChar((Inhr2_TComData)str[i]) == ERR_TXFULL){} /* Send char */
     880:	46c0      	nop			; (mov r8, r8)
     882:	1c3b      	adds	r3, r7, #0
     884:	3317      	adds	r3, #23
     886:	781b      	ldrb	r3, [r3, #0]
     888:	1c3a      	adds	r2, r7, #0
     88a:	3208      	adds	r2, #8
     88c:	5cd3      	ldrb	r3, [r2, r3]
     88e:	1c18      	adds	r0, r3, #0
     890:	f000 faa6 	bl	de0 <Inhr2_SendChar>
     894:	1c03      	adds	r3, r0, #0
     896:	2b0b      	cmp	r3, #11
     898:	d0f3      	beq.n	882 <Term2_SendNum+0x22>
    i++;                               /* Increase the variable */
     89a:	1c3b      	adds	r3, r7, #0
     89c:	3317      	adds	r3, #23
     89e:	1c3a      	adds	r2, r7, #0
     8a0:	3217      	adds	r2, #23
     8a2:	7812      	ldrb	r2, [r2, #0]
     8a4:	3201      	adds	r2, #1
     8a6:	701a      	strb	r2, [r3, #0]
{
  char_t str[15];                      /* Temporary variable */
  uint8_t i=0U;                        /* Temporary variable */

  LongToStr(str, number);              /* Conversion number to the string */
  while (str[i] != '\0') {
     8a8:	1c3b      	adds	r3, r7, #0
     8aa:	3317      	adds	r3, #23
     8ac:	781b      	ldrb	r3, [r3, #0]
     8ae:	1c3a      	adds	r2, r7, #0
     8b0:	3208      	adds	r2, #8
     8b2:	5cd3      	ldrb	r3, [r2, r3]
     8b4:	2b00      	cmp	r3, #0
     8b6:	d1e3      	bne.n	880 <Term2_SendNum+0x20>
    while (Inhr2_SendChar((Inhr2_TComData)str[i]) == ERR_TXFULL){} /* Send char */
    i++;                               /* Increase the variable */
  }
}
     8b8:	46bd      	mov	sp, r7
     8ba:	b006      	add	sp, #24
     8bc:	bd80      	pop	{r7, pc}
     8be:	46c0      	nop			; (mov r8, r8)

000008c0 <TU2_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* TU2_Init(LDD_TUserData *UserDataPtr)
{
     8c0:	b580      	push	{r7, lr}
     8c2:	b084      	sub	sp, #16
     8c4:	af00      	add	r7, sp, #0
     8c6:	6078      	str	r0, [r7, #4]
  TU2_TDeviceData *DeviceDataPrv;

  if (PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU2_ID] == NULL) {
     8c8:	4b25      	ldr	r3, [pc, #148]	; (960 <TU2_Init+0xa0>)
     8ca:	699b      	ldr	r3, [r3, #24]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d136      	bne.n	93e <TU2_Init+0x7e>
    /* Allocate device structure */
    /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
    DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     8d0:	4b24      	ldr	r3, [pc, #144]	; (964 <TU2_Init+0xa4>)
     8d2:	60fb      	str	r3, [r7, #12]
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     8d4:	68fb      	ldr	r3, [r7, #12]
     8d6:	687a      	ldr	r2, [r7, #4]
     8d8:	605a      	str	r2, [r3, #4]
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
     8da:	68fb      	ldr	r3, [r7, #12]
     8dc:	2201      	movs	r2, #1
     8de:	701a      	strb	r2, [r3, #0]
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  }
  /* Interrupt vector(s) allocation */
  /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the global variable */
  INT_LPTimer__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
     8e0:	4b21      	ldr	r3, [pc, #132]	; (968 <TU2_Init+0xa8>)
     8e2:	68fa      	ldr	r2, [r7, #12]
     8e4:	601a      	str	r2, [r3, #0]
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
     8e6:	4a21      	ldr	r2, [pc, #132]	; (96c <TU2_Init+0xac>)
     8e8:	4920      	ldr	r1, [pc, #128]	; (96c <TU2_Init+0xac>)
     8ea:	4b21      	ldr	r3, [pc, #132]	; (970 <TU2_Init+0xb0>)
     8ec:	58cb      	ldr	r3, [r1, r3]
     8ee:	2101      	movs	r1, #1
     8f0:	4319      	orrs	r1, r3
     8f2:	4b1f      	ldr	r3, [pc, #124]	; (970 <TU2_Init+0xb0>)
     8f4:	50d1      	str	r1, [r2, r3]
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=1,TIE=0,TPS=0,TPP=0,TFC=0,TMS=0,TEN=0 */
  LPTMR0_CSR = (LPTMR_CSR_TCF_MASK | LPTMR_CSR_TPS(0x00)); /* Clear control register */
     8f6:	4b1f      	ldr	r3, [pc, #124]	; (974 <TU2_Init+0xb4>)
     8f8:	2280      	movs	r2, #128	; 0x80
     8fa:	601a      	str	r2, [r3, #0]
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x20 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x20); /* Set up compare register */
     8fc:	4b1d      	ldr	r3, [pc, #116]	; (974 <TU2_Init+0xb4>)
     8fe:	2220      	movs	r2, #32
     900:	609a      	str	r2, [r3, #8]
  /* LPTMR0_PSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,PRESCALE=0,PBYP=1,PCS=0 */
  LPTMR0_PSR = LPTMR_PSR_PRESCALE(0x00) |
     902:	4b1c      	ldr	r3, [pc, #112]	; (974 <TU2_Init+0xb4>)
     904:	2204      	movs	r2, #4
     906:	605a      	str	r2, [r3, #4]
               LPTMR_PSR_PBYP_MASK |
               LPTMR_PSR_PCS(0x00);    /* Set up prescaler register */
  /* NVIC_IPR7: PRI_28=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
     908:	4a1b      	ldr	r2, [pc, #108]	; (978 <TU2_Init+0xb8>)
     90a:	491b      	ldr	r1, [pc, #108]	; (978 <TU2_Init+0xb8>)
     90c:	23c7      	movs	r3, #199	; 0xc7
     90e:	009b      	lsls	r3, r3, #2
     910:	58cb      	ldr	r3, [r1, r3]
     912:	21ff      	movs	r1, #255	; 0xff
     914:	438b      	bics	r3, r1
     916:	2180      	movs	r1, #128	; 0x80
     918:	4319      	orrs	r1, r3
     91a:	23c7      	movs	r3, #199	; 0xc7
     91c:	009b      	lsls	r3, r3, #2
     91e:	50d1      	str	r1, [r2, r3]
               NVIC_IP_PRI_28(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_28(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x10000000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x10000000);
     920:	4b15      	ldr	r3, [pc, #84]	; (978 <TU2_Init+0xb8>)
     922:	4a15      	ldr	r2, [pc, #84]	; (978 <TU2_Init+0xb8>)
     924:	6812      	ldr	r2, [r2, #0]
     926:	2180      	movs	r1, #128	; 0x80
     928:	0549      	lsls	r1, r1, #21
     92a:	430a      	orrs	r2, r1
     92c:	601a      	str	r2, [r3, #0]
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=0,TIE=1,TPS=0,TPP=0,TFC=0,TMS=0,TEN=1 */
  LPTMR0_CSR = (LPTMR_CSR_TIE_MASK | LPTMR_CSR_TPS(0x00) | LPTMR_CSR_TEN_MASK); /* Set up control register */
     92e:	4b11      	ldr	r3, [pc, #68]	; (974 <TU2_Init+0xb4>)
     930:	2241      	movs	r2, #65	; 0x41
     932:	601a      	str	r2, [r3, #0]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU2_ID,DeviceDataPrv);
     934:	4b0a      	ldr	r3, [pc, #40]	; (960 <TU2_Init+0xa0>)
     936:	68fa      	ldr	r2, [r7, #12]
     938:	619a      	str	r2, [r3, #24]
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
     93a:	68fb      	ldr	r3, [r7, #12]
     93c:	e00c      	b.n	958 <TU2_Init+0x98>
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
  }
  else {
    /* Memory is already allocated */
    DeviceDataPrv = (TU2_TDeviceDataPtr) PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU2_ID];
     93e:	4b08      	ldr	r3, [pc, #32]	; (960 <TU2_Init+0xa0>)
     940:	699b      	ldr	r3, [r3, #24]
     942:	60fb      	str	r3, [r7, #12]
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     944:	68fb      	ldr	r3, [r7, #12]
     946:	687a      	ldr	r2, [r7, #4]
     948:	605a      	str	r2, [r3, #4]
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	781b      	ldrb	r3, [r3, #0]
     94e:	3301      	adds	r3, #1
     950:	b2da      	uxtb	r2, r3
     952:	68fb      	ldr	r3, [r7, #12]
     954:	701a      	strb	r2, [r3, #0]
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
     956:	68fb      	ldr	r3, [r7, #12]
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=0,TIE=1,TPS=0,TPP=0,TFC=0,TMS=0,TEN=1 */
  LPTMR0_CSR = (LPTMR_CSR_TIE_MASK | LPTMR_CSR_TPS(0x00) | LPTMR_CSR_TEN_MASK); /* Set up control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU2_ID,DeviceDataPrv);
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
     958:	1c18      	adds	r0, r3, #0
     95a:	46bd      	mov	sp, r7
     95c:	b004      	add	sp, #16
     95e:	bd80      	pop	{r7, pc}
     960:	1ffff03c 	.word	0x1ffff03c
     964:	1ffff00c 	.word	0x1ffff00c
     968:	1ffff014 	.word	0x1ffff014
     96c:	40047000 	.word	0x40047000
     970:	00001038 	.word	0x00001038
     974:	40040000 	.word	0x40040000
     978:	e000e100 	.word	0xe000e100

0000097c <TU2_Interrupt>:
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(TU2_Interrupt)
{
     97c:	b580      	push	{r7, lr}
     97e:	b082      	sub	sp, #8
     980:	af00      	add	r7, sp, #0
  /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
  TU2_TDeviceDataPtr DeviceDataPrv = INT_LPTimer__DEFAULT_RTOS_ISRPARAM;
     982:	4b08      	ldr	r3, [pc, #32]	; (9a4 <TU2_Interrupt+0x28>)
     984:	681b      	ldr	r3, [r3, #0]
     986:	607b      	str	r3, [r7, #4]

  LPTMR_PDD_ClearInterruptFlag(LPTMR0_BASE_PTR); /* Clear interrupt flag */
     988:	4b07      	ldr	r3, [pc, #28]	; (9a8 <TU2_Interrupt+0x2c>)
     98a:	4a07      	ldr	r2, [pc, #28]	; (9a8 <TU2_Interrupt+0x2c>)
     98c:	6812      	ldr	r2, [r2, #0]
     98e:	2180      	movs	r1, #128	; 0x80
     990:	430a      	orrs	r2, r1
     992:	601a      	str	r2, [r3, #0]
  TU2_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
     994:	687b      	ldr	r3, [r7, #4]
     996:	685b      	ldr	r3, [r3, #4]
     998:	1c18      	adds	r0, r3, #0
     99a:	f7ff fe7d 	bl	698 <TU2_OnCounterRestart>
}
     99e:	46bd      	mov	sp, r7
     9a0:	b002      	add	sp, #8
     9a2:	bd80      	pop	{r7, pc}
     9a4:	1ffff014 	.word	0x1ffff014
     9a8:	40040000 	.word	0x40040000

000009ac <TU1_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* TU1_Init(LDD_TUserData *UserDataPtr)
{
     9ac:	b580      	push	{r7, lr}
     9ae:	b084      	sub	sp, #16
     9b0:	af00      	add	r7, sp, #0
     9b2:	6078      	str	r0, [r7, #4]
  TU1_TDeviceData *DeviceDataPrv;

  if (PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU1_ID] == NULL) {
     9b4:	4b33      	ldr	r3, [pc, #204]	; (a84 <TU1_Init+0xd8>)
     9b6:	68db      	ldr	r3, [r3, #12]
     9b8:	2b00      	cmp	r3, #0
     9ba:	d152      	bne.n	a62 <TU1_Init+0xb6>
    /* Allocate device structure */
    /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
    DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     9bc:	4b32      	ldr	r3, [pc, #200]	; (a88 <TU1_Init+0xdc>)
     9be:	60fb      	str	r3, [r7, #12]
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     9c0:	68fb      	ldr	r3, [r7, #12]
     9c2:	687a      	ldr	r2, [r7, #4]
     9c4:	609a      	str	r2, [r3, #8]
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	2201      	movs	r2, #1
     9ca:	711a      	strb	r2, [r3, #4]
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  }
  /* SIM_SCGC6: TPM0=1 */
  SIM_SCGC6 |= SIM_SCGC6_TPM0_MASK;
     9cc:	4a2f      	ldr	r2, [pc, #188]	; (a8c <TU1_Init+0xe0>)
     9ce:	492f      	ldr	r1, [pc, #188]	; (a8c <TU1_Init+0xe0>)
     9d0:	4b2f      	ldr	r3, [pc, #188]	; (a90 <TU1_Init+0xe4>)
     9d2:	58cb      	ldr	r3, [r1, r3]
     9d4:	2180      	movs	r1, #128	; 0x80
     9d6:	0449      	lsls	r1, r1, #17
     9d8:	4319      	orrs	r1, r3
     9da:	4b2d      	ldr	r3, [pc, #180]	; (a90 <TU1_Init+0xe4>)
     9dc:	50d1      	str	r1, [r2, r3]
  /* TPM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=0,CPWMS=0,CMOD=0,PS=0 */
  TPM0_SC = (TPM_SC_CMOD(0x00) | TPM_SC_PS(0x00)); /* Clear status and control register */
     9de:	4b2d      	ldr	r3, [pc, #180]	; (a94 <TU1_Init+0xe8>)
     9e0:	2200      	movs	r2, #0
     9e2:	601a      	str	r2, [r3, #0]
  /* TPM0_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNT=0 */
  TPM0_CNT = TPM_CNT_COUNT(0x00);      /* Reset counter register */
     9e4:	4b2b      	ldr	r3, [pc, #172]	; (a94 <TU1_Init+0xe8>)
     9e6:	2200      	movs	r2, #0
     9e8:	605a      	str	r2, [r3, #4]
  /* TPM0_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C0SC = 0x00U;                   /* Clear channel status and control register */
     9ea:	4b2a      	ldr	r3, [pc, #168]	; (a94 <TU1_Init+0xe8>)
     9ec:	2200      	movs	r2, #0
     9ee:	60da      	str	r2, [r3, #12]
  /* TPM0_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C1SC = 0x00U;                   /* Clear channel status and control register */
     9f0:	4b28      	ldr	r3, [pc, #160]	; (a94 <TU1_Init+0xe8>)
     9f2:	2200      	movs	r2, #0
     9f4:	615a      	str	r2, [r3, #20]
  /* TPM0_C2SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C2SC = 0x00U;                   /* Clear channel status and control register */
     9f6:	4b27      	ldr	r3, [pc, #156]	; (a94 <TU1_Init+0xe8>)
     9f8:	2200      	movs	r2, #0
     9fa:	61da      	str	r2, [r3, #28]
  /* TPM0_C3SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C3SC = 0x00U;                   /* Clear channel status and control register */
     9fc:	4b25      	ldr	r3, [pc, #148]	; (a94 <TU1_Init+0xe8>)
     9fe:	2200      	movs	r2, #0
     a00:	625a      	str	r2, [r3, #36]	; 0x24
  /* TPM0_C4SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C4SC = 0x00U;                   /* Clear channel status and control register */
     a02:	4b24      	ldr	r3, [pc, #144]	; (a94 <TU1_Init+0xe8>)
     a04:	2200      	movs	r2, #0
     a06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* TPM0_C5SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C5SC = 0x00U;                   /* Clear channel status and control register */
     a08:	4b22      	ldr	r3, [pc, #136]	; (a94 <TU1_Init+0xe8>)
     a0a:	2200      	movs	r2, #0
     a0c:	635a      	str	r2, [r3, #52]	; 0x34
  /* TPM0_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=0x0830 */
  TPM0_MOD = TPM_MOD_MOD(0x0830);      /* Set up modulo register */
     a0e:	4b21      	ldr	r3, [pc, #132]	; (a94 <TU1_Init+0xe8>)
     a10:	2283      	movs	r2, #131	; 0x83
     a12:	0112      	lsls	r2, r2, #4
     a14:	609a      	str	r2, [r3, #8]
  /* TPM0_C5SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=1,MSA=0,ELSB=1,ELSA=1,??=0,DMA=0 */
  TPM0_C5SC = (TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK | TPM_CnSC_ELSA_MASK); /* Set up channel status and control register */
     a16:	4b1f      	ldr	r3, [pc, #124]	; (a94 <TU1_Init+0xe8>)
     a18:	222c      	movs	r2, #44	; 0x2c
     a1a:	635a      	str	r2, [r3, #52]	; 0x34
  /* TPM0_C5V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=0 */
  TPM0_C5V = TPM_CnV_VAL(0x00);        /* Set up channel value register */
     a1c:	4b1d      	ldr	r3, [pc, #116]	; (a94 <TU1_Init+0xe8>)
     a1e:	2200      	movs	r2, #0
     a20:	639a      	str	r2, [r3, #56]	; 0x38
  /* TPM0_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=1,MSA=0,ELSB=1,ELSA=1,??=0,DMA=0 */
  TPM0_C0SC = (TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK | TPM_CnSC_ELSA_MASK); /* Set up channel status and control register */
     a22:	4b1c      	ldr	r3, [pc, #112]	; (a94 <TU1_Init+0xe8>)
     a24:	222c      	movs	r2, #44	; 0x2c
     a26:	60da      	str	r2, [r3, #12]
  /* TPM0_C0V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=0 */
  TPM0_C0V = TPM_CnV_VAL(0x00);        /* Set up channel value register */
     a28:	4b1a      	ldr	r3, [pc, #104]	; (a94 <TU1_Init+0xe8>)
     a2a:	2200      	movs	r2, #0
     a2c:	611a      	str	r2, [r3, #16]
  /* PORTD_PCR5: ISF=0,MUX=4 */
  PORTD_PCR5 = (uint32_t)((PORTD_PCR5 & (uint32_t)~(uint32_t)(
     a2e:	4b1a      	ldr	r3, [pc, #104]	; (a98 <TU1_Init+0xec>)
     a30:	4a19      	ldr	r2, [pc, #100]	; (a98 <TU1_Init+0xec>)
     a32:	6951      	ldr	r1, [r2, #20]
     a34:	4a19      	ldr	r2, [pc, #100]	; (a9c <TU1_Init+0xf0>)
     a36:	400a      	ands	r2, r1
     a38:	2180      	movs	r1, #128	; 0x80
     a3a:	00c9      	lsls	r1, r1, #3
     a3c:	430a      	orrs	r2, r1
     a3e:	615a      	str	r2, [r3, #20]
                PORT_PCR_MUX(0x03)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x04)
               ));
  /* PORTD_PCR0: ISF=0,MUX=4 */
  PORTD_PCR0 = (uint32_t)((PORTD_PCR0 & (uint32_t)~(uint32_t)(
     a40:	4b15      	ldr	r3, [pc, #84]	; (a98 <TU1_Init+0xec>)
     a42:	4a15      	ldr	r2, [pc, #84]	; (a98 <TU1_Init+0xec>)
     a44:	6811      	ldr	r1, [r2, #0]
     a46:	4a15      	ldr	r2, [pc, #84]	; (a9c <TU1_Init+0xf0>)
     a48:	400a      	ands	r2, r1
     a4a:	2180      	movs	r1, #128	; 0x80
     a4c:	00c9      	lsls	r1, r1, #3
     a4e:	430a      	orrs	r2, r1
     a50:	601a      	str	r2, [r3, #0]
                PORT_PCR_ISF_MASK |
                PORT_PCR_MUX(0x03)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x04)
               ));
  DeviceDataPrv->Source = TPM_PDD_SYSTEM; /* Store clock source */
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	2208      	movs	r2, #8
     a56:	601a      	str	r2, [r3, #0]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID,DeviceDataPrv);
     a58:	4b0a      	ldr	r3, [pc, #40]	; (a84 <TU1_Init+0xd8>)
     a5a:	68fa      	ldr	r2, [r7, #12]
     a5c:	60da      	str	r2, [r3, #12]
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
     a5e:	68fb      	ldr	r3, [r7, #12]
     a60:	e00c      	b.n	a7c <TU1_Init+0xd0>
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
  }
  else {
    /* Memory is already allocated */
    DeviceDataPrv = (TU1_TDeviceDataPtr) PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU1_ID];
     a62:	4b08      	ldr	r3, [pc, #32]	; (a84 <TU1_Init+0xd8>)
     a64:	68db      	ldr	r3, [r3, #12]
     a66:	60fb      	str	r3, [r7, #12]
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     a68:	68fb      	ldr	r3, [r7, #12]
     a6a:	687a      	ldr	r2, [r7, #4]
     a6c:	609a      	str	r2, [r3, #8]
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
     a6e:	68fb      	ldr	r3, [r7, #12]
     a70:	791b      	ldrb	r3, [r3, #4]
     a72:	3301      	adds	r3, #1
     a74:	b2da      	uxtb	r2, r3
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	711a      	strb	r2, [r3, #4]
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
     a7a:	68fb      	ldr	r3, [r7, #12]
               ));
  DeviceDataPrv->Source = TPM_PDD_SYSTEM; /* Store clock source */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID,DeviceDataPrv);
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
     a7c:	1c18      	adds	r0, r3, #0
     a7e:	46bd      	mov	sp, r7
     a80:	b004      	add	sp, #16
     a82:	bd80      	pop	{r7, pc}
     a84:	1ffff03c 	.word	0x1ffff03c
     a88:	1ffff018 	.word	0x1ffff018
     a8c:	40047000 	.word	0x40047000
     a90:	0000103c 	.word	0x0000103c
     a94:	40038000 	.word	0x40038000
     a98:	4004c000 	.word	0x4004c000
     a9c:	fefff8ff 	.word	0xfefff8ff

00000aa0 <TU1_Enable>:
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError TU1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
     aa0:	b580      	push	{r7, lr}
     aa2:	b084      	sub	sp, #16
     aa4:	af00      	add	r7, sp, #0
     aa6:	6078      	str	r0, [r7, #4]
  TU1_TDeviceData *DeviceDataPrv = (TU1_TDeviceData *)DeviceDataPtr;
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	60fb      	str	r3, [r7, #12]

  TPM_PDD_SelectPrescalerSource(TPM0_BASE_PTR, DeviceDataPrv->Source); /* Enable the device */
     aac:	4b07      	ldr	r3, [pc, #28]	; (acc <TU1_Enable+0x2c>)
     aae:	4a07      	ldr	r2, [pc, #28]	; (acc <TU1_Enable+0x2c>)
     ab0:	6812      	ldr	r2, [r2, #0]
     ab2:	2198      	movs	r1, #152	; 0x98
     ab4:	1c10      	adds	r0, r2, #0
     ab6:	4388      	bics	r0, r1
     ab8:	1c01      	adds	r1, r0, #0
     aba:	68fa      	ldr	r2, [r7, #12]
     abc:	6812      	ldr	r2, [r2, #0]
     abe:	430a      	orrs	r2, r1
     ac0:	601a      	str	r2, [r3, #0]
  return ERR_OK;
     ac2:	2300      	movs	r3, #0
}
     ac4:	1c18      	adds	r0, r3, #0
     ac6:	46bd      	mov	sp, r7
     ac8:	b004      	add	sp, #16
     aca:	bd80      	pop	{r7, pc}
     acc:	40038000 	.word	0x40038000

00000ad0 <TU1_GetPeriodTicks>:
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError TU1_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, TU1_TValueType *TicksPtr)
{
     ad0:	b580      	push	{r7, lr}
     ad2:	b084      	sub	sp, #16
     ad4:	af00      	add	r7, sp, #0
     ad6:	6078      	str	r0, [r7, #4]
     ad8:	6039      	str	r1, [r7, #0]
  uint16_t tmp;

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  tmp = (uint16_t)(TPM_PDD_ReadModuloReg(TPM0_BASE_PTR));
     ada:	4b0b      	ldr	r3, [pc, #44]	; (b08 <TU1_GetPeriodTicks+0x38>)
     adc:	689a      	ldr	r2, [r3, #8]
     ade:	1c3b      	adds	r3, r7, #0
     ae0:	330e      	adds	r3, #14
     ae2:	801a      	strh	r2, [r3, #0]
  *TicksPtr = (TU1_TValueType)++tmp;
     ae4:	1c3b      	adds	r3, r7, #0
     ae6:	330e      	adds	r3, #14
     ae8:	1c3a      	adds	r2, r7, #0
     aea:	320e      	adds	r2, #14
     aec:	8812      	ldrh	r2, [r2, #0]
     aee:	3201      	adds	r2, #1
     af0:	801a      	strh	r2, [r3, #0]
     af2:	683b      	ldr	r3, [r7, #0]
     af4:	1c3a      	adds	r2, r7, #0
     af6:	320e      	adds	r2, #14
     af8:	8812      	ldrh	r2, [r2, #0]
     afa:	801a      	strh	r2, [r3, #0]
  return ERR_OK;                       /* OK */
     afc:	2300      	movs	r3, #0
}
     afe:	1c18      	adds	r0, r3, #0
     b00:	46bd      	mov	sp, r7
     b02:	b004      	add	sp, #16
     b04:	bd80      	pop	{r7, pc}
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	40038000 	.word	0x40038000

00000b0c <TU1_SetOffsetTicks>:
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError TU1_SetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, TU1_TValueType Ticks)
{
     b0c:	b580      	push	{r7, lr}
     b0e:	b082      	sub	sp, #8
     b10:	af00      	add	r7, sp, #0
     b12:	6078      	str	r0, [r7, #4]
     b14:	1cfb      	adds	r3, r7, #3
     b16:	7019      	strb	r1, [r3, #0]
     b18:	1c3b      	adds	r3, r7, #0
     b1a:	801a      	strh	r2, [r3, #0]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  /* Parameter test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (ChannelIdx > LAST_CHANNEL) {     /* Is the channel index out of range? */
     b1c:	1cfb      	adds	r3, r7, #3
     b1e:	781b      	ldrb	r3, [r3, #0]
     b20:	2b01      	cmp	r3, #1
     b22:	d901      	bls.n	b28 <TU1_SetOffsetTicks+0x1c>
    return ERR_PARAM_INDEX;            /* If yes then error */
     b24:	2382      	movs	r3, #130	; 0x82
     b26:	e013      	b.n	b50 <TU1_SetOffsetTicks+0x44>
  }
  if ((ChannelMode[ChannelIdx]) != 0U) { /* Is the channel in compare mode? */
     b28:	1cfb      	adds	r3, r7, #3
     b2a:	781b      	ldrb	r3, [r3, #0]
     b2c:	4a0a      	ldr	r2, [pc, #40]	; (b58 <TU1_SetOffsetTicks+0x4c>)
     b2e:	5cd3      	ldrb	r3, [r2, r3]
     b30:	2b00      	cmp	r3, #0
     b32:	d001      	beq.n	b38 <TU1_SetOffsetTicks+0x2c>
    return ERR_NOTAVAIL;               /* If not then error */
     b34:	2309      	movs	r3, #9
     b36:	e00b      	b.n	b50 <TU1_SetOffsetTicks+0x44>
  }
  TPM_PDD_WriteChannelValueReg(TPM0_BASE_PTR, ChannelDevice[ChannelIdx], (uint16_t)Ticks);
     b38:	4908      	ldr	r1, [pc, #32]	; (b5c <TU1_SetOffsetTicks+0x50>)
     b3a:	1cfb      	adds	r3, r7, #3
     b3c:	781b      	ldrb	r3, [r3, #0]
     b3e:	4a08      	ldr	r2, [pc, #32]	; (b60 <TU1_SetOffsetTicks+0x54>)
     b40:	5cd3      	ldrb	r3, [r2, r3]
     b42:	1c3a      	adds	r2, r7, #0
     b44:	8812      	ldrh	r2, [r2, #0]
     b46:	3301      	adds	r3, #1
     b48:	00db      	lsls	r3, r3, #3
     b4a:	18cb      	adds	r3, r1, r3
     b4c:	609a      	str	r2, [r3, #8]
  return ERR_OK;                       /* OK */
     b4e:	2300      	movs	r3, #0
}
     b50:	1c18      	adds	r0, r3, #0
     b52:	46bd      	mov	sp, r7
     b54:	b002      	add	sp, #8
     b56:	bd80      	pop	{r7, pc}
     b58:	000031f8 	.word	0x000031f8
     b5c:	40038000 	.word	0x40038000
     b60:	000031f4 	.word	0x000031f4

00000b64 <PwmLdd2_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* PwmLdd2_Init(LDD_TUserData *UserDataPtr)
{
     b64:	b580      	push	{r7, lr}
     b66:	b084      	sub	sp, #16
     b68:	af00      	add	r7, sp, #0
     b6a:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  PwmLdd2_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     b6c:	4b10      	ldr	r3, [pc, #64]	; (bb0 <PwmLdd2_Init+0x4c>)
     b6e:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     b70:	68fb      	ldr	r3, [r7, #12]
     b72:	687a      	ldr	r2, [r7, #4]
     b74:	609a      	str	r2, [r3, #8]
  DeviceDataPrv->EnUser = FALSE;       /* Set the flag "device disabled" */
     b76:	68fb      	ldr	r3, [r7, #12]
     b78:	2200      	movs	r2, #0
     b7a:	711a      	strb	r2, [r3, #4]
  DeviceDataPrv->RatioStore = 0x01U;   /* Ratio after initialization */
     b7c:	68fb      	ldr	r3, [r7, #12]
     b7e:	2201      	movs	r2, #1
     b80:	80da      	strh	r2, [r3, #6]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd2_ID,DeviceDataPrv);
     b82:	4b0c      	ldr	r3, [pc, #48]	; (bb4 <PwmLdd2_Init+0x50>)
     b84:	68fa      	ldr	r2, [r7, #12]
     b86:	615a      	str	r2, [r3, #20]
  DeviceDataPrv->LinkedDeviceDataPtr = TU1_Init((LDD_TUserData *)NULL);
     b88:	2000      	movs	r0, #0
     b8a:	f7ff ff0f 	bl	9ac <TU1_Init>
     b8e:	1c02      	adds	r2, r0, #0
     b90:	68fb      	ldr	r3, [r7, #12]
     b92:	601a      	str	r2, [r3, #0]
  if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful? */
     b94:	68fb      	ldr	r3, [r7, #12]
     b96:	681b      	ldr	r3, [r3, #0]
     b98:	2b00      	cmp	r3, #0
     b9a:	d104      	bne.n	ba6 <PwmLdd2_Init+0x42>
    /* Unregistration of the device structure */
    PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd2_ID);
     b9c:	4b05      	ldr	r3, [pc, #20]	; (bb4 <PwmLdd2_Init+0x50>)
     b9e:	2200      	movs	r2, #0
     ba0:	615a      	str	r2, [r3, #20]
    /* Deallocation of the device structure */
    /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deallocation code is generated */
    return NULL;                       /* If so, then the PWM initialization is also unsuccessful */
     ba2:	2300      	movs	r3, #0
     ba4:	e000      	b.n	ba8 <PwmLdd2_Init+0x44>
  }
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
     ba6:	68fb      	ldr	r3, [r7, #12]
}
     ba8:	1c18      	adds	r0, r3, #0
     baa:	46bd      	mov	sp, r7
     bac:	b004      	add	sp, #16
     bae:	bd80      	pop	{r7, pc}
     bb0:	1ffff024 	.word	0x1ffff024
     bb4:	1ffff03c 	.word	0x1ffff03c

00000bb8 <PwmLdd2_Enable>:
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError PwmLdd2_Enable(LDD_TDeviceData *DeviceDataPtr)
{
     bb8:	b580      	push	{r7, lr}
     bba:	b084      	sub	sp, #16
     bbc:	af00      	add	r7, sp, #0
     bbe:	6078      	str	r0, [r7, #4]
  PwmLdd2_TDeviceData *DeviceDataPrv = (PwmLdd2_TDeviceData *)DeviceDataPtr;
     bc0:	687b      	ldr	r3, [r7, #4]
     bc2:	60fb      	str	r3, [r7, #12]

  if (!DeviceDataPrv->EnUser) {        /* Is the device disabled by user? */
     bc4:	68fb      	ldr	r3, [r7, #12]
     bc6:	791b      	ldrb	r3, [r3, #4]
     bc8:	2b00      	cmp	r3, #0
     bca:	d107      	bne.n	bdc <PwmLdd2_Enable+0x24>
    DeviceDataPrv->EnUser = TRUE;      /* If yes then set the flag "device enabled" */
     bcc:	68fb      	ldr	r3, [r7, #12]
     bce:	2201      	movs	r2, #1
     bd0:	711a      	strb	r2, [r3, #4]
    (void)TU1_Enable(DeviceDataPrv->LinkedDeviceDataPtr); /* Enable TimerUnit */
     bd2:	68fb      	ldr	r3, [r7, #12]
     bd4:	681b      	ldr	r3, [r3, #0]
     bd6:	1c18      	adds	r0, r3, #0
     bd8:	f7ff ff62 	bl	aa0 <TU1_Enable>
  }
  return ERR_OK;
     bdc:	2300      	movs	r3, #0
}
     bde:	1c18      	adds	r0, r3, #0
     be0:	46bd      	mov	sp, r7
     be2:	b004      	add	sp, #16
     be4:	bd80      	pop	{r7, pc}
     be6:	46c0      	nop			; (mov r8, r8)

00000be8 <PwmLdd2_SetRatio16>:
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError PwmLdd2_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio)
{
     be8:	b580      	push	{r7, lr}
     bea:	b084      	sub	sp, #16
     bec:	af00      	add	r7, sp, #0
     bee:	6078      	str	r0, [r7, #4]
     bf0:	1c0a      	adds	r2, r1, #0
     bf2:	1cbb      	adds	r3, r7, #2
     bf4:	801a      	strh	r2, [r3, #0]
  PwmLdd2_TDeviceData *DeviceDataPrv = (PwmLdd2_TDeviceData *)DeviceDataPtr;
     bf6:	687b      	ldr	r3, [r7, #4]
     bf8:	60fb      	str	r3, [r7, #12]

  DeviceDataPrv->RatioStore = Ratio;   /* Store new value of the ratio */
     bfa:	68fb      	ldr	r3, [r7, #12]
     bfc:	1cba      	adds	r2, r7, #2
     bfe:	8812      	ldrh	r2, [r2, #0]
     c00:	80da      	strh	r2, [r3, #6]
  SetRatio(DeviceDataPtr);
     c02:	687b      	ldr	r3, [r7, #4]
     c04:	1c18      	adds	r0, r3, #0
     c06:	f000 f805 	bl	c14 <SetRatio>
  return ERR_OK;
     c0a:	2300      	movs	r3, #0
}
     c0c:	1c18      	adds	r0, r3, #0
     c0e:	46bd      	mov	sp, r7
     c10:	b004      	add	sp, #16
     c12:	bd80      	pop	{r7, pc}

00000c14 <SetRatio>:
**         variable RatioStore.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void SetRatio(LDD_TDeviceData *DeviceDataPtr)
{
     c14:	b580      	push	{r7, lr}
     c16:	b086      	sub	sp, #24
     c18:	af00      	add	r7, sp, #0
     c1a:	6078      	str	r0, [r7, #4]
  PwmLdd2_TDeviceData *DeviceDataPrv = (PwmLdd2_TDeviceData*)DeviceDataPtr;
     c1c:	687b      	ldr	r3, [r7, #4]
     c1e:	613b      	str	r3, [r7, #16]
  uint16_t Period;
  uint16_t Duty;

  (void)TU1_GetPeriodTicks(DeviceDataPrv->LinkedDeviceDataPtr, &Period);
     c20:	693b      	ldr	r3, [r7, #16]
     c22:	681a      	ldr	r2, [r3, #0]
     c24:	1c3b      	adds	r3, r7, #0
     c26:	330e      	adds	r3, #14
     c28:	1c10      	adds	r0, r2, #0
     c2a:	1c19      	adds	r1, r3, #0
     c2c:	f7ff ff50 	bl	ad0 <TU1_GetPeriodTicks>
  if (Period == 0U) {
     c30:	1c3b      	adds	r3, r7, #0
     c32:	330e      	adds	r3, #14
     c34:	881b      	ldrh	r3, [r3, #0]
     c36:	2b00      	cmp	r3, #0
     c38:	d105      	bne.n	c46 <SetRatio+0x32>
    Duty = DeviceDataPrv->RatioStore;
     c3a:	1c3b      	adds	r3, r7, #0
     c3c:	3316      	adds	r3, #22
     c3e:	693a      	ldr	r2, [r7, #16]
     c40:	88d2      	ldrh	r2, [r2, #6]
     c42:	801a      	strh	r2, [r3, #0]
     c44:	e00c      	b.n	c60 <SetRatio+0x4c>
  }
  else {
    Duty = (uint16_t)((((uint32_t)(Period) * DeviceDataPrv->RatioStore) + 0x8000) >> 0x10);
     c46:	1c3b      	adds	r3, r7, #0
     c48:	330e      	adds	r3, #14
     c4a:	881b      	ldrh	r3, [r3, #0]
     c4c:	693a      	ldr	r2, [r7, #16]
     c4e:	88d2      	ldrh	r2, [r2, #6]
     c50:	4353      	muls	r3, r2
     c52:	2280      	movs	r2, #128	; 0x80
     c54:	0212      	lsls	r2, r2, #8
     c56:	189b      	adds	r3, r3, r2
     c58:	0c1a      	lsrs	r2, r3, #16
     c5a:	1c3b      	adds	r3, r7, #0
     c5c:	3316      	adds	r3, #22
     c5e:	801a      	strh	r2, [r3, #0]
  }
  (void)TU1_SetOffsetTicks(DeviceDataPrv->LinkedDeviceDataPtr, CHANNEL, Duty);
     c60:	693b      	ldr	r3, [r7, #16]
     c62:	681a      	ldr	r2, [r3, #0]
     c64:	1c3b      	adds	r3, r7, #0
     c66:	3316      	adds	r3, #22
     c68:	881b      	ldrh	r3, [r3, #0]
     c6a:	1c10      	adds	r0, r2, #0
     c6c:	2101      	movs	r1, #1
     c6e:	1c1a      	adds	r2, r3, #0
     c70:	f7ff ff4c 	bl	b0c <TU1_SetOffsetTicks>
}
     c74:	46bd      	mov	sp, r7
     c76:	b006      	add	sp, #24
     c78:	bd80      	pop	{r7, pc}
     c7a:	46c0      	nop			; (mov r8, r8)

00000c7c <PwmLdd1_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* PwmLdd1_Init(LDD_TUserData *UserDataPtr)
{
     c7c:	b580      	push	{r7, lr}
     c7e:	b084      	sub	sp, #16
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  PwmLdd1_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     c84:	4b10      	ldr	r3, [pc, #64]	; (cc8 <PwmLdd1_Init+0x4c>)
     c86:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     c88:	68fb      	ldr	r3, [r7, #12]
     c8a:	687a      	ldr	r2, [r7, #4]
     c8c:	609a      	str	r2, [r3, #8]
  DeviceDataPrv->EnUser = FALSE;       /* Set the flag "device disabled" */
     c8e:	68fb      	ldr	r3, [r7, #12]
     c90:	2200      	movs	r2, #0
     c92:	711a      	strb	r2, [r3, #4]
  DeviceDataPrv->RatioStore = 0x01U;   /* Ratio after initialization */
     c94:	68fb      	ldr	r3, [r7, #12]
     c96:	2201      	movs	r2, #1
     c98:	80da      	strh	r2, [r3, #6]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd1_ID,DeviceDataPrv);
     c9a:	4b0c      	ldr	r3, [pc, #48]	; (ccc <PwmLdd1_Init+0x50>)
     c9c:	68fa      	ldr	r2, [r7, #12]
     c9e:	611a      	str	r2, [r3, #16]
  DeviceDataPrv->LinkedDeviceDataPtr = TU1_Init((LDD_TUserData *)NULL);
     ca0:	2000      	movs	r0, #0
     ca2:	f7ff fe83 	bl	9ac <TU1_Init>
     ca6:	1c02      	adds	r2, r0, #0
     ca8:	68fb      	ldr	r3, [r7, #12]
     caa:	601a      	str	r2, [r3, #0]
  if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful? */
     cac:	68fb      	ldr	r3, [r7, #12]
     cae:	681b      	ldr	r3, [r3, #0]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d104      	bne.n	cbe <PwmLdd1_Init+0x42>
    /* Unregistration of the device structure */
    PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd1_ID);
     cb4:	4b05      	ldr	r3, [pc, #20]	; (ccc <PwmLdd1_Init+0x50>)
     cb6:	2200      	movs	r2, #0
     cb8:	611a      	str	r2, [r3, #16]
    /* Deallocation of the device structure */
    /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deallocation code is generated */
    return NULL;                       /* If so, then the PWM initialization is also unsuccessful */
     cba:	2300      	movs	r3, #0
     cbc:	e000      	b.n	cc0 <PwmLdd1_Init+0x44>
  }
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
     cbe:	68fb      	ldr	r3, [r7, #12]
}
     cc0:	1c18      	adds	r0, r3, #0
     cc2:	46bd      	mov	sp, r7
     cc4:	b004      	add	sp, #16
     cc6:	bd80      	pop	{r7, pc}
     cc8:	1ffff030 	.word	0x1ffff030
     ccc:	1ffff03c 	.word	0x1ffff03c

00000cd0 <PwmLdd1_Enable>:
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError PwmLdd1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
     cd0:	b580      	push	{r7, lr}
     cd2:	b084      	sub	sp, #16
     cd4:	af00      	add	r7, sp, #0
     cd6:	6078      	str	r0, [r7, #4]
  PwmLdd1_TDeviceData *DeviceDataPrv = (PwmLdd1_TDeviceData *)DeviceDataPtr;
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	60fb      	str	r3, [r7, #12]

  if (!DeviceDataPrv->EnUser) {        /* Is the device disabled by user? */
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	791b      	ldrb	r3, [r3, #4]
     ce0:	2b00      	cmp	r3, #0
     ce2:	d107      	bne.n	cf4 <PwmLdd1_Enable+0x24>
    DeviceDataPrv->EnUser = TRUE;      /* If yes then set the flag "device enabled" */
     ce4:	68fb      	ldr	r3, [r7, #12]
     ce6:	2201      	movs	r2, #1
     ce8:	711a      	strb	r2, [r3, #4]
    (void)TU1_Enable(DeviceDataPrv->LinkedDeviceDataPtr); /* Enable TimerUnit */
     cea:	68fb      	ldr	r3, [r7, #12]
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	1c18      	adds	r0, r3, #0
     cf0:	f7ff fed6 	bl	aa0 <TU1_Enable>
  }
  return ERR_OK;
     cf4:	2300      	movs	r3, #0
}
     cf6:	1c18      	adds	r0, r3, #0
     cf8:	46bd      	mov	sp, r7
     cfa:	b004      	add	sp, #16
     cfc:	bd80      	pop	{r7, pc}
     cfe:	46c0      	nop			; (mov r8, r8)

00000d00 <PwmLdd1_SetRatio16>:
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError PwmLdd1_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio)
{
     d00:	b580      	push	{r7, lr}
     d02:	b084      	sub	sp, #16
     d04:	af00      	add	r7, sp, #0
     d06:	6078      	str	r0, [r7, #4]
     d08:	1c0a      	adds	r2, r1, #0
     d0a:	1cbb      	adds	r3, r7, #2
     d0c:	801a      	strh	r2, [r3, #0]
  PwmLdd1_TDeviceData *DeviceDataPrv = (PwmLdd1_TDeviceData *)DeviceDataPtr;
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	60fb      	str	r3, [r7, #12]

  DeviceDataPrv->RatioStore = Ratio;   /* Store new value of the ratio */
     d12:	68fb      	ldr	r3, [r7, #12]
     d14:	1cba      	adds	r2, r7, #2
     d16:	8812      	ldrh	r2, [r2, #0]
     d18:	80da      	strh	r2, [r3, #6]
  SetRatio(DeviceDataPtr);
     d1a:	687b      	ldr	r3, [r7, #4]
     d1c:	1c18      	adds	r0, r3, #0
     d1e:	f000 f805 	bl	d2c <SetRatio>
  return ERR_OK;
     d22:	2300      	movs	r3, #0
}
     d24:	1c18      	adds	r0, r3, #0
     d26:	46bd      	mov	sp, r7
     d28:	b004      	add	sp, #16
     d2a:	bd80      	pop	{r7, pc}

00000d2c <SetRatio>:
**         variable RatioStore.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void SetRatio(LDD_TDeviceData *DeviceDataPtr)
{
     d2c:	b580      	push	{r7, lr}
     d2e:	b086      	sub	sp, #24
     d30:	af00      	add	r7, sp, #0
     d32:	6078      	str	r0, [r7, #4]
  PwmLdd1_TDeviceData *DeviceDataPrv = (PwmLdd1_TDeviceData*)DeviceDataPtr;
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	613b      	str	r3, [r7, #16]
  uint16_t Period;
  uint16_t Duty;

  (void)TU1_GetPeriodTicks(DeviceDataPrv->LinkedDeviceDataPtr, &Period);
     d38:	693b      	ldr	r3, [r7, #16]
     d3a:	681a      	ldr	r2, [r3, #0]
     d3c:	1c3b      	adds	r3, r7, #0
     d3e:	330e      	adds	r3, #14
     d40:	1c10      	adds	r0, r2, #0
     d42:	1c19      	adds	r1, r3, #0
     d44:	f7ff fec4 	bl	ad0 <TU1_GetPeriodTicks>
  if (Period == 0U) {
     d48:	1c3b      	adds	r3, r7, #0
     d4a:	330e      	adds	r3, #14
     d4c:	881b      	ldrh	r3, [r3, #0]
     d4e:	2b00      	cmp	r3, #0
     d50:	d105      	bne.n	d5e <SetRatio+0x32>
    Duty = DeviceDataPrv->RatioStore;
     d52:	1c3b      	adds	r3, r7, #0
     d54:	3316      	adds	r3, #22
     d56:	693a      	ldr	r2, [r7, #16]
     d58:	88d2      	ldrh	r2, [r2, #6]
     d5a:	801a      	strh	r2, [r3, #0]
     d5c:	e00c      	b.n	d78 <SetRatio+0x4c>
  }
  else {
    Duty = (uint16_t)((((uint32_t)(Period) * DeviceDataPrv->RatioStore) + 0x8000) >> 0x10);
     d5e:	1c3b      	adds	r3, r7, #0
     d60:	330e      	adds	r3, #14
     d62:	881b      	ldrh	r3, [r3, #0]
     d64:	693a      	ldr	r2, [r7, #16]
     d66:	88d2      	ldrh	r2, [r2, #6]
     d68:	4353      	muls	r3, r2
     d6a:	2280      	movs	r2, #128	; 0x80
     d6c:	0212      	lsls	r2, r2, #8
     d6e:	189b      	adds	r3, r3, r2
     d70:	0c1a      	lsrs	r2, r3, #16
     d72:	1c3b      	adds	r3, r7, #0
     d74:	3316      	adds	r3, #22
     d76:	801a      	strh	r2, [r3, #0]
  }
  (void)TU1_SetOffsetTicks(DeviceDataPrv->LinkedDeviceDataPtr, CHANNEL, Duty);
     d78:	693b      	ldr	r3, [r7, #16]
     d7a:	681a      	ldr	r2, [r3, #0]
     d7c:	1c3b      	adds	r3, r7, #0
     d7e:	3316      	adds	r3, #22
     d80:	881b      	ldrh	r3, [r3, #0]
     d82:	1c10      	adds	r0, r2, #0
     d84:	2100      	movs	r1, #0
     d86:	1c1a      	adds	r2, r3, #0
     d88:	f7ff fec0 	bl	b0c <TU1_SetOffsetTicks>
}
     d8c:	46bd      	mov	sp, r7
     d8e:	b006      	add	sp, #24
     d90:	bd80      	pop	{r7, pc}
     d92:	46c0      	nop			; (mov r8, r8)

00000d94 <PullupButton_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void PullupButton_Init(void)
{
     d94:	b580      	push	{r7, lr}
     d96:	af00      	add	r7, sp, #0
  /* GPIOD_PDDR: PDD&=~8 */
  GPIOD_PDDR &= (uint32_t)~(uint32_t)(GPIO_PDDR_PDD(0x08));
     d98:	4b03      	ldr	r3, [pc, #12]	; (da8 <PullupButton_Init+0x14>)
     d9a:	4a03      	ldr	r2, [pc, #12]	; (da8 <PullupButton_Init+0x14>)
     d9c:	6952      	ldr	r2, [r2, #20]
     d9e:	2108      	movs	r1, #8
     da0:	438a      	bics	r2, r1
     da2:	615a      	str	r2, [r3, #20]
}
     da4:	46bd      	mov	sp, r7
     da6:	bd80      	pop	{r7, pc}
     da8:	400ff0c0 	.word	0x400ff0c0

00000dac <TimerIntLdd1_OnInterrupt>:
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void TimerIntLdd1_OnInterrupt(LDD_TUserData *UserDataPtr)
{
     dac:	b580      	push	{r7, lr}
     dae:	b082      	sub	sp, #8
     db0:	af00      	add	r7, sp, #0
     db2:	6078      	str	r0, [r7, #4]
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  Periodic_timer_OnInterrupt();        /* Invoke OnInterrupt event */
     db4:	f002 f91e 	bl	2ff4 <Periodic_timer_OnInterrupt>
}
     db8:	46bd      	mov	sp, r7
     dba:	b002      	add	sp, #8
     dbc:	bd80      	pop	{r7, pc}
     dbe:	46c0      	nop			; (mov r8, r8)

00000dc0 <HWEnDi>:
**         Disable methods and several internal methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void HWEnDi(void)
{
     dc0:	b580      	push	{r7, lr}
     dc2:	af00      	add	r7, sp, #0
  (void)ASerialLdd1_ReceiveBlock(ASerialLdd1_DeviceDataPtr, &BufferRead, 1U); /* Receive one data byte */
     dc4:	4b04      	ldr	r3, [pc, #16]	; (dd8 <HWEnDi+0x18>)
     dc6:	681a      	ldr	r2, [r3, #0]
     dc8:	4b04      	ldr	r3, [pc, #16]	; (ddc <HWEnDi+0x1c>)
     dca:	1c10      	adds	r0, r2, #0
     dcc:	1c19      	adds	r1, r3, #0
     dce:	2201      	movs	r2, #1
     dd0:	f001 fbca 	bl	2568 <ASerialLdd1_ReceiveBlock>
}
     dd4:	46bd      	mov	sp, r7
     dd6:	bd80      	pop	{r7, pc}
     dd8:	1ffff1e0 	.word	0x1ffff1e0
     ddc:	1ffff0a0 	.word	0x1ffff0a0

00000de0 <Inhr2_SendChar>:
**                           the active speed mode
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/
byte Inhr2_SendChar(Inhr2_TComData Chr)
{
     de0:	b580      	push	{r7, lr}
     de2:	b084      	sub	sp, #16
     de4:	af00      	add	r7, sp, #0
     de6:	1c02      	adds	r2, r0, #0
     de8:	1dfb      	adds	r3, r7, #7
     dea:	701a      	strb	r2, [r3, #0]
  if (Inhr2_OutLen == Inhr2_OUT_BUF_SIZE) { /* Is number of chars in buffer is the same as a size of the transmit buffer */
     dec:	4b2f      	ldr	r3, [pc, #188]	; (eac <Inhr2_SendChar+0xcc>)
     dee:	881b      	ldrh	r3, [r3, #0]
     df0:	2b40      	cmp	r3, #64	; 0x40
     df2:	d101      	bne.n	df8 <Inhr2_SendChar+0x18>
    return ERR_TXFULL;                 /* If yes then error */
     df4:	230b      	movs	r3, #11
     df6:	e054      	b.n	ea2 <Inhr2_SendChar+0xc2>
  }
  EnterCritical();                     /* Disable global interrupts */
     df8:	1c3b      	adds	r3, r7, #0
     dfa:	330f      	adds	r3, #15
     dfc:	f3ef 8010 	mrs	r0, PRIMASK
     e00:	b672      	cpsid	i
     e02:	7018      	strb	r0, [r3, #0]
     e04:	4b2a      	ldr	r3, [pc, #168]	; (eb0 <Inhr2_SendChar+0xd0>)
     e06:	781b      	ldrb	r3, [r3, #0]
     e08:	b2db      	uxtb	r3, r3
     e0a:	3301      	adds	r3, #1
     e0c:	b2db      	uxtb	r3, r3
     e0e:	4a28      	ldr	r2, [pc, #160]	; (eb0 <Inhr2_SendChar+0xd0>)
     e10:	1c19      	adds	r1, r3, #0
     e12:	7011      	strb	r1, [r2, #0]
     e14:	2b01      	cmp	r3, #1
     e16:	d104      	bne.n	e22 <Inhr2_SendChar+0x42>
     e18:	1c3b      	adds	r3, r7, #0
     e1a:	330f      	adds	r3, #15
     e1c:	781a      	ldrb	r2, [r3, #0]
     e1e:	4b25      	ldr	r3, [pc, #148]	; (eb4 <Inhr2_SendChar+0xd4>)
     e20:	701a      	strb	r2, [r3, #0]
  Inhr2_OutLen++;                      /* Increase number of bytes in the transmit buffer */
     e22:	4b22      	ldr	r3, [pc, #136]	; (eac <Inhr2_SendChar+0xcc>)
     e24:	881b      	ldrh	r3, [r3, #0]
     e26:	3301      	adds	r3, #1
     e28:	b29a      	uxth	r2, r3
     e2a:	4b20      	ldr	r3, [pc, #128]	; (eac <Inhr2_SendChar+0xcc>)
     e2c:	801a      	strh	r2, [r3, #0]
  OutBuffer[OutIndexW++] = Chr;        /* Store char to buffer */
     e2e:	4b22      	ldr	r3, [pc, #136]	; (eb8 <Inhr2_SendChar+0xd8>)
     e30:	881b      	ldrh	r3, [r3, #0]
     e32:	1c1a      	adds	r2, r3, #0
     e34:	4921      	ldr	r1, [pc, #132]	; (ebc <Inhr2_SendChar+0xdc>)
     e36:	1df8      	adds	r0, r7, #7
     e38:	7800      	ldrb	r0, [r0, #0]
     e3a:	5488      	strb	r0, [r1, r2]
     e3c:	3301      	adds	r3, #1
     e3e:	b29a      	uxth	r2, r3
     e40:	4b1d      	ldr	r3, [pc, #116]	; (eb8 <Inhr2_SendChar+0xd8>)
     e42:	801a      	strh	r2, [r3, #0]
  if (OutIndexW >= Inhr2_OUT_BUF_SIZE) { /* Is the pointer out of the transmit buffer */
     e44:	4b1c      	ldr	r3, [pc, #112]	; (eb8 <Inhr2_SendChar+0xd8>)
     e46:	881b      	ldrh	r3, [r3, #0]
     e48:	2b3f      	cmp	r3, #63	; 0x3f
     e4a:	d902      	bls.n	e52 <Inhr2_SendChar+0x72>
    OutIndexW = 0x00U;                 /* Set index to first item in the transmit buffer */
     e4c:	4b1a      	ldr	r3, [pc, #104]	; (eb8 <Inhr2_SendChar+0xd8>)
     e4e:	2200      	movs	r2, #0
     e50:	801a      	strh	r2, [r3, #0]
  }
  if ((SerFlag & RUNINT_FROM_TX) == 0U) {
     e52:	4b1b      	ldr	r3, [pc, #108]	; (ec0 <Inhr2_SendChar+0xe0>)
     e54:	881b      	ldrh	r3, [r3, #0]
     e56:	1c1a      	adds	r2, r3, #0
     e58:	2320      	movs	r3, #32
     e5a:	4013      	ands	r3, r2
     e5c:	d112      	bne.n	e84 <Inhr2_SendChar+0xa4>
    SerFlag |= RUNINT_FROM_TX;         /* Set flag "running int from TX"? */
     e5e:	4b18      	ldr	r3, [pc, #96]	; (ec0 <Inhr2_SendChar+0xe0>)
     e60:	881b      	ldrh	r3, [r3, #0]
     e62:	2220      	movs	r2, #32
     e64:	4313      	orrs	r3, r2
     e66:	b29a      	uxth	r2, r3
     e68:	4b15      	ldr	r3, [pc, #84]	; (ec0 <Inhr2_SendChar+0xe0>)
     e6a:	801a      	strh	r2, [r3, #0]
    (void)ASerialLdd1_SendBlock(ASerialLdd1_DeviceDataPtr, (LDD_TData *)&OutBuffer[OutIndexR], 1U); /* Send one data byte */
     e6c:	4b15      	ldr	r3, [pc, #84]	; (ec4 <Inhr2_SendChar+0xe4>)
     e6e:	681a      	ldr	r2, [r3, #0]
     e70:	4b15      	ldr	r3, [pc, #84]	; (ec8 <Inhr2_SendChar+0xe8>)
     e72:	881b      	ldrh	r3, [r3, #0]
     e74:	1c19      	adds	r1, r3, #0
     e76:	4b11      	ldr	r3, [pc, #68]	; (ebc <Inhr2_SendChar+0xdc>)
     e78:	18cb      	adds	r3, r1, r3
     e7a:	1c10      	adds	r0, r2, #0
     e7c:	1c19      	adds	r1, r3, #0
     e7e:	2201      	movs	r2, #1
     e80:	f001 fbbe 	bl	2600 <ASerialLdd1_SendBlock>
  }
  ExitCritical();                      /* Enable global interrupts */
     e84:	4b0a      	ldr	r3, [pc, #40]	; (eb0 <Inhr2_SendChar+0xd0>)
     e86:	781b      	ldrb	r3, [r3, #0]
     e88:	b2db      	uxtb	r3, r3
     e8a:	3b01      	subs	r3, #1
     e8c:	b2db      	uxtb	r3, r3
     e8e:	4a08      	ldr	r2, [pc, #32]	; (eb0 <Inhr2_SendChar+0xd0>)
     e90:	1c19      	adds	r1, r3, #0
     e92:	7011      	strb	r1, [r2, #0]
     e94:	2b00      	cmp	r3, #0
     e96:	d103      	bne.n	ea0 <Inhr2_SendChar+0xc0>
     e98:	4b06      	ldr	r3, [pc, #24]	; (eb4 <Inhr2_SendChar+0xd4>)
     e9a:	7818      	ldrb	r0, [r3, #0]
     e9c:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
     ea0:	2300      	movs	r3, #0
}
     ea2:	1c18      	adds	r0, r3, #0
     ea4:	46bd      	mov	sp, r7
     ea6:	b004      	add	sp, #16
     ea8:	bd80      	pop	{r7, pc}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	1ffff0a2 	.word	0x1ffff0a2
     eb0:	1ffff148 	.word	0x1ffff148
     eb4:	1ffff1e8 	.word	0x1ffff1e8
     eb8:	1ffff0a6 	.word	0x1ffff0a6
     ebc:	1ffff0a8 	.word	0x1ffff0a8
     ec0:	1ffff088 	.word	0x1ffff088
     ec4:	1ffff1e0 	.word	0x1ffff1e0
     ec8:	1ffff0a4 	.word	0x1ffff0a4

00000ecc <Inhr2_Init>:
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void Inhr2_Init(void)
{
     ecc:	b580      	push	{r7, lr}
     ece:	af00      	add	r7, sp, #0
  SerFlag = 0x00U;                     /* Reset flags */
     ed0:	4b0f      	ldr	r3, [pc, #60]	; (f10 <Inhr2_Init+0x44>)
     ed2:	2200      	movs	r2, #0
     ed4:	801a      	strh	r2, [r3, #0]
  Inhr2_InpLen = 0x00U;                /* No char in the receive buffer */
     ed6:	4b0f      	ldr	r3, [pc, #60]	; (f14 <Inhr2_Init+0x48>)
     ed8:	2200      	movs	r2, #0
     eda:	801a      	strh	r2, [r3, #0]
  InpIndexR = 0x00U;                   /* Set index on the first item in the receive buffer */
     edc:	4b0e      	ldr	r3, [pc, #56]	; (f18 <Inhr2_Init+0x4c>)
     ede:	2200      	movs	r2, #0
     ee0:	801a      	strh	r2, [r3, #0]
  InpIndexW = 0x00U;
     ee2:	4b0e      	ldr	r3, [pc, #56]	; (f1c <Inhr2_Init+0x50>)
     ee4:	2200      	movs	r2, #0
     ee6:	801a      	strh	r2, [r3, #0]
  Inhr2_OutLen = 0x00U;                /* No char in the transmit buffer */
     ee8:	4b0d      	ldr	r3, [pc, #52]	; (f20 <Inhr2_Init+0x54>)
     eea:	2200      	movs	r2, #0
     eec:	801a      	strh	r2, [r3, #0]
  OutIndexR = 0x00U;                   /* Set index on the first item in the transmit buffer */
     eee:	4b0d      	ldr	r3, [pc, #52]	; (f24 <Inhr2_Init+0x58>)
     ef0:	2200      	movs	r2, #0
     ef2:	801a      	strh	r2, [r3, #0]
  OutIndexW = 0x00U;
     ef4:	4b0c      	ldr	r3, [pc, #48]	; (f28 <Inhr2_Init+0x5c>)
     ef6:	2200      	movs	r2, #0
     ef8:	801a      	strh	r2, [r3, #0]
  ASerialLdd1_DeviceDataPtr = ASerialLdd1_Init(NULL); /* Calling init method of the inherited component */
     efa:	2000      	movs	r0, #0
     efc:	f001 fa7c 	bl	23f8 <ASerialLdd1_Init>
     f00:	1c02      	adds	r2, r0, #0
     f02:	4b0a      	ldr	r3, [pc, #40]	; (f2c <Inhr2_Init+0x60>)
     f04:	601a      	str	r2, [r3, #0]
  HWEnDi();                            /* Enable/disable device according to status flags */
     f06:	f7ff ff5b 	bl	dc0 <HWEnDi>
}
     f0a:	46bd      	mov	sp, r7
     f0c:	bd80      	pop	{r7, pc}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	1ffff088 	.word	0x1ffff088
     f14:	1ffff08a 	.word	0x1ffff08a
     f18:	1ffff08c 	.word	0x1ffff08c
     f1c:	1ffff08e 	.word	0x1ffff08e
     f20:	1ffff0a2 	.word	0x1ffff0a2
     f24:	1ffff0a4 	.word	0x1ffff0a4
     f28:	1ffff0a6 	.word	0x1ffff0a6
     f2c:	1ffff1e0 	.word	0x1ffff1e0

00000f30 <ASerialLdd1_OnBlockReceived>:
**         moved to the input buffer.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd1_OnBlockReceived(LDD_TUserData *UserDataPtr)
{
     f30:	b580      	push	{r7, lr}
     f32:	b082      	sub	sp, #8
     f34:	af00      	add	r7, sp, #0
     f36:	6078      	str	r0, [r7, #4]

  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  if (Inhr2_InpLen < Inhr2_INP_BUF_SIZE) { /* Is number of bytes in the receive buffer lower than size of buffer? */
     f38:	4b17      	ldr	r3, [pc, #92]	; (f98 <ASerialLdd1_OnBlockReceived+0x68>)
     f3a:	881b      	ldrh	r3, [r3, #0]
     f3c:	2b0f      	cmp	r3, #15
     f3e:	d818      	bhi.n	f72 <ASerialLdd1_OnBlockReceived+0x42>
    Inhr2_InpLen++;                    /* Increase number of chars in the receive buffer */
     f40:	4b15      	ldr	r3, [pc, #84]	; (f98 <ASerialLdd1_OnBlockReceived+0x68>)
     f42:	881b      	ldrh	r3, [r3, #0]
     f44:	3301      	adds	r3, #1
     f46:	b29a      	uxth	r2, r3
     f48:	4b13      	ldr	r3, [pc, #76]	; (f98 <ASerialLdd1_OnBlockReceived+0x68>)
     f4a:	801a      	strh	r2, [r3, #0]
    InpBuffer[InpIndexW++] = (Inhr2_TComData)BufferRead; /* Save received char to the receive buffer */
     f4c:	4b13      	ldr	r3, [pc, #76]	; (f9c <ASerialLdd1_OnBlockReceived+0x6c>)
     f4e:	881b      	ldrh	r3, [r3, #0]
     f50:	1c1a      	adds	r2, r3, #0
     f52:	4913      	ldr	r1, [pc, #76]	; (fa0 <ASerialLdd1_OnBlockReceived+0x70>)
     f54:	7808      	ldrb	r0, [r1, #0]
     f56:	4913      	ldr	r1, [pc, #76]	; (fa4 <ASerialLdd1_OnBlockReceived+0x74>)
     f58:	5488      	strb	r0, [r1, r2]
     f5a:	3301      	adds	r3, #1
     f5c:	b29a      	uxth	r2, r3
     f5e:	4b0f      	ldr	r3, [pc, #60]	; (f9c <ASerialLdd1_OnBlockReceived+0x6c>)
     f60:	801a      	strh	r2, [r3, #0]
    if (InpIndexW >= Inhr2_INP_BUF_SIZE) { /* Is the index out of the receive buffer? */
     f62:	4b0e      	ldr	r3, [pc, #56]	; (f9c <ASerialLdd1_OnBlockReceived+0x6c>)
     f64:	881b      	ldrh	r3, [r3, #0]
     f66:	2b0f      	cmp	r3, #15
     f68:	d90a      	bls.n	f80 <ASerialLdd1_OnBlockReceived+0x50>
      InpIndexW = 0x00U;               /* Set index on the first item into the receive buffer */
     f6a:	4b0c      	ldr	r3, [pc, #48]	; (f9c <ASerialLdd1_OnBlockReceived+0x6c>)
     f6c:	2200      	movs	r2, #0
     f6e:	801a      	strh	r2, [r3, #0]
     f70:	e006      	b.n	f80 <ASerialLdd1_OnBlockReceived+0x50>
    }
  } else {
    SerFlag |= FULL_RX;                /* Set flag "full RX buffer" */
     f72:	4b0d      	ldr	r3, [pc, #52]	; (fa8 <ASerialLdd1_OnBlockReceived+0x78>)
     f74:	881b      	ldrh	r3, [r3, #0]
     f76:	2240      	movs	r2, #64	; 0x40
     f78:	4313      	orrs	r3, r2
     f7a:	b29a      	uxth	r2, r3
     f7c:	4b0a      	ldr	r3, [pc, #40]	; (fa8 <ASerialLdd1_OnBlockReceived+0x78>)
     f7e:	801a      	strh	r2, [r3, #0]
  }
  (void)ASerialLdd1_ReceiveBlock(ASerialLdd1_DeviceDataPtr, &BufferRead, 1U); /* Receive one data byte */
     f80:	4b0a      	ldr	r3, [pc, #40]	; (fac <ASerialLdd1_OnBlockReceived+0x7c>)
     f82:	681a      	ldr	r2, [r3, #0]
     f84:	4b06      	ldr	r3, [pc, #24]	; (fa0 <ASerialLdd1_OnBlockReceived+0x70>)
     f86:	1c10      	adds	r0, r2, #0
     f88:	1c19      	adds	r1, r3, #0
     f8a:	2201      	movs	r2, #1
     f8c:	f001 faec 	bl	2568 <ASerialLdd1_ReceiveBlock>
}
     f90:	46bd      	mov	sp, r7
     f92:	b002      	add	sp, #8
     f94:	bd80      	pop	{r7, pc}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	1ffff08a 	.word	0x1ffff08a
     f9c:	1ffff08e 	.word	0x1ffff08e
     fa0:	1ffff0a0 	.word	0x1ffff0a0
     fa4:	1ffff090 	.word	0x1ffff090
     fa8:	1ffff088 	.word	0x1ffff088
     fac:	1ffff1e0 	.word	0x1ffff1e0

00000fb0 <ASerialLdd1_OnBlockSent>:
**         buffer is moved to the transmitter.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd1_OnBlockSent(LDD_TUserData *UserDataPtr)
{
     fb0:	b580      	push	{r7, lr}
     fb2:	b082      	sub	sp, #8
     fb4:	af00      	add	r7, sp, #0
     fb6:	6078      	str	r0, [r7, #4]
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  OutIndexR++;
     fb8:	4b1a      	ldr	r3, [pc, #104]	; (1024 <ASerialLdd1_OnBlockSent+0x74>)
     fba:	881b      	ldrh	r3, [r3, #0]
     fbc:	3301      	adds	r3, #1
     fbe:	b29a      	uxth	r2, r3
     fc0:	4b18      	ldr	r3, [pc, #96]	; (1024 <ASerialLdd1_OnBlockSent+0x74>)
     fc2:	801a      	strh	r2, [r3, #0]
  if (OutIndexR >= Inhr2_OUT_BUF_SIZE) { /* Is the index out of the transmit buffer? */
     fc4:	4b17      	ldr	r3, [pc, #92]	; (1024 <ASerialLdd1_OnBlockSent+0x74>)
     fc6:	881b      	ldrh	r3, [r3, #0]
     fc8:	2b3f      	cmp	r3, #63	; 0x3f
     fca:	d902      	bls.n	fd2 <ASerialLdd1_OnBlockSent+0x22>
    OutIndexR = 0x00U;                 /* Set index on the first item into the transmit buffer */
     fcc:	4b15      	ldr	r3, [pc, #84]	; (1024 <ASerialLdd1_OnBlockSent+0x74>)
     fce:	2200      	movs	r2, #0
     fd0:	801a      	strh	r2, [r3, #0]
  }
  Inhr2_OutLen--;                      /* Decrease number of chars in the transmit buffer */
     fd2:	4b15      	ldr	r3, [pc, #84]	; (1028 <ASerialLdd1_OnBlockSent+0x78>)
     fd4:	881b      	ldrh	r3, [r3, #0]
     fd6:	3b01      	subs	r3, #1
     fd8:	b29a      	uxth	r2, r3
     fda:	4b13      	ldr	r3, [pc, #76]	; (1028 <ASerialLdd1_OnBlockSent+0x78>)
     fdc:	801a      	strh	r2, [r3, #0]
  if (Inhr2_OutLen != 0U) {            /* Is number of bytes in the transmit buffer greater then 0? */
     fde:	4b12      	ldr	r3, [pc, #72]	; (1028 <ASerialLdd1_OnBlockSent+0x78>)
     fe0:	881b      	ldrh	r3, [r3, #0]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d013      	beq.n	100e <ASerialLdd1_OnBlockSent+0x5e>
    SerFlag |= RUNINT_FROM_TX;         /* Set flag "running int from TX"? */
     fe6:	4b11      	ldr	r3, [pc, #68]	; (102c <ASerialLdd1_OnBlockSent+0x7c>)
     fe8:	881b      	ldrh	r3, [r3, #0]
     fea:	2220      	movs	r2, #32
     fec:	4313      	orrs	r3, r2
     fee:	b29a      	uxth	r2, r3
     ff0:	4b0e      	ldr	r3, [pc, #56]	; (102c <ASerialLdd1_OnBlockSent+0x7c>)
     ff2:	801a      	strh	r2, [r3, #0]
    (void)ASerialLdd1_SendBlock(ASerialLdd1_DeviceDataPtr, (LDD_TData *)&OutBuffer[OutIndexR], 1U); /* Send one data byte */
     ff4:	4b0e      	ldr	r3, [pc, #56]	; (1030 <ASerialLdd1_OnBlockSent+0x80>)
     ff6:	681a      	ldr	r2, [r3, #0]
     ff8:	4b0a      	ldr	r3, [pc, #40]	; (1024 <ASerialLdd1_OnBlockSent+0x74>)
     ffa:	881b      	ldrh	r3, [r3, #0]
     ffc:	1c19      	adds	r1, r3, #0
     ffe:	4b0d      	ldr	r3, [pc, #52]	; (1034 <ASerialLdd1_OnBlockSent+0x84>)
    1000:	18cb      	adds	r3, r1, r3
    1002:	1c10      	adds	r0, r2, #0
    1004:	1c19      	adds	r1, r3, #0
    1006:	2201      	movs	r2, #1
    1008:	f001 fafa 	bl	2600 <ASerialLdd1_SendBlock>
    100c:	e006      	b.n	101c <ASerialLdd1_OnBlockSent+0x6c>
  } else {
    SerFlag &= (byte)~(RUNINT_FROM_TX); /* Clear "running int from TX" and "full TX buff" flags */
    100e:	4b07      	ldr	r3, [pc, #28]	; (102c <ASerialLdd1_OnBlockSent+0x7c>)
    1010:	881a      	ldrh	r2, [r3, #0]
    1012:	23df      	movs	r3, #223	; 0xdf
    1014:	4013      	ands	r3, r2
    1016:	b29a      	uxth	r2, r3
    1018:	4b04      	ldr	r3, [pc, #16]	; (102c <ASerialLdd1_OnBlockSent+0x7c>)
    101a:	801a      	strh	r2, [r3, #0]
  }
}
    101c:	46bd      	mov	sp, r7
    101e:	b002      	add	sp, #8
    1020:	bd80      	pop	{r7, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	1ffff0a4 	.word	0x1ffff0a4
    1028:	1ffff0a2 	.word	0x1ffff0a2
    102c:	1ffff088 	.word	0x1ffff088
    1030:	1ffff1e0 	.word	0x1ffff1e0
    1034:	1ffff0a8 	.word	0x1ffff0a8

00001038 <ASerialLdd1_OnError>:
**         returned by a given method) occurs.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd1_OnError(LDD_TUserData *UserDataPtr)
{
    1038:	b580      	push	{r7, lr}
    103a:	b084      	sub	sp, #16
    103c:	af00      	add	r7, sp, #0
    103e:	6078      	str	r0, [r7, #4]
  LDD_SERIAL_TError SerialErrorMask;   /* Serial error mask variable */

  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  (void)ASerialLdd1_GetError(ASerialLdd1_DeviceDataPtr, &SerialErrorMask); /* Get error state */
    1040:	4b1f      	ldr	r3, [pc, #124]	; (10c0 <ASerialLdd1_OnError+0x88>)
    1042:	681a      	ldr	r2, [r3, #0]
    1044:	1c3b      	adds	r3, r7, #0
    1046:	330c      	adds	r3, #12
    1048:	1c10      	adds	r0, r2, #0
    104a:	1c19      	adds	r1, r3, #0
    104c:	f001 fc20 	bl	2890 <ASerialLdd1_GetError>
  if (SerialErrorMask != 0U) {
    1050:	68fb      	ldr	r3, [r7, #12]
    1052:	2b00      	cmp	r3, #0
    1054:	d031      	beq.n	10ba <ASerialLdd1_OnError+0x82>
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_PARITY_ERROR) != 0U ) ? PARITY_ERR : 0U);
    1056:	68fa      	ldr	r2, [r7, #12]
    1058:	2302      	movs	r3, #2
    105a:	4013      	ands	r3, r2
    105c:	d001      	beq.n	1062 <ASerialLdd1_OnError+0x2a>
    105e:	2304      	movs	r3, #4
    1060:	e000      	b.n	1064 <ASerialLdd1_OnError+0x2c>
    1062:	2300      	movs	r3, #0
    1064:	4a17      	ldr	r2, [pc, #92]	; (10c4 <ASerialLdd1_OnError+0x8c>)
    1066:	8812      	ldrh	r2, [r2, #0]
    1068:	4313      	orrs	r3, r2
    106a:	b29a      	uxth	r2, r3
    106c:	4b15      	ldr	r3, [pc, #84]	; (10c4 <ASerialLdd1_OnError+0x8c>)
    106e:	801a      	strh	r2, [r3, #0]
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_NOISE_ERROR) != 0U ) ? NOISE_ERR : 0U);
    1070:	68fa      	ldr	r2, [r7, #12]
    1072:	2308      	movs	r3, #8
    1074:	4013      	ands	r3, r2
    1076:	d001      	beq.n	107c <ASerialLdd1_OnError+0x44>
    1078:	2380      	movs	r3, #128	; 0x80
    107a:	e000      	b.n	107e <ASerialLdd1_OnError+0x46>
    107c:	2300      	movs	r3, #0
    107e:	4a11      	ldr	r2, [pc, #68]	; (10c4 <ASerialLdd1_OnError+0x8c>)
    1080:	8812      	ldrh	r2, [r2, #0]
    1082:	4313      	orrs	r3, r2
    1084:	b29a      	uxth	r2, r3
    1086:	4b0f      	ldr	r3, [pc, #60]	; (10c4 <ASerialLdd1_OnError+0x8c>)
    1088:	801a      	strh	r2, [r3, #0]
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_RX_OVERRUN) != 0U ) ? OVERRUN_ERR : 0U);
    108a:	68fb      	ldr	r3, [r7, #12]
    108c:	b29a      	uxth	r2, r3
    108e:	2301      	movs	r3, #1
    1090:	4013      	ands	r3, r2
    1092:	b29a      	uxth	r2, r3
    1094:	4b0b      	ldr	r3, [pc, #44]	; (10c4 <ASerialLdd1_OnError+0x8c>)
    1096:	881b      	ldrh	r3, [r3, #0]
    1098:	4313      	orrs	r3, r2
    109a:	b29a      	uxth	r2, r3
    109c:	4b09      	ldr	r3, [pc, #36]	; (10c4 <ASerialLdd1_OnError+0x8c>)
    109e:	801a      	strh	r2, [r3, #0]
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_FRAMING_ERROR) != 0U ) ? FRAMING_ERR : 0U);
    10a0:	68fa      	ldr	r2, [r7, #12]
    10a2:	2304      	movs	r3, #4
    10a4:	4013      	ands	r3, r2
    10a6:	d001      	beq.n	10ac <ASerialLdd1_OnError+0x74>
    10a8:	2302      	movs	r3, #2
    10aa:	e000      	b.n	10ae <ASerialLdd1_OnError+0x76>
    10ac:	2300      	movs	r3, #0
    10ae:	4a05      	ldr	r2, [pc, #20]	; (10c4 <ASerialLdd1_OnError+0x8c>)
    10b0:	8812      	ldrh	r2, [r2, #0]
    10b2:	4313      	orrs	r3, r2
    10b4:	b29a      	uxth	r2, r3
    10b6:	4b03      	ldr	r3, [pc, #12]	; (10c4 <ASerialLdd1_OnError+0x8c>)
    10b8:	801a      	strh	r2, [r3, #0]
  }
}
    10ba:	46bd      	mov	sp, r7
    10bc:	b004      	add	sp, #16
    10be:	bd80      	pop	{r7, pc}
    10c0:	1ffff1e0 	.word	0x1ffff1e0
    10c4:	1ffff088 	.word	0x1ffff088

000010c8 <ASerialLdd1_OnBreak>:
**         This event is called when a break occurs on the input channel.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd1_OnBreak(LDD_TUserData *UserDataPtr)
{
    10c8:	b580      	push	{r7, lr}
    10ca:	b082      	sub	sp, #8
    10cc:	af00      	add	r7, sp, #0
    10ce:	6078      	str	r0, [r7, #4]
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  SerFlag |= FRAMING_ERR;              /* Set framing error flag */
    10d0:	4b04      	ldr	r3, [pc, #16]	; (10e4 <ASerialLdd1_OnBreak+0x1c>)
    10d2:	881b      	ldrh	r3, [r3, #0]
    10d4:	2202      	movs	r2, #2
    10d6:	4313      	orrs	r3, r2
    10d8:	b29a      	uxth	r2, r3
    10da:	4b02      	ldr	r3, [pc, #8]	; (10e4 <ASerialLdd1_OnBreak+0x1c>)
    10dc:	801a      	strh	r2, [r3, #0]
}
    10de:	46bd      	mov	sp, r7
    10e0:	b002      	add	sp, #8
    10e2:	bd80      	pop	{r7, pc}
    10e4:	1ffff088 	.word	0x1ffff088

000010e8 <HWEnDi>:
**         Disable methods and several internal methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void HWEnDi(void)
{
    10e8:	b580      	push	{r7, lr}
    10ea:	af00      	add	r7, sp, #0
  (void)ASerialLdd2_ReceiveBlock(ASerialLdd2_DeviceDataPtr, &BufferRead, 1U); /* Receive one data byte */
    10ec:	4b04      	ldr	r3, [pc, #16]	; (1100 <HWEnDi+0x18>)
    10ee:	681a      	ldr	r2, [r3, #0]
    10f0:	4b04      	ldr	r3, [pc, #16]	; (1104 <HWEnDi+0x1c>)
    10f2:	1c10      	adds	r0, r2, #0
    10f4:	1c19      	adds	r1, r3, #0
    10f6:	2201      	movs	r2, #1
    10f8:	f000 ffac 	bl	2054 <ASerialLdd2_ReceiveBlock>
}
    10fc:	46bd      	mov	sp, r7
    10fe:	bd80      	pop	{r7, pc}
    1100:	1ffff1e4 	.word	0x1ffff1e4
    1104:	1ffff100 	.word	0x1ffff100

00001108 <Inhr1_Init>:
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void Inhr1_Init(void)
{
    1108:	b580      	push	{r7, lr}
    110a:	af00      	add	r7, sp, #0
  SerFlag = 0x00U;                     /* Reset flags */
    110c:	4b0f      	ldr	r3, [pc, #60]	; (114c <Inhr1_Init+0x44>)
    110e:	2200      	movs	r2, #0
    1110:	801a      	strh	r2, [r3, #0]
  Inhr1_InpLen = 0x00U;                /* No char in the receive buffer */
    1112:	4b0f      	ldr	r3, [pc, #60]	; (1150 <Inhr1_Init+0x48>)
    1114:	2200      	movs	r2, #0
    1116:	801a      	strh	r2, [r3, #0]
  InpIndexR = 0x00U;                   /* Set index on the first item in the receive buffer */
    1118:	4b0e      	ldr	r3, [pc, #56]	; (1154 <Inhr1_Init+0x4c>)
    111a:	2200      	movs	r2, #0
    111c:	801a      	strh	r2, [r3, #0]
  InpIndexW = 0x00U;
    111e:	4b0e      	ldr	r3, [pc, #56]	; (1158 <Inhr1_Init+0x50>)
    1120:	2200      	movs	r2, #0
    1122:	801a      	strh	r2, [r3, #0]
  Inhr1_OutLen = 0x00U;                /* No char in the transmit buffer */
    1124:	4b0d      	ldr	r3, [pc, #52]	; (115c <Inhr1_Init+0x54>)
    1126:	2200      	movs	r2, #0
    1128:	801a      	strh	r2, [r3, #0]
  OutIndexR = 0x00U;                   /* Set index on the first item in the transmit buffer */
    112a:	4b0d      	ldr	r3, [pc, #52]	; (1160 <Inhr1_Init+0x58>)
    112c:	2200      	movs	r2, #0
    112e:	801a      	strh	r2, [r3, #0]
  OutIndexW = 0x00U;
    1130:	4b0c      	ldr	r3, [pc, #48]	; (1164 <Inhr1_Init+0x5c>)
    1132:	2200      	movs	r2, #0
    1134:	801a      	strh	r2, [r3, #0]
  ASerialLdd2_DeviceDataPtr = ASerialLdd2_Init(NULL); /* Calling init method of the inherited component */
    1136:	2000      	movs	r0, #0
    1138:	f000 feae 	bl	1e98 <ASerialLdd2_Init>
    113c:	1c02      	adds	r2, r0, #0
    113e:	4b0a      	ldr	r3, [pc, #40]	; (1168 <Inhr1_Init+0x60>)
    1140:	601a      	str	r2, [r3, #0]
  HWEnDi();                            /* Enable/disable device according to status flags */
    1142:	f7ff ffd1 	bl	10e8 <HWEnDi>
}
    1146:	46bd      	mov	sp, r7
    1148:	bd80      	pop	{r7, pc}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	1ffff0e8 	.word	0x1ffff0e8
    1150:	1ffff0ea 	.word	0x1ffff0ea
    1154:	1ffff0ec 	.word	0x1ffff0ec
    1158:	1ffff0ee 	.word	0x1ffff0ee
    115c:	1ffff102 	.word	0x1ffff102
    1160:	1ffff104 	.word	0x1ffff104
    1164:	1ffff106 	.word	0x1ffff106
    1168:	1ffff1e4 	.word	0x1ffff1e4

0000116c <ASerialLdd2_OnBlockReceived>:
**         moved to the input buffer.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd2_OnBlockReceived(LDD_TUserData *UserDataPtr)
{
    116c:	b580      	push	{r7, lr}
    116e:	b082      	sub	sp, #8
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]

  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  if (Inhr1_InpLen < Inhr1_INP_BUF_SIZE) { /* Is number of bytes in the receive buffer lower than size of buffer? */
    1174:	4b17      	ldr	r3, [pc, #92]	; (11d4 <ASerialLdd2_OnBlockReceived+0x68>)
    1176:	881b      	ldrh	r3, [r3, #0]
    1178:	2b0f      	cmp	r3, #15
    117a:	d818      	bhi.n	11ae <ASerialLdd2_OnBlockReceived+0x42>
    Inhr1_InpLen++;                    /* Increase number of chars in the receive buffer */
    117c:	4b15      	ldr	r3, [pc, #84]	; (11d4 <ASerialLdd2_OnBlockReceived+0x68>)
    117e:	881b      	ldrh	r3, [r3, #0]
    1180:	3301      	adds	r3, #1
    1182:	b29a      	uxth	r2, r3
    1184:	4b13      	ldr	r3, [pc, #76]	; (11d4 <ASerialLdd2_OnBlockReceived+0x68>)
    1186:	801a      	strh	r2, [r3, #0]
    InpBuffer[InpIndexW++] = (Inhr1_TComData)BufferRead; /* Save received char to the receive buffer */
    1188:	4b13      	ldr	r3, [pc, #76]	; (11d8 <ASerialLdd2_OnBlockReceived+0x6c>)
    118a:	881b      	ldrh	r3, [r3, #0]
    118c:	1c1a      	adds	r2, r3, #0
    118e:	4913      	ldr	r1, [pc, #76]	; (11dc <ASerialLdd2_OnBlockReceived+0x70>)
    1190:	7808      	ldrb	r0, [r1, #0]
    1192:	4913      	ldr	r1, [pc, #76]	; (11e0 <ASerialLdd2_OnBlockReceived+0x74>)
    1194:	5488      	strb	r0, [r1, r2]
    1196:	3301      	adds	r3, #1
    1198:	b29a      	uxth	r2, r3
    119a:	4b0f      	ldr	r3, [pc, #60]	; (11d8 <ASerialLdd2_OnBlockReceived+0x6c>)
    119c:	801a      	strh	r2, [r3, #0]
    if (InpIndexW >= Inhr1_INP_BUF_SIZE) { /* Is the index out of the receive buffer? */
    119e:	4b0e      	ldr	r3, [pc, #56]	; (11d8 <ASerialLdd2_OnBlockReceived+0x6c>)
    11a0:	881b      	ldrh	r3, [r3, #0]
    11a2:	2b0f      	cmp	r3, #15
    11a4:	d90a      	bls.n	11bc <ASerialLdd2_OnBlockReceived+0x50>
      InpIndexW = 0x00U;               /* Set index on the first item into the receive buffer */
    11a6:	4b0c      	ldr	r3, [pc, #48]	; (11d8 <ASerialLdd2_OnBlockReceived+0x6c>)
    11a8:	2200      	movs	r2, #0
    11aa:	801a      	strh	r2, [r3, #0]
    11ac:	e006      	b.n	11bc <ASerialLdd2_OnBlockReceived+0x50>
    }
  } else {
    SerFlag |= FULL_RX;                /* Set flag "full RX buffer" */
    11ae:	4b0d      	ldr	r3, [pc, #52]	; (11e4 <ASerialLdd2_OnBlockReceived+0x78>)
    11b0:	881b      	ldrh	r3, [r3, #0]
    11b2:	2240      	movs	r2, #64	; 0x40
    11b4:	4313      	orrs	r3, r2
    11b6:	b29a      	uxth	r2, r3
    11b8:	4b0a      	ldr	r3, [pc, #40]	; (11e4 <ASerialLdd2_OnBlockReceived+0x78>)
    11ba:	801a      	strh	r2, [r3, #0]
  }
  (void)ASerialLdd2_ReceiveBlock(ASerialLdd2_DeviceDataPtr, &BufferRead, 1U); /* Receive one data byte */
    11bc:	4b0a      	ldr	r3, [pc, #40]	; (11e8 <ASerialLdd2_OnBlockReceived+0x7c>)
    11be:	681a      	ldr	r2, [r3, #0]
    11c0:	4b06      	ldr	r3, [pc, #24]	; (11dc <ASerialLdd2_OnBlockReceived+0x70>)
    11c2:	1c10      	adds	r0, r2, #0
    11c4:	1c19      	adds	r1, r3, #0
    11c6:	2201      	movs	r2, #1
    11c8:	f000 ff44 	bl	2054 <ASerialLdd2_ReceiveBlock>
}
    11cc:	46bd      	mov	sp, r7
    11ce:	b002      	add	sp, #8
    11d0:	bd80      	pop	{r7, pc}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	1ffff0ea 	.word	0x1ffff0ea
    11d8:	1ffff0ee 	.word	0x1ffff0ee
    11dc:	1ffff100 	.word	0x1ffff100
    11e0:	1ffff0f0 	.word	0x1ffff0f0
    11e4:	1ffff0e8 	.word	0x1ffff0e8
    11e8:	1ffff1e4 	.word	0x1ffff1e4

000011ec <ASerialLdd2_OnBlockSent>:
**         buffer is moved to the transmitter.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd2_OnBlockSent(LDD_TUserData *UserDataPtr)
{
    11ec:	b580      	push	{r7, lr}
    11ee:	b082      	sub	sp, #8
    11f0:	af00      	add	r7, sp, #0
    11f2:	6078      	str	r0, [r7, #4]
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  OutIndexR++;
    11f4:	4b1a      	ldr	r3, [pc, #104]	; (1260 <ASerialLdd2_OnBlockSent+0x74>)
    11f6:	881b      	ldrh	r3, [r3, #0]
    11f8:	3301      	adds	r3, #1
    11fa:	b29a      	uxth	r2, r3
    11fc:	4b18      	ldr	r3, [pc, #96]	; (1260 <ASerialLdd2_OnBlockSent+0x74>)
    11fe:	801a      	strh	r2, [r3, #0]
  if (OutIndexR >= Inhr1_OUT_BUF_SIZE) { /* Is the index out of the transmit buffer? */
    1200:	4b17      	ldr	r3, [pc, #92]	; (1260 <ASerialLdd2_OnBlockSent+0x74>)
    1202:	881b      	ldrh	r3, [r3, #0]
    1204:	2b3f      	cmp	r3, #63	; 0x3f
    1206:	d902      	bls.n	120e <ASerialLdd2_OnBlockSent+0x22>
    OutIndexR = 0x00U;                 /* Set index on the first item into the transmit buffer */
    1208:	4b15      	ldr	r3, [pc, #84]	; (1260 <ASerialLdd2_OnBlockSent+0x74>)
    120a:	2200      	movs	r2, #0
    120c:	801a      	strh	r2, [r3, #0]
  }
  Inhr1_OutLen--;                      /* Decrease number of chars in the transmit buffer */
    120e:	4b15      	ldr	r3, [pc, #84]	; (1264 <ASerialLdd2_OnBlockSent+0x78>)
    1210:	881b      	ldrh	r3, [r3, #0]
    1212:	3b01      	subs	r3, #1
    1214:	b29a      	uxth	r2, r3
    1216:	4b13      	ldr	r3, [pc, #76]	; (1264 <ASerialLdd2_OnBlockSent+0x78>)
    1218:	801a      	strh	r2, [r3, #0]
  if (Inhr1_OutLen != 0U) {            /* Is number of bytes in the transmit buffer greater then 0? */
    121a:	4b12      	ldr	r3, [pc, #72]	; (1264 <ASerialLdd2_OnBlockSent+0x78>)
    121c:	881b      	ldrh	r3, [r3, #0]
    121e:	2b00      	cmp	r3, #0
    1220:	d013      	beq.n	124a <ASerialLdd2_OnBlockSent+0x5e>
    SerFlag |= RUNINT_FROM_TX;         /* Set flag "running int from TX"? */
    1222:	4b11      	ldr	r3, [pc, #68]	; (1268 <ASerialLdd2_OnBlockSent+0x7c>)
    1224:	881b      	ldrh	r3, [r3, #0]
    1226:	2220      	movs	r2, #32
    1228:	4313      	orrs	r3, r2
    122a:	b29a      	uxth	r2, r3
    122c:	4b0e      	ldr	r3, [pc, #56]	; (1268 <ASerialLdd2_OnBlockSent+0x7c>)
    122e:	801a      	strh	r2, [r3, #0]
    (void)ASerialLdd2_SendBlock(ASerialLdd2_DeviceDataPtr, (LDD_TData *)&OutBuffer[OutIndexR], 1U); /* Send one data byte */
    1230:	4b0e      	ldr	r3, [pc, #56]	; (126c <ASerialLdd2_OnBlockSent+0x80>)
    1232:	681a      	ldr	r2, [r3, #0]
    1234:	4b0a      	ldr	r3, [pc, #40]	; (1260 <ASerialLdd2_OnBlockSent+0x74>)
    1236:	881b      	ldrh	r3, [r3, #0]
    1238:	1c19      	adds	r1, r3, #0
    123a:	4b0d      	ldr	r3, [pc, #52]	; (1270 <ASerialLdd2_OnBlockSent+0x84>)
    123c:	18cb      	adds	r3, r1, r3
    123e:	1c10      	adds	r0, r2, #0
    1240:	1c19      	adds	r1, r3, #0
    1242:	2201      	movs	r2, #1
    1244:	f000 ff52 	bl	20ec <ASerialLdd2_SendBlock>
    1248:	e006      	b.n	1258 <ASerialLdd2_OnBlockSent+0x6c>
  } else {
    SerFlag &= (byte)~(RUNINT_FROM_TX); /* Clear "running int from TX" and "full TX buff" flags */
    124a:	4b07      	ldr	r3, [pc, #28]	; (1268 <ASerialLdd2_OnBlockSent+0x7c>)
    124c:	881a      	ldrh	r2, [r3, #0]
    124e:	23df      	movs	r3, #223	; 0xdf
    1250:	4013      	ands	r3, r2
    1252:	b29a      	uxth	r2, r3
    1254:	4b04      	ldr	r3, [pc, #16]	; (1268 <ASerialLdd2_OnBlockSent+0x7c>)
    1256:	801a      	strh	r2, [r3, #0]
  }
}
    1258:	46bd      	mov	sp, r7
    125a:	b002      	add	sp, #8
    125c:	bd80      	pop	{r7, pc}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	1ffff104 	.word	0x1ffff104
    1264:	1ffff102 	.word	0x1ffff102
    1268:	1ffff0e8 	.word	0x1ffff0e8
    126c:	1ffff1e4 	.word	0x1ffff1e4
    1270:	1ffff108 	.word	0x1ffff108

00001274 <ASerialLdd2_OnError>:
**         returned by a given method) occurs.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd2_OnError(LDD_TUserData *UserDataPtr)
{
    1274:	b580      	push	{r7, lr}
    1276:	b084      	sub	sp, #16
    1278:	af00      	add	r7, sp, #0
    127a:	6078      	str	r0, [r7, #4]
  LDD_SERIAL_TError SerialErrorMask;   /* Serial error mask variable */

  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  (void)ASerialLdd2_GetError(ASerialLdd2_DeviceDataPtr, &SerialErrorMask); /* Get error state */
    127c:	4b1f      	ldr	r3, [pc, #124]	; (12fc <ASerialLdd2_OnError+0x88>)
    127e:	681a      	ldr	r2, [r3, #0]
    1280:	1c3b      	adds	r3, r7, #0
    1282:	330c      	adds	r3, #12
    1284:	1c10      	adds	r0, r2, #0
    1286:	1c19      	adds	r1, r3, #0
    1288:	f001 f87c 	bl	2384 <ASerialLdd2_GetError>
  if (SerialErrorMask != 0U) {
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	2b00      	cmp	r3, #0
    1290:	d031      	beq.n	12f6 <ASerialLdd2_OnError+0x82>
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_PARITY_ERROR) != 0U ) ? PARITY_ERR : 0U);
    1292:	68fa      	ldr	r2, [r7, #12]
    1294:	2302      	movs	r3, #2
    1296:	4013      	ands	r3, r2
    1298:	d001      	beq.n	129e <ASerialLdd2_OnError+0x2a>
    129a:	2304      	movs	r3, #4
    129c:	e000      	b.n	12a0 <ASerialLdd2_OnError+0x2c>
    129e:	2300      	movs	r3, #0
    12a0:	4a17      	ldr	r2, [pc, #92]	; (1300 <ASerialLdd2_OnError+0x8c>)
    12a2:	8812      	ldrh	r2, [r2, #0]
    12a4:	4313      	orrs	r3, r2
    12a6:	b29a      	uxth	r2, r3
    12a8:	4b15      	ldr	r3, [pc, #84]	; (1300 <ASerialLdd2_OnError+0x8c>)
    12aa:	801a      	strh	r2, [r3, #0]
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_NOISE_ERROR) != 0U ) ? NOISE_ERR : 0U);
    12ac:	68fa      	ldr	r2, [r7, #12]
    12ae:	2308      	movs	r3, #8
    12b0:	4013      	ands	r3, r2
    12b2:	d001      	beq.n	12b8 <ASerialLdd2_OnError+0x44>
    12b4:	2380      	movs	r3, #128	; 0x80
    12b6:	e000      	b.n	12ba <ASerialLdd2_OnError+0x46>
    12b8:	2300      	movs	r3, #0
    12ba:	4a11      	ldr	r2, [pc, #68]	; (1300 <ASerialLdd2_OnError+0x8c>)
    12bc:	8812      	ldrh	r2, [r2, #0]
    12be:	4313      	orrs	r3, r2
    12c0:	b29a      	uxth	r2, r3
    12c2:	4b0f      	ldr	r3, [pc, #60]	; (1300 <ASerialLdd2_OnError+0x8c>)
    12c4:	801a      	strh	r2, [r3, #0]
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_RX_OVERRUN) != 0U ) ? OVERRUN_ERR : 0U);
    12c6:	68fb      	ldr	r3, [r7, #12]
    12c8:	b29a      	uxth	r2, r3
    12ca:	2301      	movs	r3, #1
    12cc:	4013      	ands	r3, r2
    12ce:	b29a      	uxth	r2, r3
    12d0:	4b0b      	ldr	r3, [pc, #44]	; (1300 <ASerialLdd2_OnError+0x8c>)
    12d2:	881b      	ldrh	r3, [r3, #0]
    12d4:	4313      	orrs	r3, r2
    12d6:	b29a      	uxth	r2, r3
    12d8:	4b09      	ldr	r3, [pc, #36]	; (1300 <ASerialLdd2_OnError+0x8c>)
    12da:	801a      	strh	r2, [r3, #0]
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_FRAMING_ERROR) != 0U ) ? FRAMING_ERR : 0U);
    12dc:	68fa      	ldr	r2, [r7, #12]
    12de:	2304      	movs	r3, #4
    12e0:	4013      	ands	r3, r2
    12e2:	d001      	beq.n	12e8 <ASerialLdd2_OnError+0x74>
    12e4:	2302      	movs	r3, #2
    12e6:	e000      	b.n	12ea <ASerialLdd2_OnError+0x76>
    12e8:	2300      	movs	r3, #0
    12ea:	4a05      	ldr	r2, [pc, #20]	; (1300 <ASerialLdd2_OnError+0x8c>)
    12ec:	8812      	ldrh	r2, [r2, #0]
    12ee:	4313      	orrs	r3, r2
    12f0:	b29a      	uxth	r2, r3
    12f2:	4b03      	ldr	r3, [pc, #12]	; (1300 <ASerialLdd2_OnError+0x8c>)
    12f4:	801a      	strh	r2, [r3, #0]
  }
}
    12f6:	46bd      	mov	sp, r7
    12f8:	b004      	add	sp, #16
    12fa:	bd80      	pop	{r7, pc}
    12fc:	1ffff1e4 	.word	0x1ffff1e4
    1300:	1ffff0e8 	.word	0x1ffff0e8

00001304 <ASerialLdd2_OnBreak>:
**         This event is called when a break occurs on the input channel.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd2_OnBreak(LDD_TUserData *UserDataPtr)
{
    1304:	b580      	push	{r7, lr}
    1306:	b082      	sub	sp, #8
    1308:	af00      	add	r7, sp, #0
    130a:	6078      	str	r0, [r7, #4]
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  SerFlag |= FRAMING_ERR;              /* Set framing error flag */
    130c:	4b04      	ldr	r3, [pc, #16]	; (1320 <ASerialLdd2_OnBreak+0x1c>)
    130e:	881b      	ldrh	r3, [r3, #0]
    1310:	2202      	movs	r2, #2
    1312:	4313      	orrs	r3, r2
    1314:	b29a      	uxth	r2, r3
    1316:	4b02      	ldr	r3, [pc, #8]	; (1320 <ASerialLdd2_OnBreak+0x1c>)
    1318:	801a      	strh	r2, [r3, #0]
}
    131a:	46bd      	mov	sp, r7
    131c:	b002      	add	sp, #8
    131e:	bd80      	pop	{r7, pc}
    1320:	1ffff0e8 	.word	0x1ffff0e8

00001324 <Cpu_INT_NMIInterrupt>:
**         This ISR services the Non Maskable Interrupt interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Cpu_INT_NMIInterrupt)
{
    1324:	b580      	push	{r7, lr}
    1326:	af00      	add	r7, sp, #0
  Cpu_OnNMIINT();
    1328:	f001 fe60 	bl	2fec <Cpu_OnNMIINT>
}
    132c:	46bd      	mov	sp, r7
    132e:	bd80      	pop	{r7, pc}

00001330 <Cpu_Interrupt>:
**         This ISR services an unused interrupt/exception vector.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Cpu_Interrupt)
{
    1330:	b580      	push	{r7, lr}
    1332:	af00      	add	r7, sp, #0
  /* This code can be changed using the CPU component property "Build Options / Unhandled int code" */
  PE_DEBUGHALT();
    1334:	beff      	bkpt	0x00ff
}
    1336:	46bd      	mov	sp, r7
    1338:	bd80      	pop	{r7, pc}
    133a:	46c0      	nop			; (mov r8, r8)

0000133c <__init_hardware>:
/*** !!! Here you can place your own code using property "User data declarations" on the build options tab. !!! ***/

/*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware). The function is linked to the EWL library */
/*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
void __init_hardware(void)
{
    133c:	b580      	push	{r7, lr}
    133e:	af00      	add	r7, sp, #0

  /*** !!! Here you can place your own code before PE initialization using property "User code before PE initialization" on the build options tab. !!! ***/

  /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
  /*** PE initialization code after reset ***/
  SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
    1340:	4a3a      	ldr	r2, [pc, #232]	; (142c <__init_hardware+0xf0>)
    1342:	493b      	ldr	r1, [pc, #236]	; (1430 <__init_hardware+0xf4>)
    1344:	4b3b      	ldr	r3, [pc, #236]	; (1434 <__init_hardware+0xf8>)
    1346:	50d1      	str	r1, [r2, r3]
  /* Disable the WDOG module */
  /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COPT=0,COPCLKS=0,COPW=0 */
  SIM_COPC = SIM_COPC_COPT(0x00);
    1348:	4a3b      	ldr	r2, [pc, #236]	; (1438 <__init_hardware+0xfc>)
    134a:	2388      	movs	r3, #136	; 0x88
    134c:	015b      	lsls	r3, r3, #5
    134e:	2100      	movs	r1, #0
    1350:	50d1      	str	r1, [r2, r3]

  /* System clock initialization */
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
    1352:	4a39      	ldr	r2, [pc, #228]	; (1438 <__init_hardware+0xfc>)
    1354:	4b39      	ldr	r3, [pc, #228]	; (143c <__init_hardware+0x100>)
    1356:	21c0      	movs	r1, #192	; 0xc0
    1358:	0289      	lsls	r1, r1, #10
    135a:	50d1      	str	r1, [r2, r3]
  /* SIM_SCGC5: PORTD=1,PORTC=1,PORTB=1,PORTA=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK |
    135c:	4a36      	ldr	r2, [pc, #216]	; (1438 <__init_hardware+0xfc>)
    135e:	4936      	ldr	r1, [pc, #216]	; (1438 <__init_hardware+0xfc>)
    1360:	4b37      	ldr	r3, [pc, #220]	; (1440 <__init_hardware+0x104>)
    1362:	58cb      	ldr	r3, [r1, r3]
    1364:	21f0      	movs	r1, #240	; 0xf0
    1366:	0149      	lsls	r1, r1, #5
    1368:	4319      	orrs	r1, r3
    136a:	4b35      	ldr	r3, [pc, #212]	; (1440 <__init_hardware+0x104>)
    136c:	50d1      	str	r1, [r2, r3]
               SIM_SCGC5_PORTC_MASK |
               SIM_SCGC5_PORTB_MASK |
               SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
    136e:	4a32      	ldr	r2, [pc, #200]	; (1438 <__init_hardware+0xfc>)
    1370:	4931      	ldr	r1, [pc, #196]	; (1438 <__init_hardware+0xfc>)
    1372:	4b33      	ldr	r3, [pc, #204]	; (1440 <__init_hardware+0x104>)
    1374:	58cb      	ldr	r3, [r1, r3]
    1376:	2101      	movs	r1, #1
    1378:	4319      	orrs	r1, r3
    137a:	4b31      	ldr	r3, [pc, #196]	; (1440 <__init_hardware+0x104>)
    137c:	50d1      	str	r1, [r2, r3]
  if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
    137e:	4b31      	ldr	r3, [pc, #196]	; (1444 <__init_hardware+0x108>)
    1380:	789b      	ldrb	r3, [r3, #2]
    1382:	b2db      	uxtb	r3, r3
    1384:	1c1a      	adds	r2, r3, #0
    1386:	2308      	movs	r3, #8
    1388:	4013      	ands	r3, r2
    138a:	d007      	beq.n	139c <__init_hardware+0x60>
    /* PMC_REGSC: ACKISO=1 */
    PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
    138c:	4b2d      	ldr	r3, [pc, #180]	; (1444 <__init_hardware+0x108>)
    138e:	4a2d      	ldr	r2, [pc, #180]	; (1444 <__init_hardware+0x108>)
    1390:	7892      	ldrb	r2, [r2, #2]
    1392:	b2d2      	uxtb	r2, r2
    1394:	2108      	movs	r1, #8
    1396:	430a      	orrs	r2, r1
    1398:	b2d2      	uxtb	r2, r2
    139a:	709a      	strb	r2, [r3, #2]
  }
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x00)); /* Update system prescalers */
    139c:	4a26      	ldr	r2, [pc, #152]	; (1438 <__init_hardware+0xfc>)
    139e:	4b27      	ldr	r3, [pc, #156]	; (143c <__init_hardware+0x100>)
    13a0:	2100      	movs	r1, #0
    13a2:	50d1      	str	r1, [r2, r3]
  /* SIM_SOPT2: PLLFLLSEL=0 */
  SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_PLLFLLSEL_MASK); /* Select FLL as a clock source for various peripherals */
    13a4:	4a24      	ldr	r2, [pc, #144]	; (1438 <__init_hardware+0xfc>)
    13a6:	4924      	ldr	r1, [pc, #144]	; (1438 <__init_hardware+0xfc>)
    13a8:	4b27      	ldr	r3, [pc, #156]	; (1448 <__init_hardware+0x10c>)
    13aa:	58c9      	ldr	r1, [r1, r3]
    13ac:	4b27      	ldr	r3, [pc, #156]	; (144c <__init_hardware+0x110>)
    13ae:	4019      	ands	r1, r3
    13b0:	4b25      	ldr	r3, [pc, #148]	; (1448 <__init_hardware+0x10c>)
    13b2:	50d1      	str	r1, [r2, r3]
  /* SIM_SOPT1: OSC32KSEL=3 */
  SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various peripherals */
    13b4:	4b20      	ldr	r3, [pc, #128]	; (1438 <__init_hardware+0xfc>)
    13b6:	4a20      	ldr	r2, [pc, #128]	; (1438 <__init_hardware+0xfc>)
    13b8:	6812      	ldr	r2, [r2, #0]
    13ba:	21c0      	movs	r1, #192	; 0xc0
    13bc:	0309      	lsls	r1, r1, #12
    13be:	430a      	orrs	r2, r1
    13c0:	601a      	str	r2, [r3, #0]
  /* SIM_SOPT2: TPMSRC=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
    13c2:	4a1d      	ldr	r2, [pc, #116]	; (1438 <__init_hardware+0xfc>)
    13c4:	491c      	ldr	r1, [pc, #112]	; (1438 <__init_hardware+0xfc>)
    13c6:	4b20      	ldr	r3, [pc, #128]	; (1448 <__init_hardware+0x10c>)
    13c8:	58c9      	ldr	r1, [r1, r3]
    13ca:	4b21      	ldr	r3, [pc, #132]	; (1450 <__init_hardware+0x114>)
    13cc:	400b      	ands	r3, r1
    13ce:	2180      	movs	r1, #128	; 0x80
    13d0:	0449      	lsls	r1, r1, #17
    13d2:	4319      	orrs	r1, r3
    13d4:	4b1c      	ldr	r3, [pc, #112]	; (1448 <__init_hardware+0x10c>)
    13d6:	50d1      	str	r1, [r2, r3]
              )) | (uint32_t)(
               SIM_SOPT2_TPMSRC(0x01)
              ));                      /* Set the TPM clock */
  /* Switch to FEI Mode */
  /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
  MCG_C1 = MCG_C1_CLKS(0x00) |
    13d8:	4b1e      	ldr	r3, [pc, #120]	; (1454 <__init_hardware+0x118>)
    13da:	2206      	movs	r2, #6
    13dc:	701a      	strb	r2, [r3, #0]
           MCG_C1_FRDIV(0x00) |
           MCG_C1_IREFS_MASK |
           MCG_C1_IRCLKEN_MASK;
  /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
  MCG_C2 = MCG_C2_RANGE0(0x00);
    13de:	4b1d      	ldr	r3, [pc, #116]	; (1454 <__init_hardware+0x118>)
    13e0:	2200      	movs	r2, #0
    13e2:	705a      	strb	r2, [r3, #1]
  /* MCG_C4: DMX32=0,DRST_DRS=0 */
  MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
    13e4:	4b1b      	ldr	r3, [pc, #108]	; (1454 <__init_hardware+0x118>)
    13e6:	4a1b      	ldr	r2, [pc, #108]	; (1454 <__init_hardware+0x118>)
    13e8:	78d2      	ldrb	r2, [r2, #3]
    13ea:	b2d1      	uxtb	r1, r2
    13ec:	221f      	movs	r2, #31
    13ee:	400a      	ands	r2, r1
    13f0:	b2d2      	uxtb	r2, r2
    13f2:	70da      	strb	r2, [r3, #3]
  /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
  OSC0_CR = OSC_CR_ERCLKEN_MASK;
    13f4:	4b18      	ldr	r3, [pc, #96]	; (1458 <__init_hardware+0x11c>)
    13f6:	2280      	movs	r2, #128	; 0x80
    13f8:	701a      	strb	r2, [r3, #0]
  /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
  MCG_C5 = MCG_C5_PRDIV0(0x00);
    13fa:	4b16      	ldr	r3, [pc, #88]	; (1454 <__init_hardware+0x118>)
    13fc:	2200      	movs	r2, #0
    13fe:	711a      	strb	r2, [r3, #4]
  /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
  MCG_C6 = MCG_C6_VDIV0(0x00);
    1400:	4b14      	ldr	r3, [pc, #80]	; (1454 <__init_hardware+0x118>)
    1402:	2200      	movs	r2, #0
    1404:	715a      	strb	r2, [r3, #5]
  while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    1406:	46c0      	nop			; (mov r8, r8)
    1408:	4b12      	ldr	r3, [pc, #72]	; (1454 <__init_hardware+0x118>)
    140a:	799b      	ldrb	r3, [r3, #6]
    140c:	b2db      	uxtb	r3, r3
    140e:	1c1a      	adds	r2, r3, #0
    1410:	2310      	movs	r3, #16
    1412:	4013      	ands	r3, r2
    1414:	d0f8      	beq.n	1408 <__init_hardware+0xcc>
  }
  while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	4b0e      	ldr	r3, [pc, #56]	; (1454 <__init_hardware+0x118>)
    141a:	799b      	ldrb	r3, [r3, #6]
    141c:	b2db      	uxtb	r3, r3
    141e:	1c1a      	adds	r2, r3, #0
    1420:	230c      	movs	r3, #12
    1422:	4013      	ands	r3, r2
    1424:	d1f8      	bne.n	1418 <__init_hardware+0xdc>
  }
  /*** End of PE initialization code after reset ***/

  /*** !!! Here you can place your own code after PE initialization using property "User code after PE initialization" on the build options tab. !!! ***/

}
    1426:	46bd      	mov	sp, r7
    1428:	bd80      	pop	{r7, pc}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	e000e000 	.word	0xe000e000
    1430:	00000000 	.word	0x00000000
    1434:	00000d08 	.word	0x00000d08
    1438:	40047000 	.word	0x40047000
    143c:	00001044 	.word	0x00001044
    1440:	00001038 	.word	0x00001038
    1444:	4007d000 	.word	0x4007d000
    1448:	00001004 	.word	0x00001004
    144c:	fffeffff 	.word	0xfffeffff
    1450:	fcffffff 	.word	0xfcffffff
    1454:	40064000 	.word	0x40064000
    1458:	40065000 	.word	0x40065000

0000145c <PE_low_level_init>:
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void PE_low_level_init(void)
{
    145c:	b580      	push	{r7, lr}
    145e:	af00      	add	r7, sp, #0
  #ifdef PEX_RTOS_INIT
    PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
      /* Initialization of the SIM module */
  /* PORTA_PCR4: ISF=0,MUX=7 */
  PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
    1460:	4b4f      	ldr	r3, [pc, #316]	; (15a0 <PE_low_level_init+0x144>)
    1462:	4a4f      	ldr	r2, [pc, #316]	; (15a0 <PE_low_level_init+0x144>)
    1464:	6911      	ldr	r1, [r2, #16]
    1466:	4a4f      	ldr	r2, [pc, #316]	; (15a4 <PE_low_level_init+0x148>)
    1468:	400a      	ands	r2, r1
    146a:	21e0      	movs	r1, #224	; 0xe0
    146c:	00c9      	lsls	r1, r1, #3
    146e:	430a      	orrs	r2, r1
    1470:	611a      	str	r2, [r3, #16]
               )) | (uint32_t)(
                PORT_PCR_MUX(0x07)
               ));
        /* Initialization of the RCM module */
  /* RCM_RPFW: RSTFLTSEL=0 */
  RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
    1472:	4b4d      	ldr	r3, [pc, #308]	; (15a8 <PE_low_level_init+0x14c>)
    1474:	4a4c      	ldr	r2, [pc, #304]	; (15a8 <PE_low_level_init+0x14c>)
    1476:	7952      	ldrb	r2, [r2, #5]
    1478:	b2d2      	uxtb	r2, r2
    147a:	211f      	movs	r1, #31
    147c:	438a      	bics	r2, r1
    147e:	b2d2      	uxtb	r2, r2
    1480:	715a      	strb	r2, [r3, #5]
  /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
  RCM_RPFC &= (uint8_t)~(uint8_t)(
    1482:	4b49      	ldr	r3, [pc, #292]	; (15a8 <PE_low_level_init+0x14c>)
    1484:	4a48      	ldr	r2, [pc, #288]	; (15a8 <PE_low_level_init+0x14c>)
    1486:	7912      	ldrb	r2, [r2, #4]
    1488:	b2d2      	uxtb	r2, r2
    148a:	2107      	movs	r1, #7
    148c:	438a      	bics	r2, r1
    148e:	b2d2      	uxtb	r2, r2
    1490:	711a      	strb	r2, [r3, #4]
               RCM_RPFC_RSTFLTSRW(0x03)
              );
        /* Initialization of the FTFL_FlashConfig module */
      /* Initialization of the PMC module */
  /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
  PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
    1492:	4b46      	ldr	r3, [pc, #280]	; (15ac <PE_low_level_init+0x150>)
    1494:	4a45      	ldr	r2, [pc, #276]	; (15ac <PE_low_level_init+0x150>)
    1496:	7812      	ldrb	r2, [r2, #0]
    1498:	b2d2      	uxtb	r2, r2
    149a:	b2d2      	uxtb	r2, r2
    149c:	2173      	movs	r1, #115	; 0x73
    149e:	438a      	bics	r2, r1
    14a0:	b2d2      	uxtb	r2, r2
    14a2:	2150      	movs	r1, #80	; 0x50
    14a4:	430a      	orrs	r2, r1
    14a6:	b2d2      	uxtb	r2, r2
    14a8:	b2d2      	uxtb	r2, r2
    14aa:	701a      	strb	r2, [r3, #0]
               )) | (uint8_t)(
                PMC_LVDSC1_LVDACK_MASK |
                PMC_LVDSC1_LVDRE_MASK
               ));
  /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
  PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
    14ac:	4b3f      	ldr	r3, [pc, #252]	; (15ac <PE_low_level_init+0x150>)
    14ae:	4a3f      	ldr	r2, [pc, #252]	; (15ac <PE_low_level_init+0x150>)
    14b0:	7852      	ldrb	r2, [r2, #1]
    14b2:	b2d2      	uxtb	r2, r2
    14b4:	b2d2      	uxtb	r2, r2
    14b6:	2163      	movs	r1, #99	; 0x63
    14b8:	438a      	bics	r2, r1
    14ba:	b2d2      	uxtb	r2, r2
    14bc:	2140      	movs	r1, #64	; 0x40
    14be:	430a      	orrs	r2, r1
    14c0:	b2d2      	uxtb	r2, r2
    14c2:	b2d2      	uxtb	r2, r2
    14c4:	705a      	strb	r2, [r3, #1]
                PMC_LVDSC2_LVWV(0x03)
               )) | (uint8_t)(
                PMC_LVDSC2_LVWACK_MASK
               ));
  /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
  PMC_REGSC &= (uint8_t)~(uint8_t)(
    14c6:	4b39      	ldr	r3, [pc, #228]	; (15ac <PE_low_level_init+0x150>)
    14c8:	4a38      	ldr	r2, [pc, #224]	; (15ac <PE_low_level_init+0x150>)
    14ca:	7892      	ldrb	r2, [r2, #2]
    14cc:	b2d2      	uxtb	r2, r2
    14ce:	2119      	movs	r1, #25
    14d0:	438a      	bics	r2, r1
    14d2:	b2d2      	uxtb	r2, r2
    14d4:	709a      	strb	r2, [r3, #2]
                PMC_REGSC_BGEN_MASK |
                PMC_REGSC_ACKISO_MASK |
                PMC_REGSC_BGBE_MASK
               );
  /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
  SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
    14d6:	4b36      	ldr	r3, [pc, #216]	; (15b0 <PE_low_level_init+0x154>)
    14d8:	2200      	movs	r2, #0
    14da:	701a      	strb	r2, [r3, #0]
  /* Common initialization of the CPU registers */
  /* PORTD_PCR3: ISF=0,MUX=1,PE=1 */
  PORTD_PCR3 = (uint32_t)((PORTD_PCR3 & (uint32_t)~(uint32_t)(
    14dc:	4b35      	ldr	r3, [pc, #212]	; (15b4 <PE_low_level_init+0x158>)
    14de:	4a35      	ldr	r2, [pc, #212]	; (15b4 <PE_low_level_init+0x158>)
    14e0:	68d1      	ldr	r1, [r2, #12]
    14e2:	4a35      	ldr	r2, [pc, #212]	; (15b8 <PE_low_level_init+0x15c>)
    14e4:	400a      	ands	r2, r1
    14e6:	2181      	movs	r1, #129	; 0x81
    14e8:	0049      	lsls	r1, r1, #1
    14ea:	430a      	orrs	r2, r1
    14ec:	60da      	str	r2, [r3, #12]
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01) |
                PORT_PCR_PE_MASK
               ));
  /* NVIC_IPR7: PRI_31=0 */
  NVIC_IPR7 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_31(0xFF));
    14ee:	4a33      	ldr	r2, [pc, #204]	; (15bc <PE_low_level_init+0x160>)
    14f0:	4932      	ldr	r1, [pc, #200]	; (15bc <PE_low_level_init+0x160>)
    14f2:	23c7      	movs	r3, #199	; 0xc7
    14f4:	009b      	lsls	r3, r3, #2
    14f6:	58cb      	ldr	r3, [r1, r3]
    14f8:	021b      	lsls	r3, r3, #8
    14fa:	0a19      	lsrs	r1, r3, #8
    14fc:	23c7      	movs	r3, #199	; 0xc7
    14fe:	009b      	lsls	r3, r3, #2
    1500:	50d1      	str	r1, [r2, r3]
  /* PORTA_PCR20: ISF=0,MUX=7 */
  PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
    1502:	4b27      	ldr	r3, [pc, #156]	; (15a0 <PE_low_level_init+0x144>)
    1504:	4a26      	ldr	r2, [pc, #152]	; (15a0 <PE_low_level_init+0x144>)
    1506:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1508:	4a26      	ldr	r2, [pc, #152]	; (15a4 <PE_low_level_init+0x148>)
    150a:	400a      	ands	r2, r1
    150c:	21e0      	movs	r1, #224	; 0xe0
    150e:	00c9      	lsls	r1, r1, #3
    1510:	430a      	orrs	r2, r1
    1512:	651a      	str	r2, [r3, #80]	; 0x50
                 PORT_PCR_ISF_MASK
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x07)
                ));
  /* NVIC_IPR1: PRI_6=0 */
  NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
    1514:	4a29      	ldr	r2, [pc, #164]	; (15bc <PE_low_level_init+0x160>)
    1516:	4929      	ldr	r1, [pc, #164]	; (15bc <PE_low_level_init+0x160>)
    1518:	23c1      	movs	r3, #193	; 0xc1
    151a:	009b      	lsls	r3, r3, #2
    151c:	58c9      	ldr	r1, [r1, r3]
    151e:	4b28      	ldr	r3, [pc, #160]	; (15c0 <PE_low_level_init+0x164>)
    1520:	4019      	ands	r1, r3
    1522:	23c1      	movs	r3, #193	; 0xc1
    1524:	009b      	lsls	r3, r3, #2
    1526:	50d1      	str	r1, [r2, r3]
  /* ### BitIO_LDD "BitIoLdd1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd1_Init(NULL);
    1528:	2000      	movs	r0, #0
    152a:	f000 fc79 	bl	1e20 <BitIoLdd1_Init>
  /* ### LED "LED_Orange" init code ... */
  LED_Orange_Init(); /* initialize LED driver */
    152e:	4b25      	ldr	r3, [pc, #148]	; (15c4 <PE_low_level_init+0x168>)
    1530:	681b      	ldr	r3, [r3, #0]
    1532:	1c18      	adds	r0, r3, #0
    1534:	f000 fca4 	bl	1e80 <BitIoLdd1_SetVal>
  /* ### BitIO_LDD "BitIoLdd2" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd2_Init(NULL);
    1538:	2000      	movs	r0, #0
    153a:	f000 fbb5 	bl	1ca8 <BitIoLdd2_Init>
  /* ### BitIO_LDD "BitIoLdd3" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd3_Init(NULL);
    153e:	2000      	movs	r0, #0
    1540:	f000 fb64 	bl	1c0c <BitIoLdd3_Init>
  /* ### PWM_LDD "PwmLdd1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)PwmLdd1_Init(NULL);
    1544:	2000      	movs	r0, #0
    1546:	f7ff fb99 	bl	c7c <PwmLdd1_Init>
  /* ### PWM_LDD "PwmLdd2" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)PwmLdd2_Init(NULL);
    154a:	2000      	movs	r0, #0
    154c:	f7ff fb0a 	bl	b64 <PwmLdd2_Init>
  /* ### TimerInt_LDD "TimerIntLdd1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)TimerIntLdd1_Init(NULL);
    1550:	2000      	movs	r0, #0
    1552:	f7ff f879 	bl	648 <TimerIntLdd1_Init>
  /* ### TimerInt "Periodic_timer" init code ... */
  /* ### TimerUnit_LDD "CountTimer" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)CountTimer_Init(NULL);
    1556:	2000      	movs	r0, #0
    1558:	f000 f836 	bl	15c8 <CountTimer_Init>
  /* ### BitIO_LDD "BitIoLdd4" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd4_Init(NULL);
    155c:	2000      	movs	r0, #0
    155e:	f000 fadd 	bl	1b1c <BitIoLdd4_Init>
  /* ### BitIO_LDD "BitIoLdd5" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd5_Init(NULL);
    1562:	2000      	movs	r0, #0
    1564:	f000 fa62 	bl	1a2c <BitIoLdd5_Init>
  /* ### BitIO_LDD "BitIoLdd6" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd6_Init(NULL);
    1568:	2000      	movs	r0, #0
    156a:	f000 f9e7 	bl	193c <BitIoLdd6_Init>
  /* ### BitIO_LDD "BitIoLdd7" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd7_Init(NULL);
    156e:	2000      	movs	r0, #0
    1570:	f000 f96c 	bl	184c <BitIoLdd7_Init>
  /* ### BitIO_LDD "BitIoLdd8" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd8_Init(NULL);
    1574:	2000      	movs	r0, #0
    1576:	f000 f8f1 	bl	175c <BitIoLdd8_Init>
  /* ### BitIO_LDD "BitIoLdd9" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd9_Init(NULL);
    157a:	2000      	movs	r0, #0
    157c:	f000 f876 	bl	166c <BitIoLdd9_Init>
  /* ### Asynchro serial "Inhr1" init code ... */
  Inhr1_Init();
    1580:	f7ff fdc2 	bl	1108 <Inhr1_Init>
  /* ###  "Term1" init code ... */
  /* ### BitIO_LDD "BitIoLdd10" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd10_Init(NULL);
    1584:	2000      	movs	r0, #0
    1586:	f000 fc0f 	bl	1da8 <BitIoLdd10_Init>
  /* ### BitIO_LDD "BitIoLdd11" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd11_Init(NULL);
    158a:	2000      	movs	r0, #0
    158c:	f000 fbda 	bl	1d44 <BitIoLdd11_Init>
  /* ### Init_GPIO "PullupButton" init code ... */
  PullupButton_Init();
    1590:	f7ff fc00 	bl	d94 <PullupButton_Init>
  /* ### Asynchro serial "Inhr2" init code ... */
  Inhr2_Init();
    1594:	f7ff fc9a 	bl	ecc <Inhr2_Init>
  /* ###  "Term2" init code ... */
  __EI();
    1598:	b662      	cpsie	i
}
    159a:	46bd      	mov	sp, r7
    159c:	bd80      	pop	{r7, pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	40049000 	.word	0x40049000
    15a4:	fefff8ff 	.word	0xfefff8ff
    15a8:	4007f000 	.word	0x4007f000
    15ac:	4007d000 	.word	0x4007d000
    15b0:	4007e000 	.word	0x4007e000
    15b4:	4004c000 	.word	0x4004c000
    15b8:	fefff8fd 	.word	0xfefff8fd
    15bc:	e000e100 	.word	0xe000e100
    15c0:	ff00ffff 	.word	0xff00ffff
    15c4:	1ffff03c 	.word	0x1ffff03c

000015c8 <CountTimer_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* CountTimer_Init(LDD_TUserData *UserDataPtr)
{
    15c8:	b580      	push	{r7, lr}
    15ca:	b084      	sub	sp, #16
    15cc:	af00      	add	r7, sp, #0
    15ce:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  CountTimer_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    15d0:	4b13      	ldr	r3, [pc, #76]	; (1620 <CountTimer_Init+0x58>)
    15d2:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    15d4:	68fb      	ldr	r3, [r7, #12]
    15d6:	687a      	ldr	r2, [r7, #4]
    15d8:	601a      	str	r2, [r3, #0]
  /* SIM_SCGC6: TPM1=1 */
  SIM_SCGC6 |= SIM_SCGC6_TPM1_MASK;
    15da:	4a12      	ldr	r2, [pc, #72]	; (1624 <CountTimer_Init+0x5c>)
    15dc:	4911      	ldr	r1, [pc, #68]	; (1624 <CountTimer_Init+0x5c>)
    15de:	4b12      	ldr	r3, [pc, #72]	; (1628 <CountTimer_Init+0x60>)
    15e0:	58cb      	ldr	r3, [r1, r3]
    15e2:	2180      	movs	r1, #128	; 0x80
    15e4:	0489      	lsls	r1, r1, #18
    15e6:	4319      	orrs	r1, r3
    15e8:	4b0f      	ldr	r3, [pc, #60]	; (1628 <CountTimer_Init+0x60>)
    15ea:	50d1      	str	r1, [r2, r3]
  /* TPM1_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=0,CPWMS=0,CMOD=0,PS=0 */
  TPM1_SC = (TPM_SC_CMOD(0x00) | TPM_SC_PS(0x00)); /* Clear status and control register */
    15ec:	4b0f      	ldr	r3, [pc, #60]	; (162c <CountTimer_Init+0x64>)
    15ee:	2200      	movs	r2, #0
    15f0:	601a      	str	r2, [r3, #0]
  /* TPM1_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNT=0 */
  TPM1_CNT = TPM_CNT_COUNT(0x00);      /* Reset counter register */
    15f2:	4b0e      	ldr	r3, [pc, #56]	; (162c <CountTimer_Init+0x64>)
    15f4:	2200      	movs	r2, #0
    15f6:	605a      	str	r2, [r3, #4]
  /* TPM1_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM1_C0SC = 0x00U;                   /* Clear channel status and control register */
    15f8:	4b0c      	ldr	r3, [pc, #48]	; (162c <CountTimer_Init+0x64>)
    15fa:	2200      	movs	r2, #0
    15fc:	60da      	str	r2, [r3, #12]
  /* TPM1_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM1_C1SC = 0x00U;                   /* Clear channel status and control register */
    15fe:	4b0b      	ldr	r3, [pc, #44]	; (162c <CountTimer_Init+0x64>)
    1600:	2200      	movs	r2, #0
    1602:	615a      	str	r2, [r3, #20]
  /* TPM1_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=0xFFFF */
  TPM1_MOD = TPM_MOD_MOD(0xFFFF);      /* Set up modulo register */
    1604:	4b09      	ldr	r3, [pc, #36]	; (162c <CountTimer_Init+0x64>)
    1606:	4a0a      	ldr	r2, [pc, #40]	; (1630 <CountTimer_Init+0x68>)
    1608:	609a      	str	r2, [r3, #8]
  /* TPM1_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=0,CPWMS=0,CMOD=1,PS=7 */
  TPM1_SC = (TPM_SC_CMOD(0x01) | TPM_SC_PS(0x07)); /* Set up status and control register */
    160a:	4b08      	ldr	r3, [pc, #32]	; (162c <CountTimer_Init+0x64>)
    160c:	220f      	movs	r2, #15
    160e:	601a      	str	r2, [r3, #0]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_CountTimer_ID,DeviceDataPrv);
    1610:	4b08      	ldr	r3, [pc, #32]	; (1634 <CountTimer_Init+0x6c>)
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	621a      	str	r2, [r3, #32]
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    1616:	68fb      	ldr	r3, [r7, #12]
}
    1618:	1c18      	adds	r0, r3, #0
    161a:	46bd      	mov	sp, r7
    161c:	b004      	add	sp, #16
    161e:	bd80      	pop	{r7, pc}
    1620:	1ffff14c 	.word	0x1ffff14c
    1624:	40047000 	.word	0x40047000
    1628:	0000103c 	.word	0x0000103c
    162c:	40039000 	.word	0x40039000
    1630:	0000ffff 	.word	0x0000ffff
    1634:	1ffff03c 	.word	0x1ffff03c

00001638 <CountTimer_ResetCounter>:
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError CountTimer_ResetCounter(LDD_TDeviceData *DeviceDataPtr)
{
    1638:	b580      	push	{r7, lr}
    163a:	b082      	sub	sp, #8
    163c:	af00      	add	r7, sp, #0
    163e:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  TPM_PDD_InitializeCounter(TPM1_BASE_PTR);
    1640:	4b03      	ldr	r3, [pc, #12]	; (1650 <CountTimer_ResetCounter+0x18>)
    1642:	2200      	movs	r2, #0
    1644:	605a      	str	r2, [r3, #4]
  return ERR_OK;                       /* OK */
    1646:	2300      	movs	r3, #0
}
    1648:	1c18      	adds	r0, r3, #0
    164a:	46bd      	mov	sp, r7
    164c:	b002      	add	sp, #8
    164e:	bd80      	pop	{r7, pc}
    1650:	40039000 	.word	0x40039000

00001654 <CountTimer_GetCounterValue>:
**     @return
**                         - Counter value (number of counted ticks).
*/
/* ===================================================================*/
CountTimer_TValueType CountTimer_GetCounterValue(LDD_TDeviceData *DeviceDataPtr)
{
    1654:	b580      	push	{r7, lr}
    1656:	b082      	sub	sp, #8
    1658:	af00      	add	r7, sp, #0
    165a:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  return (CountTimer_TValueType)TPM_PDD_ReadCounterReg(TPM1_BASE_PTR);
    165c:	4b02      	ldr	r3, [pc, #8]	; (1668 <CountTimer_GetCounterValue+0x14>)
    165e:	685b      	ldr	r3, [r3, #4]
}
    1660:	1c18      	adds	r0, r3, #0
    1662:	46bd      	mov	sp, r7
    1664:	b002      	add	sp, #8
    1666:	bd80      	pop	{r7, pc}
    1668:	40039000 	.word	0x40039000

0000166c <BitIoLdd9_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd9_Init(LDD_TUserData *UserDataPtr)
{
    166c:	b580      	push	{r7, lr}
    166e:	b084      	sub	sp, #16
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd9_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1674:	4b10      	ldr	r3, [pc, #64]	; (16b8 <BitIoLdd9_Init+0x4c>)
    1676:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1678:	68fb      	ldr	r3, [r7, #12]
    167a:	687a      	ldr	r2, [r7, #4]
    167c:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOA_PDDR: PDD|=0x20 */
  GPIOA_PDDR |= GPIO_PDDR_PDD(0x20);
    167e:	4b0f      	ldr	r3, [pc, #60]	; (16bc <BitIoLdd9_Init+0x50>)
    1680:	4a0e      	ldr	r2, [pc, #56]	; (16bc <BitIoLdd9_Init+0x50>)
    1682:	6952      	ldr	r2, [r2, #20]
    1684:	2120      	movs	r1, #32
    1686:	430a      	orrs	r2, r1
    1688:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOA_PDOR: PDO&=~0x20 */
  GPIOA_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x20));
    168a:	4b0c      	ldr	r3, [pc, #48]	; (16bc <BitIoLdd9_Init+0x50>)
    168c:	4a0b      	ldr	r2, [pc, #44]	; (16bc <BitIoLdd9_Init+0x50>)
    168e:	6812      	ldr	r2, [r2, #0]
    1690:	2120      	movs	r1, #32
    1692:	438a      	bics	r2, r1
    1694:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTA_PCR5: ISF=0,MUX=1 */
  PORTA_PCR5 = (uint32_t)((PORTA_PCR5 & (uint32_t)~(uint32_t)(
    1696:	4b0a      	ldr	r3, [pc, #40]	; (16c0 <BitIoLdd9_Init+0x54>)
    1698:	4a09      	ldr	r2, [pc, #36]	; (16c0 <BitIoLdd9_Init+0x54>)
    169a:	6951      	ldr	r1, [r2, #20]
    169c:	4a09      	ldr	r2, [pc, #36]	; (16c4 <BitIoLdd9_Init+0x58>)
    169e:	400a      	ands	r2, r1
    16a0:	2180      	movs	r1, #128	; 0x80
    16a2:	0049      	lsls	r1, r1, #1
    16a4:	430a      	orrs	r2, r1
    16a6:	615a      	str	r2, [r3, #20]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd9_ID,DeviceDataPrv);
    16a8:	4b07      	ldr	r3, [pc, #28]	; (16c8 <BitIoLdd9_Init+0x5c>)
    16aa:	68fa      	ldr	r2, [r7, #12]
    16ac:	639a      	str	r2, [r3, #56]	; 0x38
  return ((LDD_TDeviceData *)DeviceDataPrv);
    16ae:	68fb      	ldr	r3, [r7, #12]
}
    16b0:	1c18      	adds	r0, r3, #0
    16b2:	46bd      	mov	sp, r7
    16b4:	b004      	add	sp, #16
    16b6:	bd80      	pop	{r7, pc}
    16b8:	1ffff150 	.word	0x1ffff150
    16bc:	400ff000 	.word	0x400ff000
    16c0:	40049000 	.word	0x40049000
    16c4:	fefff8ff 	.word	0xfefff8ff
    16c8:	1ffff03c 	.word	0x1ffff03c

000016cc <BitIoLdd9_SetDir>:
**                           <false> - Input
**                           <true> - Output
*/
/* ===================================================================*/
void BitIoLdd9_SetDir(LDD_TDeviceData *DeviceDataPtr, bool Dir)
{
    16cc:	b580      	push	{r7, lr}
    16ce:	b082      	sub	sp, #8
    16d0:	af00      	add	r7, sp, #0
    16d2:	6078      	str	r0, [r7, #4]
    16d4:	1c0a      	adds	r2, r1, #0
    16d6:	1cfb      	adds	r3, r7, #3
    16d8:	701a      	strb	r2, [r3, #0]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if (Dir) {
    16da:	1cfb      	adds	r3, r7, #3
    16dc:	781b      	ldrb	r3, [r3, #0]
    16de:	2b00      	cmp	r3, #0
    16e0:	d006      	beq.n	16f0 <BitIoLdd9_SetDir+0x24>
    /* Output */
    GPIO_PDD_SetPortOutputDirectionMask(BitIoLdd9_MODULE_BASE_ADDRESS, BitIoLdd9_PORT_MASK);
    16e2:	4b08      	ldr	r3, [pc, #32]	; (1704 <BitIoLdd9_SetDir+0x38>)
    16e4:	4a07      	ldr	r2, [pc, #28]	; (1704 <BitIoLdd9_SetDir+0x38>)
    16e6:	6952      	ldr	r2, [r2, #20]
    16e8:	2120      	movs	r1, #32
    16ea:	430a      	orrs	r2, r1
    16ec:	615a      	str	r2, [r3, #20]
    16ee:	e005      	b.n	16fc <BitIoLdd9_SetDir+0x30>
  } else {
    /* Input */
    GPIO_PDD_SetPortInputDirectionMask(BitIoLdd9_MODULE_BASE_ADDRESS, BitIoLdd9_PORT_MASK);
    16f0:	4b04      	ldr	r3, [pc, #16]	; (1704 <BitIoLdd9_SetDir+0x38>)
    16f2:	4a04      	ldr	r2, [pc, #16]	; (1704 <BitIoLdd9_SetDir+0x38>)
    16f4:	6952      	ldr	r2, [r2, #20]
    16f6:	2120      	movs	r1, #32
    16f8:	438a      	bics	r2, r1
    16fa:	615a      	str	r2, [r3, #20]
  }
}
    16fc:	46bd      	mov	sp, r7
    16fe:	b002      	add	sp, #8
    1700:	bd80      	pop	{r7, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	f80ff000 	.word	0xf80ff000

00001708 <BitIoLdd9_GetVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd9_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1708:	b580      	push	{r7, lr}
    170a:	b084      	sub	sp, #16
    170c:	af00      	add	r7, sp, #0
    170e:	6078      	str	r0, [r7, #4]
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if ((GPIO_PDD_GetPortDirection(BitIoLdd9_MODULE_BASE_ADDRESS) & BitIoLdd9_PORT_MASK) == 0U) {
    1710:	4b0b      	ldr	r3, [pc, #44]	; (1740 <BitIoLdd9_GetVal+0x38>)
    1712:	695a      	ldr	r2, [r3, #20]
    1714:	2320      	movs	r3, #32
    1716:	4013      	ands	r3, r2
    1718:	d105      	bne.n	1726 <BitIoLdd9_GetVal+0x1e>
    /* Port is configured as input */
    PortData = GPIO_PDD_GetPortDataInput(BitIoLdd9_MODULE_BASE_ADDRESS) & BitIoLdd9_PORT_MASK;
    171a:	4b09      	ldr	r3, [pc, #36]	; (1740 <BitIoLdd9_GetVal+0x38>)
    171c:	691a      	ldr	r2, [r3, #16]
    171e:	2320      	movs	r3, #32
    1720:	4013      	ands	r3, r2
    1722:	60fb      	str	r3, [r7, #12]
    1724:	e004      	b.n	1730 <BitIoLdd9_GetVal+0x28>
  } else {
    /* Port is configured as output */
    PortData = GPIO_PDD_GetPortDataOutput(BitIoLdd9_MODULE_BASE_ADDRESS) & BitIoLdd9_PORT_MASK;
    1726:	4b06      	ldr	r3, [pc, #24]	; (1740 <BitIoLdd9_GetVal+0x38>)
    1728:	681a      	ldr	r2, [r3, #0]
    172a:	2320      	movs	r3, #32
    172c:	4013      	ands	r3, r2
    172e:	60fb      	str	r3, [r7, #12]
  }
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
    1730:	68fb      	ldr	r3, [r7, #12]
    1732:	1e5a      	subs	r2, r3, #1
    1734:	4193      	sbcs	r3, r2
    1736:	b2db      	uxtb	r3, r3
}
    1738:	1c18      	adds	r0, r3, #0
    173a:	46bd      	mov	sp, r7
    173c:	b004      	add	sp, #16
    173e:	bd80      	pop	{r7, pc}
    1740:	f80ff000 	.word	0xf80ff000

00001744 <BitIoLdd9_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd9_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1744:	b580      	push	{r7, lr}
    1746:	b082      	sub	sp, #8
    1748:	af00      	add	r7, sp, #0
    174a:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd9_MODULE_BASE_ADDRESS, BitIoLdd9_PORT_MASK);
    174c:	4b02      	ldr	r3, [pc, #8]	; (1758 <BitIoLdd9_SetVal+0x14>)
    174e:	2220      	movs	r2, #32
    1750:	605a      	str	r2, [r3, #4]
}
    1752:	46bd      	mov	sp, r7
    1754:	b002      	add	sp, #8
    1756:	bd80      	pop	{r7, pc}
    1758:	f80ff000 	.word	0xf80ff000

0000175c <BitIoLdd8_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd8_Init(LDD_TUserData *UserDataPtr)
{
    175c:	b580      	push	{r7, lr}
    175e:	b084      	sub	sp, #16
    1760:	af00      	add	r7, sp, #0
    1762:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd8_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1764:	4b10      	ldr	r3, [pc, #64]	; (17a8 <BitIoLdd8_Init+0x4c>)
    1766:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1768:	68fb      	ldr	r3, [r7, #12]
    176a:	687a      	ldr	r2, [r7, #4]
    176c:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOB_PDDR: PDD|=4 */
  GPIOB_PDDR |= GPIO_PDDR_PDD(0x04);
    176e:	4b0f      	ldr	r3, [pc, #60]	; (17ac <BitIoLdd8_Init+0x50>)
    1770:	4a0e      	ldr	r2, [pc, #56]	; (17ac <BitIoLdd8_Init+0x50>)
    1772:	6952      	ldr	r2, [r2, #20]
    1774:	2104      	movs	r1, #4
    1776:	430a      	orrs	r2, r1
    1778:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOB_PDOR: PDO&=~4 */
  GPIOB_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x04));
    177a:	4b0c      	ldr	r3, [pc, #48]	; (17ac <BitIoLdd8_Init+0x50>)
    177c:	4a0b      	ldr	r2, [pc, #44]	; (17ac <BitIoLdd8_Init+0x50>)
    177e:	6812      	ldr	r2, [r2, #0]
    1780:	2104      	movs	r1, #4
    1782:	438a      	bics	r2, r1
    1784:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTB_PCR2: ISF=0,MUX=1 */
  PORTB_PCR2 = (uint32_t)((PORTB_PCR2 & (uint32_t)~(uint32_t)(
    1786:	4b0a      	ldr	r3, [pc, #40]	; (17b0 <BitIoLdd8_Init+0x54>)
    1788:	4a09      	ldr	r2, [pc, #36]	; (17b0 <BitIoLdd8_Init+0x54>)
    178a:	6891      	ldr	r1, [r2, #8]
    178c:	4a09      	ldr	r2, [pc, #36]	; (17b4 <BitIoLdd8_Init+0x58>)
    178e:	400a      	ands	r2, r1
    1790:	2180      	movs	r1, #128	; 0x80
    1792:	0049      	lsls	r1, r1, #1
    1794:	430a      	orrs	r2, r1
    1796:	609a      	str	r2, [r3, #8]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd8_ID,DeviceDataPrv);
    1798:	4b07      	ldr	r3, [pc, #28]	; (17b8 <BitIoLdd8_Init+0x5c>)
    179a:	68fa      	ldr	r2, [r7, #12]
    179c:	635a      	str	r2, [r3, #52]	; 0x34
  return ((LDD_TDeviceData *)DeviceDataPrv);
    179e:	68fb      	ldr	r3, [r7, #12]
}
    17a0:	1c18      	adds	r0, r3, #0
    17a2:	46bd      	mov	sp, r7
    17a4:	b004      	add	sp, #16
    17a6:	bd80      	pop	{r7, pc}
    17a8:	1ffff154 	.word	0x1ffff154
    17ac:	400ff040 	.word	0x400ff040
    17b0:	4004a000 	.word	0x4004a000
    17b4:	fefff8ff 	.word	0xfefff8ff
    17b8:	1ffff03c 	.word	0x1ffff03c

000017bc <BitIoLdd8_SetDir>:
**                           <false> - Input
**                           <true> - Output
*/
/* ===================================================================*/
void BitIoLdd8_SetDir(LDD_TDeviceData *DeviceDataPtr, bool Dir)
{
    17bc:	b580      	push	{r7, lr}
    17be:	b082      	sub	sp, #8
    17c0:	af00      	add	r7, sp, #0
    17c2:	6078      	str	r0, [r7, #4]
    17c4:	1c0a      	adds	r2, r1, #0
    17c6:	1cfb      	adds	r3, r7, #3
    17c8:	701a      	strb	r2, [r3, #0]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if (Dir) {
    17ca:	1cfb      	adds	r3, r7, #3
    17cc:	781b      	ldrb	r3, [r3, #0]
    17ce:	2b00      	cmp	r3, #0
    17d0:	d006      	beq.n	17e0 <BitIoLdd8_SetDir+0x24>
    /* Output */
    GPIO_PDD_SetPortOutputDirectionMask(BitIoLdd8_MODULE_BASE_ADDRESS, BitIoLdd8_PORT_MASK);
    17d2:	4b08      	ldr	r3, [pc, #32]	; (17f4 <BitIoLdd8_SetDir+0x38>)
    17d4:	4a07      	ldr	r2, [pc, #28]	; (17f4 <BitIoLdd8_SetDir+0x38>)
    17d6:	6952      	ldr	r2, [r2, #20]
    17d8:	2104      	movs	r1, #4
    17da:	430a      	orrs	r2, r1
    17dc:	615a      	str	r2, [r3, #20]
    17de:	e005      	b.n	17ec <BitIoLdd8_SetDir+0x30>
  } else {
    /* Input */
    GPIO_PDD_SetPortInputDirectionMask(BitIoLdd8_MODULE_BASE_ADDRESS, BitIoLdd8_PORT_MASK);
    17e0:	4b04      	ldr	r3, [pc, #16]	; (17f4 <BitIoLdd8_SetDir+0x38>)
    17e2:	4a04      	ldr	r2, [pc, #16]	; (17f4 <BitIoLdd8_SetDir+0x38>)
    17e4:	6952      	ldr	r2, [r2, #20]
    17e6:	2104      	movs	r1, #4
    17e8:	438a      	bics	r2, r1
    17ea:	615a      	str	r2, [r3, #20]
  }
}
    17ec:	46bd      	mov	sp, r7
    17ee:	b002      	add	sp, #8
    17f0:	bd80      	pop	{r7, pc}
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	f80ff040 	.word	0xf80ff040

000017f8 <BitIoLdd8_GetVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd8_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
    17f8:	b580      	push	{r7, lr}
    17fa:	b084      	sub	sp, #16
    17fc:	af00      	add	r7, sp, #0
    17fe:	6078      	str	r0, [r7, #4]
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if ((GPIO_PDD_GetPortDirection(BitIoLdd8_MODULE_BASE_ADDRESS) & BitIoLdd8_PORT_MASK) == 0U) {
    1800:	4b0b      	ldr	r3, [pc, #44]	; (1830 <BitIoLdd8_GetVal+0x38>)
    1802:	695a      	ldr	r2, [r3, #20]
    1804:	2304      	movs	r3, #4
    1806:	4013      	ands	r3, r2
    1808:	d105      	bne.n	1816 <BitIoLdd8_GetVal+0x1e>
    /* Port is configured as input */
    PortData = GPIO_PDD_GetPortDataInput(BitIoLdd8_MODULE_BASE_ADDRESS) & BitIoLdd8_PORT_MASK;
    180a:	4b09      	ldr	r3, [pc, #36]	; (1830 <BitIoLdd8_GetVal+0x38>)
    180c:	691a      	ldr	r2, [r3, #16]
    180e:	2304      	movs	r3, #4
    1810:	4013      	ands	r3, r2
    1812:	60fb      	str	r3, [r7, #12]
    1814:	e004      	b.n	1820 <BitIoLdd8_GetVal+0x28>
  } else {
    /* Port is configured as output */
    PortData = GPIO_PDD_GetPortDataOutput(BitIoLdd8_MODULE_BASE_ADDRESS) & BitIoLdd8_PORT_MASK;
    1816:	4b06      	ldr	r3, [pc, #24]	; (1830 <BitIoLdd8_GetVal+0x38>)
    1818:	681a      	ldr	r2, [r3, #0]
    181a:	2304      	movs	r3, #4
    181c:	4013      	ands	r3, r2
    181e:	60fb      	str	r3, [r7, #12]
  }
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	1e5a      	subs	r2, r3, #1
    1824:	4193      	sbcs	r3, r2
    1826:	b2db      	uxtb	r3, r3
}
    1828:	1c18      	adds	r0, r3, #0
    182a:	46bd      	mov	sp, r7
    182c:	b004      	add	sp, #16
    182e:	bd80      	pop	{r7, pc}
    1830:	f80ff040 	.word	0xf80ff040

00001834 <BitIoLdd8_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd8_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1834:	b580      	push	{r7, lr}
    1836:	b082      	sub	sp, #8
    1838:	af00      	add	r7, sp, #0
    183a:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd8_MODULE_BASE_ADDRESS, BitIoLdd8_PORT_MASK);
    183c:	4b02      	ldr	r3, [pc, #8]	; (1848 <BitIoLdd8_SetVal+0x14>)
    183e:	2204      	movs	r2, #4
    1840:	605a      	str	r2, [r3, #4]
}
    1842:	46bd      	mov	sp, r7
    1844:	b002      	add	sp, #8
    1846:	bd80      	pop	{r7, pc}
    1848:	f80ff040 	.word	0xf80ff040

0000184c <BitIoLdd7_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd7_Init(LDD_TUserData *UserDataPtr)
{
    184c:	b580      	push	{r7, lr}
    184e:	b084      	sub	sp, #16
    1850:	af00      	add	r7, sp, #0
    1852:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd7_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1854:	4b10      	ldr	r3, [pc, #64]	; (1898 <BitIoLdd7_Init+0x4c>)
    1856:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1858:	68fb      	ldr	r3, [r7, #12]
    185a:	687a      	ldr	r2, [r7, #4]
    185c:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOB_PDDR: PDD|=1 */
  GPIOB_PDDR |= GPIO_PDDR_PDD(0x01);
    185e:	4b0f      	ldr	r3, [pc, #60]	; (189c <BitIoLdd7_Init+0x50>)
    1860:	4a0e      	ldr	r2, [pc, #56]	; (189c <BitIoLdd7_Init+0x50>)
    1862:	6952      	ldr	r2, [r2, #20]
    1864:	2101      	movs	r1, #1
    1866:	430a      	orrs	r2, r1
    1868:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOB_PDOR: PDO&=~1 */
  GPIOB_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x01));
    186a:	4b0c      	ldr	r3, [pc, #48]	; (189c <BitIoLdd7_Init+0x50>)
    186c:	4a0b      	ldr	r2, [pc, #44]	; (189c <BitIoLdd7_Init+0x50>)
    186e:	6812      	ldr	r2, [r2, #0]
    1870:	2101      	movs	r1, #1
    1872:	438a      	bics	r2, r1
    1874:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTB_PCR0: ISF=0,MUX=1 */
  PORTB_PCR0 = (uint32_t)((PORTB_PCR0 & (uint32_t)~(uint32_t)(
    1876:	4b0a      	ldr	r3, [pc, #40]	; (18a0 <BitIoLdd7_Init+0x54>)
    1878:	4a09      	ldr	r2, [pc, #36]	; (18a0 <BitIoLdd7_Init+0x54>)
    187a:	6811      	ldr	r1, [r2, #0]
    187c:	4a09      	ldr	r2, [pc, #36]	; (18a4 <BitIoLdd7_Init+0x58>)
    187e:	400a      	ands	r2, r1
    1880:	2180      	movs	r1, #128	; 0x80
    1882:	0049      	lsls	r1, r1, #1
    1884:	430a      	orrs	r2, r1
    1886:	601a      	str	r2, [r3, #0]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd7_ID,DeviceDataPrv);
    1888:	4b07      	ldr	r3, [pc, #28]	; (18a8 <BitIoLdd7_Init+0x5c>)
    188a:	68fa      	ldr	r2, [r7, #12]
    188c:	631a      	str	r2, [r3, #48]	; 0x30
  return ((LDD_TDeviceData *)DeviceDataPrv);
    188e:	68fb      	ldr	r3, [r7, #12]
}
    1890:	1c18      	adds	r0, r3, #0
    1892:	46bd      	mov	sp, r7
    1894:	b004      	add	sp, #16
    1896:	bd80      	pop	{r7, pc}
    1898:	1ffff158 	.word	0x1ffff158
    189c:	400ff040 	.word	0x400ff040
    18a0:	4004a000 	.word	0x4004a000
    18a4:	fefff8ff 	.word	0xfefff8ff
    18a8:	1ffff03c 	.word	0x1ffff03c

000018ac <BitIoLdd7_SetDir>:
**                           <false> - Input
**                           <true> - Output
*/
/* ===================================================================*/
void BitIoLdd7_SetDir(LDD_TDeviceData *DeviceDataPtr, bool Dir)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	af00      	add	r7, sp, #0
    18b2:	6078      	str	r0, [r7, #4]
    18b4:	1c0a      	adds	r2, r1, #0
    18b6:	1cfb      	adds	r3, r7, #3
    18b8:	701a      	strb	r2, [r3, #0]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if (Dir) {
    18ba:	1cfb      	adds	r3, r7, #3
    18bc:	781b      	ldrb	r3, [r3, #0]
    18be:	2b00      	cmp	r3, #0
    18c0:	d006      	beq.n	18d0 <BitIoLdd7_SetDir+0x24>
    /* Output */
    GPIO_PDD_SetPortOutputDirectionMask(BitIoLdd7_MODULE_BASE_ADDRESS, BitIoLdd7_PORT_MASK);
    18c2:	4b08      	ldr	r3, [pc, #32]	; (18e4 <BitIoLdd7_SetDir+0x38>)
    18c4:	4a07      	ldr	r2, [pc, #28]	; (18e4 <BitIoLdd7_SetDir+0x38>)
    18c6:	6952      	ldr	r2, [r2, #20]
    18c8:	2101      	movs	r1, #1
    18ca:	430a      	orrs	r2, r1
    18cc:	615a      	str	r2, [r3, #20]
    18ce:	e005      	b.n	18dc <BitIoLdd7_SetDir+0x30>
  } else {
    /* Input */
    GPIO_PDD_SetPortInputDirectionMask(BitIoLdd7_MODULE_BASE_ADDRESS, BitIoLdd7_PORT_MASK);
    18d0:	4b04      	ldr	r3, [pc, #16]	; (18e4 <BitIoLdd7_SetDir+0x38>)
    18d2:	4a04      	ldr	r2, [pc, #16]	; (18e4 <BitIoLdd7_SetDir+0x38>)
    18d4:	6952      	ldr	r2, [r2, #20]
    18d6:	2101      	movs	r1, #1
    18d8:	438a      	bics	r2, r1
    18da:	615a      	str	r2, [r3, #20]
  }
}
    18dc:	46bd      	mov	sp, r7
    18de:	b002      	add	sp, #8
    18e0:	bd80      	pop	{r7, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	f80ff040 	.word	0xf80ff040

000018e8 <BitIoLdd7_GetVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd7_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	b084      	sub	sp, #16
    18ec:	af00      	add	r7, sp, #0
    18ee:	6078      	str	r0, [r7, #4]
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if ((GPIO_PDD_GetPortDirection(BitIoLdd7_MODULE_BASE_ADDRESS) & BitIoLdd7_PORT_MASK) == 0U) {
    18f0:	4b0b      	ldr	r3, [pc, #44]	; (1920 <BitIoLdd7_GetVal+0x38>)
    18f2:	695a      	ldr	r2, [r3, #20]
    18f4:	2301      	movs	r3, #1
    18f6:	4013      	ands	r3, r2
    18f8:	d105      	bne.n	1906 <BitIoLdd7_GetVal+0x1e>
    /* Port is configured as input */
    PortData = GPIO_PDD_GetPortDataInput(BitIoLdd7_MODULE_BASE_ADDRESS) & BitIoLdd7_PORT_MASK;
    18fa:	4b09      	ldr	r3, [pc, #36]	; (1920 <BitIoLdd7_GetVal+0x38>)
    18fc:	691a      	ldr	r2, [r3, #16]
    18fe:	2301      	movs	r3, #1
    1900:	4013      	ands	r3, r2
    1902:	60fb      	str	r3, [r7, #12]
    1904:	e004      	b.n	1910 <BitIoLdd7_GetVal+0x28>
  } else {
    /* Port is configured as output */
    PortData = GPIO_PDD_GetPortDataOutput(BitIoLdd7_MODULE_BASE_ADDRESS) & BitIoLdd7_PORT_MASK;
    1906:	4b06      	ldr	r3, [pc, #24]	; (1920 <BitIoLdd7_GetVal+0x38>)
    1908:	681a      	ldr	r2, [r3, #0]
    190a:	2301      	movs	r3, #1
    190c:	4013      	ands	r3, r2
    190e:	60fb      	str	r3, [r7, #12]
  }
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
    1910:	68fb      	ldr	r3, [r7, #12]
    1912:	1e5a      	subs	r2, r3, #1
    1914:	4193      	sbcs	r3, r2
    1916:	b2db      	uxtb	r3, r3
}
    1918:	1c18      	adds	r0, r3, #0
    191a:	46bd      	mov	sp, r7
    191c:	b004      	add	sp, #16
    191e:	bd80      	pop	{r7, pc}
    1920:	f80ff040 	.word	0xf80ff040

00001924 <BitIoLdd7_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd7_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1924:	b580      	push	{r7, lr}
    1926:	b082      	sub	sp, #8
    1928:	af00      	add	r7, sp, #0
    192a:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd7_MODULE_BASE_ADDRESS, BitIoLdd7_PORT_MASK);
    192c:	4b02      	ldr	r3, [pc, #8]	; (1938 <BitIoLdd7_SetVal+0x14>)
    192e:	2201      	movs	r2, #1
    1930:	605a      	str	r2, [r3, #4]
}
    1932:	46bd      	mov	sp, r7
    1934:	b002      	add	sp, #8
    1936:	bd80      	pop	{r7, pc}
    1938:	f80ff040 	.word	0xf80ff040

0000193c <BitIoLdd6_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd6_Init(LDD_TUserData *UserDataPtr)
{
    193c:	b580      	push	{r7, lr}
    193e:	b084      	sub	sp, #16
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd6_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1944:	4b10      	ldr	r3, [pc, #64]	; (1988 <BitIoLdd6_Init+0x4c>)
    1946:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1948:	68fb      	ldr	r3, [r7, #12]
    194a:	687a      	ldr	r2, [r7, #4]
    194c:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=4 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x04);
    194e:	4b0f      	ldr	r3, [pc, #60]	; (198c <BitIoLdd6_Init+0x50>)
    1950:	4a0e      	ldr	r2, [pc, #56]	; (198c <BitIoLdd6_Init+0x50>)
    1952:	6952      	ldr	r2, [r2, #20]
    1954:	2104      	movs	r1, #4
    1956:	430a      	orrs	r2, r1
    1958:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOD_PDOR: PDO&=~4 */
  GPIOD_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x04));
    195a:	4b0c      	ldr	r3, [pc, #48]	; (198c <BitIoLdd6_Init+0x50>)
    195c:	4a0b      	ldr	r2, [pc, #44]	; (198c <BitIoLdd6_Init+0x50>)
    195e:	6812      	ldr	r2, [r2, #0]
    1960:	2104      	movs	r1, #4
    1962:	438a      	bics	r2, r1
    1964:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTD_PCR2: ISF=0,MUX=1 */
  PORTD_PCR2 = (uint32_t)((PORTD_PCR2 & (uint32_t)~(uint32_t)(
    1966:	4b0a      	ldr	r3, [pc, #40]	; (1990 <BitIoLdd6_Init+0x54>)
    1968:	4a09      	ldr	r2, [pc, #36]	; (1990 <BitIoLdd6_Init+0x54>)
    196a:	6891      	ldr	r1, [r2, #8]
    196c:	4a09      	ldr	r2, [pc, #36]	; (1994 <BitIoLdd6_Init+0x58>)
    196e:	400a      	ands	r2, r1
    1970:	2180      	movs	r1, #128	; 0x80
    1972:	0049      	lsls	r1, r1, #1
    1974:	430a      	orrs	r2, r1
    1976:	609a      	str	r2, [r3, #8]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd6_ID,DeviceDataPrv);
    1978:	4b07      	ldr	r3, [pc, #28]	; (1998 <BitIoLdd6_Init+0x5c>)
    197a:	68fa      	ldr	r2, [r7, #12]
    197c:	62da      	str	r2, [r3, #44]	; 0x2c
  return ((LDD_TDeviceData *)DeviceDataPrv);
    197e:	68fb      	ldr	r3, [r7, #12]
}
    1980:	1c18      	adds	r0, r3, #0
    1982:	46bd      	mov	sp, r7
    1984:	b004      	add	sp, #16
    1986:	bd80      	pop	{r7, pc}
    1988:	1ffff15c 	.word	0x1ffff15c
    198c:	400ff0c0 	.word	0x400ff0c0
    1990:	4004c000 	.word	0x4004c000
    1994:	fefff8ff 	.word	0xfefff8ff
    1998:	1ffff03c 	.word	0x1ffff03c

0000199c <BitIoLdd6_SetDir>:
**                           <false> - Input
**                           <true> - Output
*/
/* ===================================================================*/
void BitIoLdd6_SetDir(LDD_TDeviceData *DeviceDataPtr, bool Dir)
{
    199c:	b580      	push	{r7, lr}
    199e:	b082      	sub	sp, #8
    19a0:	af00      	add	r7, sp, #0
    19a2:	6078      	str	r0, [r7, #4]
    19a4:	1c0a      	adds	r2, r1, #0
    19a6:	1cfb      	adds	r3, r7, #3
    19a8:	701a      	strb	r2, [r3, #0]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if (Dir) {
    19aa:	1cfb      	adds	r3, r7, #3
    19ac:	781b      	ldrb	r3, [r3, #0]
    19ae:	2b00      	cmp	r3, #0
    19b0:	d006      	beq.n	19c0 <BitIoLdd6_SetDir+0x24>
    /* Output */
    GPIO_PDD_SetPortOutputDirectionMask(BitIoLdd6_MODULE_BASE_ADDRESS, BitIoLdd6_PORT_MASK);
    19b2:	4b08      	ldr	r3, [pc, #32]	; (19d4 <BitIoLdd6_SetDir+0x38>)
    19b4:	4a07      	ldr	r2, [pc, #28]	; (19d4 <BitIoLdd6_SetDir+0x38>)
    19b6:	6952      	ldr	r2, [r2, #20]
    19b8:	2104      	movs	r1, #4
    19ba:	430a      	orrs	r2, r1
    19bc:	615a      	str	r2, [r3, #20]
    19be:	e005      	b.n	19cc <BitIoLdd6_SetDir+0x30>
  } else {
    /* Input */
    GPIO_PDD_SetPortInputDirectionMask(BitIoLdd6_MODULE_BASE_ADDRESS, BitIoLdd6_PORT_MASK);
    19c0:	4b04      	ldr	r3, [pc, #16]	; (19d4 <BitIoLdd6_SetDir+0x38>)
    19c2:	4a04      	ldr	r2, [pc, #16]	; (19d4 <BitIoLdd6_SetDir+0x38>)
    19c4:	6952      	ldr	r2, [r2, #20]
    19c6:	2104      	movs	r1, #4
    19c8:	438a      	bics	r2, r1
    19ca:	615a      	str	r2, [r3, #20]
  }
}
    19cc:	46bd      	mov	sp, r7
    19ce:	b002      	add	sp, #8
    19d0:	bd80      	pop	{r7, pc}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	f80ff0c0 	.word	0xf80ff0c0

000019d8 <BitIoLdd6_GetVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd6_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
    19d8:	b580      	push	{r7, lr}
    19da:	b084      	sub	sp, #16
    19dc:	af00      	add	r7, sp, #0
    19de:	6078      	str	r0, [r7, #4]
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if ((GPIO_PDD_GetPortDirection(BitIoLdd6_MODULE_BASE_ADDRESS) & BitIoLdd6_PORT_MASK) == 0U) {
    19e0:	4b0b      	ldr	r3, [pc, #44]	; (1a10 <BitIoLdd6_GetVal+0x38>)
    19e2:	695a      	ldr	r2, [r3, #20]
    19e4:	2304      	movs	r3, #4
    19e6:	4013      	ands	r3, r2
    19e8:	d105      	bne.n	19f6 <BitIoLdd6_GetVal+0x1e>
    /* Port is configured as input */
    PortData = GPIO_PDD_GetPortDataInput(BitIoLdd6_MODULE_BASE_ADDRESS) & BitIoLdd6_PORT_MASK;
    19ea:	4b09      	ldr	r3, [pc, #36]	; (1a10 <BitIoLdd6_GetVal+0x38>)
    19ec:	691a      	ldr	r2, [r3, #16]
    19ee:	2304      	movs	r3, #4
    19f0:	4013      	ands	r3, r2
    19f2:	60fb      	str	r3, [r7, #12]
    19f4:	e004      	b.n	1a00 <BitIoLdd6_GetVal+0x28>
  } else {
    /* Port is configured as output */
    PortData = GPIO_PDD_GetPortDataOutput(BitIoLdd6_MODULE_BASE_ADDRESS) & BitIoLdd6_PORT_MASK;
    19f6:	4b06      	ldr	r3, [pc, #24]	; (1a10 <BitIoLdd6_GetVal+0x38>)
    19f8:	681a      	ldr	r2, [r3, #0]
    19fa:	2304      	movs	r3, #4
    19fc:	4013      	ands	r3, r2
    19fe:	60fb      	str	r3, [r7, #12]
  }
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	1e5a      	subs	r2, r3, #1
    1a04:	4193      	sbcs	r3, r2
    1a06:	b2db      	uxtb	r3, r3
}
    1a08:	1c18      	adds	r0, r3, #0
    1a0a:	46bd      	mov	sp, r7
    1a0c:	b004      	add	sp, #16
    1a0e:	bd80      	pop	{r7, pc}
    1a10:	f80ff0c0 	.word	0xf80ff0c0

00001a14 <BitIoLdd6_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd6_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1a14:	b580      	push	{r7, lr}
    1a16:	b082      	sub	sp, #8
    1a18:	af00      	add	r7, sp, #0
    1a1a:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd6_MODULE_BASE_ADDRESS, BitIoLdd6_PORT_MASK);
    1a1c:	4b02      	ldr	r3, [pc, #8]	; (1a28 <BitIoLdd6_SetVal+0x14>)
    1a1e:	2204      	movs	r2, #4
    1a20:	605a      	str	r2, [r3, #4]
}
    1a22:	46bd      	mov	sp, r7
    1a24:	b002      	add	sp, #8
    1a26:	bd80      	pop	{r7, pc}
    1a28:	f80ff0c0 	.word	0xf80ff0c0

00001a2c <BitIoLdd5_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd5_Init(LDD_TUserData *UserDataPtr)
{
    1a2c:	b580      	push	{r7, lr}
    1a2e:	b084      	sub	sp, #16
    1a30:	af00      	add	r7, sp, #0
    1a32:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd5_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1a34:	4b10      	ldr	r3, [pc, #64]	; (1a78 <BitIoLdd5_Init+0x4c>)
    1a36:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1a38:	68fb      	ldr	r3, [r7, #12]
    1a3a:	687a      	ldr	r2, [r7, #4]
    1a3c:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOB_PDDR: PDD|=8 */
  GPIOB_PDDR |= GPIO_PDDR_PDD(0x08);
    1a3e:	4b0f      	ldr	r3, [pc, #60]	; (1a7c <BitIoLdd5_Init+0x50>)
    1a40:	4a0e      	ldr	r2, [pc, #56]	; (1a7c <BitIoLdd5_Init+0x50>)
    1a42:	6952      	ldr	r2, [r2, #20]
    1a44:	2108      	movs	r1, #8
    1a46:	430a      	orrs	r2, r1
    1a48:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOB_PDOR: PDO&=~8 */
  GPIOB_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x08));
    1a4a:	4b0c      	ldr	r3, [pc, #48]	; (1a7c <BitIoLdd5_Init+0x50>)
    1a4c:	4a0b      	ldr	r2, [pc, #44]	; (1a7c <BitIoLdd5_Init+0x50>)
    1a4e:	6812      	ldr	r2, [r2, #0]
    1a50:	2108      	movs	r1, #8
    1a52:	438a      	bics	r2, r1
    1a54:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTB_PCR3: ISF=0,MUX=1 */
  PORTB_PCR3 = (uint32_t)((PORTB_PCR3 & (uint32_t)~(uint32_t)(
    1a56:	4b0a      	ldr	r3, [pc, #40]	; (1a80 <BitIoLdd5_Init+0x54>)
    1a58:	4a09      	ldr	r2, [pc, #36]	; (1a80 <BitIoLdd5_Init+0x54>)
    1a5a:	68d1      	ldr	r1, [r2, #12]
    1a5c:	4a09      	ldr	r2, [pc, #36]	; (1a84 <BitIoLdd5_Init+0x58>)
    1a5e:	400a      	ands	r2, r1
    1a60:	2180      	movs	r1, #128	; 0x80
    1a62:	0049      	lsls	r1, r1, #1
    1a64:	430a      	orrs	r2, r1
    1a66:	60da      	str	r2, [r3, #12]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd5_ID,DeviceDataPrv);
    1a68:	4b07      	ldr	r3, [pc, #28]	; (1a88 <BitIoLdd5_Init+0x5c>)
    1a6a:	68fa      	ldr	r2, [r7, #12]
    1a6c:	629a      	str	r2, [r3, #40]	; 0x28
  return ((LDD_TDeviceData *)DeviceDataPrv);
    1a6e:	68fb      	ldr	r3, [r7, #12]
}
    1a70:	1c18      	adds	r0, r3, #0
    1a72:	46bd      	mov	sp, r7
    1a74:	b004      	add	sp, #16
    1a76:	bd80      	pop	{r7, pc}
    1a78:	1ffff160 	.word	0x1ffff160
    1a7c:	400ff040 	.word	0x400ff040
    1a80:	4004a000 	.word	0x4004a000
    1a84:	fefff8ff 	.word	0xfefff8ff
    1a88:	1ffff03c 	.word	0x1ffff03c

00001a8c <BitIoLdd5_SetDir>:
**                           <false> - Input
**                           <true> - Output
*/
/* ===================================================================*/
void BitIoLdd5_SetDir(LDD_TDeviceData *DeviceDataPtr, bool Dir)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b082      	sub	sp, #8
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	1c0a      	adds	r2, r1, #0
    1a96:	1cfb      	adds	r3, r7, #3
    1a98:	701a      	strb	r2, [r3, #0]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if (Dir) {
    1a9a:	1cfb      	adds	r3, r7, #3
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d006      	beq.n	1ab0 <BitIoLdd5_SetDir+0x24>
    /* Output */
    GPIO_PDD_SetPortOutputDirectionMask(BitIoLdd5_MODULE_BASE_ADDRESS, BitIoLdd5_PORT_MASK);
    1aa2:	4b08      	ldr	r3, [pc, #32]	; (1ac4 <BitIoLdd5_SetDir+0x38>)
    1aa4:	4a07      	ldr	r2, [pc, #28]	; (1ac4 <BitIoLdd5_SetDir+0x38>)
    1aa6:	6952      	ldr	r2, [r2, #20]
    1aa8:	2108      	movs	r1, #8
    1aaa:	430a      	orrs	r2, r1
    1aac:	615a      	str	r2, [r3, #20]
    1aae:	e005      	b.n	1abc <BitIoLdd5_SetDir+0x30>
  } else {
    /* Input */
    GPIO_PDD_SetPortInputDirectionMask(BitIoLdd5_MODULE_BASE_ADDRESS, BitIoLdd5_PORT_MASK);
    1ab0:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <BitIoLdd5_SetDir+0x38>)
    1ab2:	4a04      	ldr	r2, [pc, #16]	; (1ac4 <BitIoLdd5_SetDir+0x38>)
    1ab4:	6952      	ldr	r2, [r2, #20]
    1ab6:	2108      	movs	r1, #8
    1ab8:	438a      	bics	r2, r1
    1aba:	615a      	str	r2, [r3, #20]
  }
}
    1abc:	46bd      	mov	sp, r7
    1abe:	b002      	add	sp, #8
    1ac0:	bd80      	pop	{r7, pc}
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	f80ff040 	.word	0xf80ff040

00001ac8 <BitIoLdd5_GetVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd5_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1ac8:	b580      	push	{r7, lr}
    1aca:	b084      	sub	sp, #16
    1acc:	af00      	add	r7, sp, #0
    1ace:	6078      	str	r0, [r7, #4]
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if ((GPIO_PDD_GetPortDirection(BitIoLdd5_MODULE_BASE_ADDRESS) & BitIoLdd5_PORT_MASK) == 0U) {
    1ad0:	4b0b      	ldr	r3, [pc, #44]	; (1b00 <BitIoLdd5_GetVal+0x38>)
    1ad2:	695a      	ldr	r2, [r3, #20]
    1ad4:	2308      	movs	r3, #8
    1ad6:	4013      	ands	r3, r2
    1ad8:	d105      	bne.n	1ae6 <BitIoLdd5_GetVal+0x1e>
    /* Port is configured as input */
    PortData = GPIO_PDD_GetPortDataInput(BitIoLdd5_MODULE_BASE_ADDRESS) & BitIoLdd5_PORT_MASK;
    1ada:	4b09      	ldr	r3, [pc, #36]	; (1b00 <BitIoLdd5_GetVal+0x38>)
    1adc:	691a      	ldr	r2, [r3, #16]
    1ade:	2308      	movs	r3, #8
    1ae0:	4013      	ands	r3, r2
    1ae2:	60fb      	str	r3, [r7, #12]
    1ae4:	e004      	b.n	1af0 <BitIoLdd5_GetVal+0x28>
  } else {
    /* Port is configured as output */
    PortData = GPIO_PDD_GetPortDataOutput(BitIoLdd5_MODULE_BASE_ADDRESS) & BitIoLdd5_PORT_MASK;
    1ae6:	4b06      	ldr	r3, [pc, #24]	; (1b00 <BitIoLdd5_GetVal+0x38>)
    1ae8:	681a      	ldr	r2, [r3, #0]
    1aea:	2308      	movs	r3, #8
    1aec:	4013      	ands	r3, r2
    1aee:	60fb      	str	r3, [r7, #12]
  }
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
    1af0:	68fb      	ldr	r3, [r7, #12]
    1af2:	1e5a      	subs	r2, r3, #1
    1af4:	4193      	sbcs	r3, r2
    1af6:	b2db      	uxtb	r3, r3
}
    1af8:	1c18      	adds	r0, r3, #0
    1afa:	46bd      	mov	sp, r7
    1afc:	b004      	add	sp, #16
    1afe:	bd80      	pop	{r7, pc}
    1b00:	f80ff040 	.word	0xf80ff040

00001b04 <BitIoLdd5_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd5_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1b04:	b580      	push	{r7, lr}
    1b06:	b082      	sub	sp, #8
    1b08:	af00      	add	r7, sp, #0
    1b0a:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd5_MODULE_BASE_ADDRESS, BitIoLdd5_PORT_MASK);
    1b0c:	4b02      	ldr	r3, [pc, #8]	; (1b18 <BitIoLdd5_SetVal+0x14>)
    1b0e:	2208      	movs	r2, #8
    1b10:	605a      	str	r2, [r3, #4]
}
    1b12:	46bd      	mov	sp, r7
    1b14:	b002      	add	sp, #8
    1b16:	bd80      	pop	{r7, pc}
    1b18:	f80ff040 	.word	0xf80ff040

00001b1c <BitIoLdd4_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd4_Init(LDD_TUserData *UserDataPtr)
{
    1b1c:	b580      	push	{r7, lr}
    1b1e:	b084      	sub	sp, #16
    1b20:	af00      	add	r7, sp, #0
    1b22:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd4_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1b24:	4b10      	ldr	r3, [pc, #64]	; (1b68 <BitIoLdd4_Init+0x4c>)
    1b26:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1b28:	68fb      	ldr	r3, [r7, #12]
    1b2a:	687a      	ldr	r2, [r7, #4]
    1b2c:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOB_PDDR: PDD|=2 */
  GPIOB_PDDR |= GPIO_PDDR_PDD(0x02);
    1b2e:	4b0f      	ldr	r3, [pc, #60]	; (1b6c <BitIoLdd4_Init+0x50>)
    1b30:	4a0e      	ldr	r2, [pc, #56]	; (1b6c <BitIoLdd4_Init+0x50>)
    1b32:	6952      	ldr	r2, [r2, #20]
    1b34:	2102      	movs	r1, #2
    1b36:	430a      	orrs	r2, r1
    1b38:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOB_PDOR: PDO&=~2 */
  GPIOB_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x02));
    1b3a:	4b0c      	ldr	r3, [pc, #48]	; (1b6c <BitIoLdd4_Init+0x50>)
    1b3c:	4a0b      	ldr	r2, [pc, #44]	; (1b6c <BitIoLdd4_Init+0x50>)
    1b3e:	6812      	ldr	r2, [r2, #0]
    1b40:	2102      	movs	r1, #2
    1b42:	438a      	bics	r2, r1
    1b44:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTB_PCR1: ISF=0,MUX=1 */
  PORTB_PCR1 = (uint32_t)((PORTB_PCR1 & (uint32_t)~(uint32_t)(
    1b46:	4b0a      	ldr	r3, [pc, #40]	; (1b70 <BitIoLdd4_Init+0x54>)
    1b48:	4a09      	ldr	r2, [pc, #36]	; (1b70 <BitIoLdd4_Init+0x54>)
    1b4a:	6851      	ldr	r1, [r2, #4]
    1b4c:	4a09      	ldr	r2, [pc, #36]	; (1b74 <BitIoLdd4_Init+0x58>)
    1b4e:	400a      	ands	r2, r1
    1b50:	2180      	movs	r1, #128	; 0x80
    1b52:	0049      	lsls	r1, r1, #1
    1b54:	430a      	orrs	r2, r1
    1b56:	605a      	str	r2, [r3, #4]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd4_ID,DeviceDataPrv);
    1b58:	4b07      	ldr	r3, [pc, #28]	; (1b78 <BitIoLdd4_Init+0x5c>)
    1b5a:	68fa      	ldr	r2, [r7, #12]
    1b5c:	625a      	str	r2, [r3, #36]	; 0x24
  return ((LDD_TDeviceData *)DeviceDataPrv);
    1b5e:	68fb      	ldr	r3, [r7, #12]
}
    1b60:	1c18      	adds	r0, r3, #0
    1b62:	46bd      	mov	sp, r7
    1b64:	b004      	add	sp, #16
    1b66:	bd80      	pop	{r7, pc}
    1b68:	1ffff164 	.word	0x1ffff164
    1b6c:	400ff040 	.word	0x400ff040
    1b70:	4004a000 	.word	0x4004a000
    1b74:	fefff8ff 	.word	0xfefff8ff
    1b78:	1ffff03c 	.word	0x1ffff03c

00001b7c <BitIoLdd4_SetDir>:
**                           <false> - Input
**                           <true> - Output
*/
/* ===================================================================*/
void BitIoLdd4_SetDir(LDD_TDeviceData *DeviceDataPtr, bool Dir)
{
    1b7c:	b580      	push	{r7, lr}
    1b7e:	b082      	sub	sp, #8
    1b80:	af00      	add	r7, sp, #0
    1b82:	6078      	str	r0, [r7, #4]
    1b84:	1c0a      	adds	r2, r1, #0
    1b86:	1cfb      	adds	r3, r7, #3
    1b88:	701a      	strb	r2, [r3, #0]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if (Dir) {
    1b8a:	1cfb      	adds	r3, r7, #3
    1b8c:	781b      	ldrb	r3, [r3, #0]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d006      	beq.n	1ba0 <BitIoLdd4_SetDir+0x24>
    /* Output */
    GPIO_PDD_SetPortOutputDirectionMask(BitIoLdd4_MODULE_BASE_ADDRESS, BitIoLdd4_PORT_MASK);
    1b92:	4b08      	ldr	r3, [pc, #32]	; (1bb4 <BitIoLdd4_SetDir+0x38>)
    1b94:	4a07      	ldr	r2, [pc, #28]	; (1bb4 <BitIoLdd4_SetDir+0x38>)
    1b96:	6952      	ldr	r2, [r2, #20]
    1b98:	2102      	movs	r1, #2
    1b9a:	430a      	orrs	r2, r1
    1b9c:	615a      	str	r2, [r3, #20]
    1b9e:	e005      	b.n	1bac <BitIoLdd4_SetDir+0x30>
  } else {
    /* Input */
    GPIO_PDD_SetPortInputDirectionMask(BitIoLdd4_MODULE_BASE_ADDRESS, BitIoLdd4_PORT_MASK);
    1ba0:	4b04      	ldr	r3, [pc, #16]	; (1bb4 <BitIoLdd4_SetDir+0x38>)
    1ba2:	4a04      	ldr	r2, [pc, #16]	; (1bb4 <BitIoLdd4_SetDir+0x38>)
    1ba4:	6952      	ldr	r2, [r2, #20]
    1ba6:	2102      	movs	r1, #2
    1ba8:	438a      	bics	r2, r1
    1baa:	615a      	str	r2, [r3, #20]
  }
}
    1bac:	46bd      	mov	sp, r7
    1bae:	b002      	add	sp, #8
    1bb0:	bd80      	pop	{r7, pc}
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	f80ff040 	.word	0xf80ff040

00001bb8 <BitIoLdd4_GetVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd4_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1bb8:	b580      	push	{r7, lr}
    1bba:	b084      	sub	sp, #16
    1bbc:	af00      	add	r7, sp, #0
    1bbe:	6078      	str	r0, [r7, #4]
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if ((GPIO_PDD_GetPortDirection(BitIoLdd4_MODULE_BASE_ADDRESS) & BitIoLdd4_PORT_MASK) == 0U) {
    1bc0:	4b0b      	ldr	r3, [pc, #44]	; (1bf0 <BitIoLdd4_GetVal+0x38>)
    1bc2:	695a      	ldr	r2, [r3, #20]
    1bc4:	2302      	movs	r3, #2
    1bc6:	4013      	ands	r3, r2
    1bc8:	d105      	bne.n	1bd6 <BitIoLdd4_GetVal+0x1e>
    /* Port is configured as input */
    PortData = GPIO_PDD_GetPortDataInput(BitIoLdd4_MODULE_BASE_ADDRESS) & BitIoLdd4_PORT_MASK;
    1bca:	4b09      	ldr	r3, [pc, #36]	; (1bf0 <BitIoLdd4_GetVal+0x38>)
    1bcc:	691a      	ldr	r2, [r3, #16]
    1bce:	2302      	movs	r3, #2
    1bd0:	4013      	ands	r3, r2
    1bd2:	60fb      	str	r3, [r7, #12]
    1bd4:	e004      	b.n	1be0 <BitIoLdd4_GetVal+0x28>
  } else {
    /* Port is configured as output */
    PortData = GPIO_PDD_GetPortDataOutput(BitIoLdd4_MODULE_BASE_ADDRESS) & BitIoLdd4_PORT_MASK;
    1bd6:	4b06      	ldr	r3, [pc, #24]	; (1bf0 <BitIoLdd4_GetVal+0x38>)
    1bd8:	681a      	ldr	r2, [r3, #0]
    1bda:	2302      	movs	r3, #2
    1bdc:	4013      	ands	r3, r2
    1bde:	60fb      	str	r3, [r7, #12]
  }
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
    1be0:	68fb      	ldr	r3, [r7, #12]
    1be2:	1e5a      	subs	r2, r3, #1
    1be4:	4193      	sbcs	r3, r2
    1be6:	b2db      	uxtb	r3, r3
}
    1be8:	1c18      	adds	r0, r3, #0
    1bea:	46bd      	mov	sp, r7
    1bec:	b004      	add	sp, #16
    1bee:	bd80      	pop	{r7, pc}
    1bf0:	f80ff040 	.word	0xf80ff040

00001bf4 <BitIoLdd4_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd4_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1bf4:	b580      	push	{r7, lr}
    1bf6:	b082      	sub	sp, #8
    1bf8:	af00      	add	r7, sp, #0
    1bfa:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd4_MODULE_BASE_ADDRESS, BitIoLdd4_PORT_MASK);
    1bfc:	4b02      	ldr	r3, [pc, #8]	; (1c08 <BitIoLdd4_SetVal+0x14>)
    1bfe:	2202      	movs	r2, #2
    1c00:	605a      	str	r2, [r3, #4]
}
    1c02:	46bd      	mov	sp, r7
    1c04:	b002      	add	sp, #8
    1c06:	bd80      	pop	{r7, pc}
    1c08:	f80ff040 	.word	0xf80ff040

00001c0c <BitIoLdd3_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd3_Init(LDD_TUserData *UserDataPtr)
{
    1c0c:	b580      	push	{r7, lr}
    1c0e:	b084      	sub	sp, #16
    1c10:	af00      	add	r7, sp, #0
    1c12:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd3_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1c14:	4b11      	ldr	r3, [pc, #68]	; (1c5c <BitIoLdd3_Init+0x50>)
    1c16:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1c18:	68fb      	ldr	r3, [r7, #12]
    1c1a:	687a      	ldr	r2, [r7, #4]
    1c1c:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOA_PDDR: PDD|=0x2000 */
  GPIOA_PDDR |= GPIO_PDDR_PDD(0x2000);
    1c1e:	4b10      	ldr	r3, [pc, #64]	; (1c60 <BitIoLdd3_Init+0x54>)
    1c20:	4a0f      	ldr	r2, [pc, #60]	; (1c60 <BitIoLdd3_Init+0x54>)
    1c22:	6952      	ldr	r2, [r2, #20]
    1c24:	2180      	movs	r1, #128	; 0x80
    1c26:	0189      	lsls	r1, r1, #6
    1c28:	430a      	orrs	r2, r1
    1c2a:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOA_PDOR: PDO&=~0x2000 */
  GPIOA_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x2000));
    1c2c:	4b0c      	ldr	r3, [pc, #48]	; (1c60 <BitIoLdd3_Init+0x54>)
    1c2e:	4a0c      	ldr	r2, [pc, #48]	; (1c60 <BitIoLdd3_Init+0x54>)
    1c30:	6811      	ldr	r1, [r2, #0]
    1c32:	4a0c      	ldr	r2, [pc, #48]	; (1c64 <BitIoLdd3_Init+0x58>)
    1c34:	400a      	ands	r2, r1
    1c36:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTA_PCR13: ISF=0,MUX=1 */
  PORTA_PCR13 = (uint32_t)((PORTA_PCR13 & (uint32_t)~(uint32_t)(
    1c38:	4b0b      	ldr	r3, [pc, #44]	; (1c68 <BitIoLdd3_Init+0x5c>)
    1c3a:	4a0b      	ldr	r2, [pc, #44]	; (1c68 <BitIoLdd3_Init+0x5c>)
    1c3c:	6b51      	ldr	r1, [r2, #52]	; 0x34
    1c3e:	4a0b      	ldr	r2, [pc, #44]	; (1c6c <BitIoLdd3_Init+0x60>)
    1c40:	400a      	ands	r2, r1
    1c42:	2180      	movs	r1, #128	; 0x80
    1c44:	0049      	lsls	r1, r1, #1
    1c46:	430a      	orrs	r2, r1
    1c48:	635a      	str	r2, [r3, #52]	; 0x34
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd3_ID,DeviceDataPrv);
    1c4a:	4b09      	ldr	r3, [pc, #36]	; (1c70 <BitIoLdd3_Init+0x64>)
    1c4c:	68fa      	ldr	r2, [r7, #12]
    1c4e:	609a      	str	r2, [r3, #8]
  return ((LDD_TDeviceData *)DeviceDataPrv);
    1c50:	68fb      	ldr	r3, [r7, #12]
}
    1c52:	1c18      	adds	r0, r3, #0
    1c54:	46bd      	mov	sp, r7
    1c56:	b004      	add	sp, #16
    1c58:	bd80      	pop	{r7, pc}
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	1ffff168 	.word	0x1ffff168
    1c60:	400ff000 	.word	0x400ff000
    1c64:	ffffdfff 	.word	0xffffdfff
    1c68:	40049000 	.word	0x40049000
    1c6c:	fefff8ff 	.word	0xfefff8ff
    1c70:	1ffff03c 	.word	0x1ffff03c

00001c74 <BitIoLdd3_PutVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
void BitIoLdd3_PutVal(LDD_TDeviceData *DeviceDataPtr, bool Val)
{
    1c74:	b580      	push	{r7, lr}
    1c76:	b082      	sub	sp, #8
    1c78:	af00      	add	r7, sp, #0
    1c7a:	6078      	str	r0, [r7, #4]
    1c7c:	1c0a      	adds	r2, r1, #0
    1c7e:	1cfb      	adds	r3, r7, #3
    1c80:	701a      	strb	r2, [r3, #0]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if (Val) {
    1c82:	1cfb      	adds	r3, r7, #3
    1c84:	781b      	ldrb	r3, [r3, #0]
    1c86:	2b00      	cmp	r3, #0
    1c88:	d004      	beq.n	1c94 <BitIoLdd3_PutVal+0x20>
    GPIO_PDD_SetPortDataOutputMask(BitIoLdd3_MODULE_BASE_ADDRESS, BitIoLdd3_PORT_MASK);
    1c8a:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <BitIoLdd3_PutVal+0x30>)
    1c8c:	2280      	movs	r2, #128	; 0x80
    1c8e:	0192      	lsls	r2, r2, #6
    1c90:	605a      	str	r2, [r3, #4]
    1c92:	e003      	b.n	1c9c <BitIoLdd3_PutVal+0x28>
  } else { /* !Val */
    GPIO_PDD_ClearPortDataOutputMask(BitIoLdd3_MODULE_BASE_ADDRESS, BitIoLdd3_PORT_MASK);
    1c94:	4b03      	ldr	r3, [pc, #12]	; (1ca4 <BitIoLdd3_PutVal+0x30>)
    1c96:	2280      	movs	r2, #128	; 0x80
    1c98:	0192      	lsls	r2, r2, #6
    1c9a:	609a      	str	r2, [r3, #8]
  } /* !Val */
}
    1c9c:	46bd      	mov	sp, r7
    1c9e:	b002      	add	sp, #8
    1ca0:	bd80      	pop	{r7, pc}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	f80ff000 	.word	0xf80ff000

00001ca8 <BitIoLdd2_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd2_Init(LDD_TUserData *UserDataPtr)
{
    1ca8:	b580      	push	{r7, lr}
    1caa:	b084      	sub	sp, #16
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd2_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1cb0:	4b11      	ldr	r3, [pc, #68]	; (1cf8 <BitIoLdd2_Init+0x50>)
    1cb2:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1cb4:	68fb      	ldr	r3, [r7, #12]
    1cb6:	687a      	ldr	r2, [r7, #4]
    1cb8:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0200 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0200);
    1cba:	4b10      	ldr	r3, [pc, #64]	; (1cfc <BitIoLdd2_Init+0x54>)
    1cbc:	4a0f      	ldr	r2, [pc, #60]	; (1cfc <BitIoLdd2_Init+0x54>)
    1cbe:	6952      	ldr	r2, [r2, #20]
    1cc0:	2180      	movs	r1, #128	; 0x80
    1cc2:	0089      	lsls	r1, r1, #2
    1cc4:	430a      	orrs	r2, r1
    1cc6:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOC_PDOR: PDO&=~0x0200 */
  GPIOC_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x0200));
    1cc8:	4b0c      	ldr	r3, [pc, #48]	; (1cfc <BitIoLdd2_Init+0x54>)
    1cca:	4a0c      	ldr	r2, [pc, #48]	; (1cfc <BitIoLdd2_Init+0x54>)
    1ccc:	6811      	ldr	r1, [r2, #0]
    1cce:	4a0c      	ldr	r2, [pc, #48]	; (1d00 <BitIoLdd2_Init+0x58>)
    1cd0:	400a      	ands	r2, r1
    1cd2:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTC_PCR9: ISF=0,MUX=1 */
  PORTC_PCR9 = (uint32_t)((PORTC_PCR9 & (uint32_t)~(uint32_t)(
    1cd4:	4b0b      	ldr	r3, [pc, #44]	; (1d04 <BitIoLdd2_Init+0x5c>)
    1cd6:	4a0b      	ldr	r2, [pc, #44]	; (1d04 <BitIoLdd2_Init+0x5c>)
    1cd8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    1cda:	4a0b      	ldr	r2, [pc, #44]	; (1d08 <BitIoLdd2_Init+0x60>)
    1cdc:	400a      	ands	r2, r1
    1cde:	2180      	movs	r1, #128	; 0x80
    1ce0:	0049      	lsls	r1, r1, #1
    1ce2:	430a      	orrs	r2, r1
    1ce4:	625a      	str	r2, [r3, #36]	; 0x24
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd2_ID,DeviceDataPrv);
    1ce6:	4b09      	ldr	r3, [pc, #36]	; (1d0c <BitIoLdd2_Init+0x64>)
    1ce8:	68fa      	ldr	r2, [r7, #12]
    1cea:	605a      	str	r2, [r3, #4]
  return ((LDD_TDeviceData *)DeviceDataPrv);
    1cec:	68fb      	ldr	r3, [r7, #12]
}
    1cee:	1c18      	adds	r0, r3, #0
    1cf0:	46bd      	mov	sp, r7
    1cf2:	b004      	add	sp, #16
    1cf4:	bd80      	pop	{r7, pc}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	1ffff16c 	.word	0x1ffff16c
    1cfc:	400ff080 	.word	0x400ff080
    1d00:	fffffdff 	.word	0xfffffdff
    1d04:	4004b000 	.word	0x4004b000
    1d08:	fefff8ff 	.word	0xfefff8ff
    1d0c:	1ffff03c 	.word	0x1ffff03c

00001d10 <BitIoLdd2_PutVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
void BitIoLdd2_PutVal(LDD_TDeviceData *DeviceDataPtr, bool Val)
{
    1d10:	b580      	push	{r7, lr}
    1d12:	b082      	sub	sp, #8
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	1c0a      	adds	r2, r1, #0
    1d1a:	1cfb      	adds	r3, r7, #3
    1d1c:	701a      	strb	r2, [r3, #0]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if (Val) {
    1d1e:	1cfb      	adds	r3, r7, #3
    1d20:	781b      	ldrb	r3, [r3, #0]
    1d22:	2b00      	cmp	r3, #0
    1d24:	d004      	beq.n	1d30 <BitIoLdd2_PutVal+0x20>
    GPIO_PDD_SetPortDataOutputMask(BitIoLdd2_MODULE_BASE_ADDRESS, BitIoLdd2_PORT_MASK);
    1d26:	4b06      	ldr	r3, [pc, #24]	; (1d40 <BitIoLdd2_PutVal+0x30>)
    1d28:	2280      	movs	r2, #128	; 0x80
    1d2a:	0092      	lsls	r2, r2, #2
    1d2c:	605a      	str	r2, [r3, #4]
    1d2e:	e003      	b.n	1d38 <BitIoLdd2_PutVal+0x28>
  } else { /* !Val */
    GPIO_PDD_ClearPortDataOutputMask(BitIoLdd2_MODULE_BASE_ADDRESS, BitIoLdd2_PORT_MASK);
    1d30:	4b03      	ldr	r3, [pc, #12]	; (1d40 <BitIoLdd2_PutVal+0x30>)
    1d32:	2280      	movs	r2, #128	; 0x80
    1d34:	0092      	lsls	r2, r2, #2
    1d36:	609a      	str	r2, [r3, #8]
  } /* !Val */
}
    1d38:	46bd      	mov	sp, r7
    1d3a:	b002      	add	sp, #8
    1d3c:	bd80      	pop	{r7, pc}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	f80ff080 	.word	0xf80ff080

00001d44 <BitIoLdd11_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd11_Init(LDD_TUserData *UserDataPtr)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b084      	sub	sp, #16
    1d48:	af00      	add	r7, sp, #0
    1d4a:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd11_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1d4c:	4b09      	ldr	r3, [pc, #36]	; (1d74 <BitIoLdd11_Init+0x30>)
    1d4e:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1d50:	68fb      	ldr	r3, [r7, #12]
    1d52:	687a      	ldr	r2, [r7, #4]
    1d54:	601a      	str	r2, [r3, #0]
  /* Configure pin as input */
  /* GPIOD_PDDR: PDD&=~8 */
  GPIOD_PDDR &= (uint32_t)~(uint32_t)(GPIO_PDDR_PDD(0x08));
    1d56:	4b08      	ldr	r3, [pc, #32]	; (1d78 <BitIoLdd11_Init+0x34>)
    1d58:	4a07      	ldr	r2, [pc, #28]	; (1d78 <BitIoLdd11_Init+0x34>)
    1d5a:	6952      	ldr	r2, [r2, #20]
    1d5c:	2108      	movs	r1, #8
    1d5e:	438a      	bics	r2, r1
    1d60:	615a      	str	r2, [r3, #20]
  /* pin is shared so Port Control register is not set */
  /* Initialization of Port Control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd11_ID,DeviceDataPrv);
    1d62:	4b06      	ldr	r3, [pc, #24]	; (1d7c <BitIoLdd11_Init+0x38>)
    1d64:	68fa      	ldr	r2, [r7, #12]
    1d66:	645a      	str	r2, [r3, #68]	; 0x44
  return ((LDD_TDeviceData *)DeviceDataPrv);
    1d68:	68fb      	ldr	r3, [r7, #12]
}
    1d6a:	1c18      	adds	r0, r3, #0
    1d6c:	46bd      	mov	sp, r7
    1d6e:	b004      	add	sp, #16
    1d70:	bd80      	pop	{r7, pc}
    1d72:	46c0      	nop			; (mov r8, r8)
    1d74:	1ffff170 	.word	0x1ffff170
    1d78:	400ff0c0 	.word	0x400ff0c0
    1d7c:	1ffff03c 	.word	0x1ffff03c

00001d80 <BitIoLdd11_GetVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd11_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1d80:	b580      	push	{r7, lr}
    1d82:	b084      	sub	sp, #16
    1d84:	af00      	add	r7, sp, #0
    1d86:	6078      	str	r0, [r7, #4]
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  PortData = GPIO_PDD_GetPortDataInput(BitIoLdd11_MODULE_BASE_ADDRESS) & BitIoLdd11_PORT_MASK;
    1d88:	4b06      	ldr	r3, [pc, #24]	; (1da4 <BitIoLdd11_GetVal+0x24>)
    1d8a:	691a      	ldr	r2, [r3, #16]
    1d8c:	2308      	movs	r3, #8
    1d8e:	4013      	ands	r3, r2
    1d90:	60fb      	str	r3, [r7, #12]
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
    1d92:	68fb      	ldr	r3, [r7, #12]
    1d94:	1e5a      	subs	r2, r3, #1
    1d96:	4193      	sbcs	r3, r2
    1d98:	b2db      	uxtb	r3, r3
}
    1d9a:	1c18      	adds	r0, r3, #0
    1d9c:	46bd      	mov	sp, r7
    1d9e:	b004      	add	sp, #16
    1da0:	bd80      	pop	{r7, pc}
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	f80ff0c0 	.word	0xf80ff0c0

00001da8 <BitIoLdd10_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd10_Init(LDD_TUserData *UserDataPtr)
{
    1da8:	b580      	push	{r7, lr}
    1daa:	b084      	sub	sp, #16
    1dac:	af00      	add	r7, sp, #0
    1dae:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd10_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1db0:	4b10      	ldr	r3, [pc, #64]	; (1df4 <BitIoLdd10_Init+0x4c>)
    1db2:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1db4:	68fb      	ldr	r3, [r7, #12]
    1db6:	687a      	ldr	r2, [r7, #4]
    1db8:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=4 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x04);
    1dba:	4b0f      	ldr	r3, [pc, #60]	; (1df8 <BitIoLdd10_Init+0x50>)
    1dbc:	4a0e      	ldr	r2, [pc, #56]	; (1df8 <BitIoLdd10_Init+0x50>)
    1dbe:	6952      	ldr	r2, [r2, #20]
    1dc0:	2104      	movs	r1, #4
    1dc2:	430a      	orrs	r2, r1
    1dc4:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOC_PDOR: PDO&=~4 */
  GPIOC_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x04));
    1dc6:	4b0c      	ldr	r3, [pc, #48]	; (1df8 <BitIoLdd10_Init+0x50>)
    1dc8:	4a0b      	ldr	r2, [pc, #44]	; (1df8 <BitIoLdd10_Init+0x50>)
    1dca:	6812      	ldr	r2, [r2, #0]
    1dcc:	2104      	movs	r1, #4
    1dce:	438a      	bics	r2, r1
    1dd0:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTC_PCR2: ISF=0,MUX=1 */
  PORTC_PCR2 = (uint32_t)((PORTC_PCR2 & (uint32_t)~(uint32_t)(
    1dd2:	4b0a      	ldr	r3, [pc, #40]	; (1dfc <BitIoLdd10_Init+0x54>)
    1dd4:	4a09      	ldr	r2, [pc, #36]	; (1dfc <BitIoLdd10_Init+0x54>)
    1dd6:	6891      	ldr	r1, [r2, #8]
    1dd8:	4a09      	ldr	r2, [pc, #36]	; (1e00 <BitIoLdd10_Init+0x58>)
    1dda:	400a      	ands	r2, r1
    1ddc:	2180      	movs	r1, #128	; 0x80
    1dde:	0049      	lsls	r1, r1, #1
    1de0:	430a      	orrs	r2, r1
    1de2:	609a      	str	r2, [r3, #8]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd10_ID,DeviceDataPrv);
    1de4:	4b07      	ldr	r3, [pc, #28]	; (1e04 <BitIoLdd10_Init+0x5c>)
    1de6:	68fa      	ldr	r2, [r7, #12]
    1de8:	641a      	str	r2, [r3, #64]	; 0x40
  return ((LDD_TDeviceData *)DeviceDataPrv);
    1dea:	68fb      	ldr	r3, [r7, #12]
}
    1dec:	1c18      	adds	r0, r3, #0
    1dee:	46bd      	mov	sp, r7
    1df0:	b004      	add	sp, #16
    1df2:	bd80      	pop	{r7, pc}
    1df4:	1ffff174 	.word	0x1ffff174
    1df8:	400ff080 	.word	0x400ff080
    1dfc:	4004b000 	.word	0x4004b000
    1e00:	fefff8ff 	.word	0xfefff8ff
    1e04:	1ffff03c 	.word	0x1ffff03c

00001e08 <BitIoLdd10_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd10_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1e08:	b580      	push	{r7, lr}
    1e0a:	b082      	sub	sp, #8
    1e0c:	af00      	add	r7, sp, #0
    1e0e:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd10_MODULE_BASE_ADDRESS, BitIoLdd10_PORT_MASK);
    1e10:	4b02      	ldr	r3, [pc, #8]	; (1e1c <BitIoLdd10_SetVal+0x14>)
    1e12:	2204      	movs	r2, #4
    1e14:	605a      	str	r2, [r3, #4]
}
    1e16:	46bd      	mov	sp, r7
    1e18:	b002      	add	sp, #8
    1e1a:	bd80      	pop	{r7, pc}
    1e1c:	f80ff080 	.word	0xf80ff080

00001e20 <BitIoLdd1_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd1_Init(LDD_TUserData *UserDataPtr)
{
    1e20:	b580      	push	{r7, lr}
    1e22:	b084      	sub	sp, #16
    1e24:	af00      	add	r7, sp, #0
    1e26:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd1_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1e28:	4b10      	ldr	r3, [pc, #64]	; (1e6c <BitIoLdd1_Init+0x4c>)
    1e2a:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1e2c:	68fb      	ldr	r3, [r7, #12]
    1e2e:	687a      	ldr	r2, [r7, #4]
    1e30:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=2 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x02);
    1e32:	4b0f      	ldr	r3, [pc, #60]	; (1e70 <BitIoLdd1_Init+0x50>)
    1e34:	4a0e      	ldr	r2, [pc, #56]	; (1e70 <BitIoLdd1_Init+0x50>)
    1e36:	6952      	ldr	r2, [r2, #20]
    1e38:	2102      	movs	r1, #2
    1e3a:	430a      	orrs	r2, r1
    1e3c:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOD_PDOR: PDO&=~2 */
  GPIOD_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x02));
    1e3e:	4b0c      	ldr	r3, [pc, #48]	; (1e70 <BitIoLdd1_Init+0x50>)
    1e40:	4a0b      	ldr	r2, [pc, #44]	; (1e70 <BitIoLdd1_Init+0x50>)
    1e42:	6812      	ldr	r2, [r2, #0]
    1e44:	2102      	movs	r1, #2
    1e46:	438a      	bics	r2, r1
    1e48:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTD_PCR1: ISF=0,MUX=1 */
  PORTD_PCR1 = (uint32_t)((PORTD_PCR1 & (uint32_t)~(uint32_t)(
    1e4a:	4b0a      	ldr	r3, [pc, #40]	; (1e74 <BitIoLdd1_Init+0x54>)
    1e4c:	4a09      	ldr	r2, [pc, #36]	; (1e74 <BitIoLdd1_Init+0x54>)
    1e4e:	6851      	ldr	r1, [r2, #4]
    1e50:	4a09      	ldr	r2, [pc, #36]	; (1e78 <BitIoLdd1_Init+0x58>)
    1e52:	400a      	ands	r2, r1
    1e54:	2180      	movs	r1, #128	; 0x80
    1e56:	0049      	lsls	r1, r1, #1
    1e58:	430a      	orrs	r2, r1
    1e5a:	605a      	str	r2, [r3, #4]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd1_ID,DeviceDataPrv);
    1e5c:	4b07      	ldr	r3, [pc, #28]	; (1e7c <BitIoLdd1_Init+0x5c>)
    1e5e:	68fa      	ldr	r2, [r7, #12]
    1e60:	601a      	str	r2, [r3, #0]
  return ((LDD_TDeviceData *)DeviceDataPrv);
    1e62:	68fb      	ldr	r3, [r7, #12]
}
    1e64:	1c18      	adds	r0, r3, #0
    1e66:	46bd      	mov	sp, r7
    1e68:	b004      	add	sp, #16
    1e6a:	bd80      	pop	{r7, pc}
    1e6c:	1ffff178 	.word	0x1ffff178
    1e70:	400ff0c0 	.word	0x400ff0c0
    1e74:	4004c000 	.word	0x4004c000
    1e78:	fefff8ff 	.word	0xfefff8ff
    1e7c:	1ffff03c 	.word	0x1ffff03c

00001e80 <BitIoLdd1_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd1_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b082      	sub	sp, #8
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd1_MODULE_BASE_ADDRESS, BitIoLdd1_PORT_MASK);
    1e88:	4b02      	ldr	r3, [pc, #8]	; (1e94 <BitIoLdd1_SetVal+0x14>)
    1e8a:	2202      	movs	r2, #2
    1e8c:	605a      	str	r2, [r3, #4]
}
    1e8e:	46bd      	mov	sp, r7
    1e90:	b002      	add	sp, #8
    1e92:	bd80      	pop	{r7, pc}
    1e94:	f80ff0c0 	.word	0xf80ff0c0

00001e98 <ASerialLdd2_Init>:
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* ASerialLdd2_Init(LDD_TUserData *UserDataPtr)
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	b084      	sub	sp, #16
    1e9c:	af00      	add	r7, sp, #0
    1e9e:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  ASerialLdd2_TDeviceDataPtr DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1ea0:	4b61      	ldr	r3, [pc, #388]	; (2028 <ASerialLdd2_Init+0x190>)
    1ea2:	60fb      	str	r3, [r7, #12]

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
    1ea4:	68fb      	ldr	r3, [r7, #12]
    1ea6:	2200      	movs	r2, #0
    1ea8:	811a      	strh	r2, [r3, #8]
  DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlock() */
    1eaa:	68fb      	ldr	r3, [r7, #12]
    1eac:	2200      	movs	r2, #0
    1eae:	821a      	strh	r2, [r3, #16]
  DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
    1eb0:	68fb      	ldr	r3, [r7, #12]
    1eb2:	2200      	movs	r2, #0
    1eb4:	60da      	str	r2, [r3, #12]
  /* Clear the transmit counters and pointer */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
    1eb6:	68fb      	ldr	r3, [r7, #12]
    1eb8:	2200      	movs	r2, #0
    1eba:	825a      	strh	r2, [r3, #18]
  DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
    1ebc:	68fb      	ldr	r3, [r7, #12]
    1ebe:	2200      	movs	r2, #0
    1ec0:	831a      	strh	r2, [r3, #24]
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
    1ec2:	68fb      	ldr	r3, [r7, #12]
    1ec4:	2200      	movs	r2, #0
    1ec6:	615a      	str	r2, [r3, #20]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1ec8:	68fb      	ldr	r3, [r7, #12]
    1eca:	687a      	ldr	r2, [r7, #4]
    1ecc:	61da      	str	r2, [r3, #28]
  /* Allocate interrupt vectors */
  /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the global variable */
  INT_UART0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
    1ece:	4b57      	ldr	r3, [pc, #348]	; (202c <ASerialLdd2_Init+0x194>)
    1ed0:	68fa      	ldr	r2, [r7, #12]
    1ed2:	601a      	str	r2, [r3, #0]
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
    1ed4:	4a56      	ldr	r2, [pc, #344]	; (2030 <ASerialLdd2_Init+0x198>)
    1ed6:	4956      	ldr	r1, [pc, #344]	; (2030 <ASerialLdd2_Init+0x198>)
    1ed8:	4b56      	ldr	r3, [pc, #344]	; (2034 <ASerialLdd2_Init+0x19c>)
    1eda:	58cb      	ldr	r3, [r1, r3]
    1edc:	2180      	movs	r1, #128	; 0x80
    1ede:	00c9      	lsls	r1, r1, #3
    1ee0:	4319      	orrs	r1, r3
    1ee2:	4b54      	ldr	r3, [pc, #336]	; (2034 <ASerialLdd2_Init+0x19c>)
    1ee4:	50d1      	str	r1, [r2, r3]
  /* PORTA_PCR1: ISF=0,MUX=2 */
  PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
    1ee6:	4b54      	ldr	r3, [pc, #336]	; (2038 <ASerialLdd2_Init+0x1a0>)
    1ee8:	4a53      	ldr	r2, [pc, #332]	; (2038 <ASerialLdd2_Init+0x1a0>)
    1eea:	6851      	ldr	r1, [r2, #4]
    1eec:	4a53      	ldr	r2, [pc, #332]	; (203c <ASerialLdd2_Init+0x1a4>)
    1eee:	400a      	ands	r2, r1
    1ef0:	2180      	movs	r1, #128	; 0x80
    1ef2:	0089      	lsls	r1, r1, #2
    1ef4:	430a      	orrs	r2, r1
    1ef6:	605a      	str	r2, [r3, #4]
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTA_PCR2: ISF=0,MUX=2 */
  PORTA_PCR2 = (uint32_t)((PORTA_PCR2 & (uint32_t)~(uint32_t)(
    1ef8:	4b4f      	ldr	r3, [pc, #316]	; (2038 <ASerialLdd2_Init+0x1a0>)
    1efa:	4a4f      	ldr	r2, [pc, #316]	; (2038 <ASerialLdd2_Init+0x1a0>)
    1efc:	6891      	ldr	r1, [r2, #8]
    1efe:	4a4f      	ldr	r2, [pc, #316]	; (203c <ASerialLdd2_Init+0x1a4>)
    1f00:	400a      	ands	r2, r1
    1f02:	2180      	movs	r1, #128	; 0x80
    1f04:	0089      	lsls	r1, r1, #2
    1f06:	430a      	orrs	r2, r1
    1f08:	609a      	str	r2, [r3, #8]
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* NVIC_IPR3: PRI_12=0x80 */
  NVIC_IPR3 = (uint32_t)((NVIC_IPR3 & (uint32_t)~(uint32_t)(
    1f0a:	4a4d      	ldr	r2, [pc, #308]	; (2040 <ASerialLdd2_Init+0x1a8>)
    1f0c:	494c      	ldr	r1, [pc, #304]	; (2040 <ASerialLdd2_Init+0x1a8>)
    1f0e:	23c3      	movs	r3, #195	; 0xc3
    1f10:	009b      	lsls	r3, r3, #2
    1f12:	58cb      	ldr	r3, [r1, r3]
    1f14:	21ff      	movs	r1, #255	; 0xff
    1f16:	438b      	bics	r3, r1
    1f18:	2180      	movs	r1, #128	; 0x80
    1f1a:	4319      	orrs	r1, r3
    1f1c:	23c3      	movs	r3, #195	; 0xc3
    1f1e:	009b      	lsls	r3, r3, #2
    1f20:	50d1      	str	r1, [r2, r3]
               NVIC_IP_PRI_12(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_12(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
    1f22:	4b47      	ldr	r3, [pc, #284]	; (2040 <ASerialLdd2_Init+0x1a8>)
    1f24:	4a46      	ldr	r2, [pc, #280]	; (2040 <ASerialLdd2_Init+0x1a8>)
    1f26:	6812      	ldr	r2, [r2, #0]
    1f28:	2180      	movs	r1, #128	; 0x80
    1f2a:	0149      	lsls	r1, r1, #5
    1f2c:	430a      	orrs	r2, r1
    1f2e:	601a      	str	r2, [r3, #0]
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
    1f30:	4b44      	ldr	r3, [pc, #272]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f32:	4a44      	ldr	r2, [pc, #272]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f34:	78d2      	ldrb	r2, [r2, #3]
    1f36:	b2d2      	uxtb	r2, r2
    1f38:	2108      	movs	r1, #8
    1f3a:	438a      	bics	r2, r1
    1f3c:	b2d2      	uxtb	r2, r2
    1f3e:	70da      	strb	r2, [r3, #3]
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
    1f40:	4b40      	ldr	r3, [pc, #256]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f42:	4a40      	ldr	r2, [pc, #256]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f44:	78d2      	ldrb	r2, [r2, #3]
    1f46:	b2d2      	uxtb	r2, r2
    1f48:	2104      	movs	r1, #4
    1f4a:	438a      	bics	r2, r1
    1f4c:	b2d2      	uxtb	r2, r2
    1f4e:	70da      	strb	r2, [r3, #3]
  DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
    1f50:	68fb      	ldr	r3, [r7, #12]
    1f52:	2200      	movs	r2, #0
    1f54:	801a      	strh	r2, [r3, #0]
  DeviceDataPrv->ErrFlag = 0x00U;      /* Reset error flags */
    1f56:	68fb      	ldr	r3, [r7, #12]
    1f58:	2200      	movs	r2, #0
    1f5a:	605a      	str	r2, [r3, #4]
  /* UART0_C1: LOOPS=0,DOZEEN=0,RSRC=0,M=0,WAKE=0,ILT=0,PE=0,PT=0 */
  UART0_C1 = 0x00U;                    /*  Set the C1 register */
    1f5c:	4b39      	ldr	r3, [pc, #228]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f5e:	2200      	movs	r2, #0
    1f60:	709a      	strb	r2, [r3, #2]
  /* UART0_C3: R8T9=0,R9T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
  UART0_C3 = 0x00U;                    /*  Set the C3 register */
    1f62:	4b38      	ldr	r3, [pc, #224]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f64:	2200      	movs	r2, #0
    1f66:	719a      	strb	r2, [r3, #6]
  /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
    1f68:	4b36      	ldr	r3, [pc, #216]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f6a:	2200      	movs	r2, #0
    1f6c:	729a      	strb	r2, [r3, #10]
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
    1f6e:	4b35      	ldr	r3, [pc, #212]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f70:	2200      	movs	r2, #0
    1f72:	715a      	strb	r2, [r3, #5]
  UART0_PDD_SetClockSource(UART0_BASE_PTR, UART0_PDD_PLL_FLL_CLOCK);
    1f74:	4a2e      	ldr	r2, [pc, #184]	; (2030 <ASerialLdd2_Init+0x198>)
    1f76:	492e      	ldr	r1, [pc, #184]	; (2030 <ASerialLdd2_Init+0x198>)
    1f78:	4b33      	ldr	r3, [pc, #204]	; (2048 <ASerialLdd2_Init+0x1b0>)
    1f7a:	58c9      	ldr	r1, [r1, r3]
    1f7c:	4b33      	ldr	r3, [pc, #204]	; (204c <ASerialLdd2_Init+0x1b4>)
    1f7e:	400b      	ands	r3, r1
    1f80:	2180      	movs	r1, #128	; 0x80
    1f82:	04c9      	lsls	r1, r1, #19
    1f84:	4319      	orrs	r1, r3
    1f86:	4b30      	ldr	r3, [pc, #192]	; (2048 <ASerialLdd2_Init+0x1b0>)
    1f88:	50d1      	str	r1, [r2, r3]
  UART0_PDD_SetBaudRate(UART0_BASE_PTR, 46U); /* Set the baud rate register. */
    1f8a:	4b2e      	ldr	r3, [pc, #184]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f8c:	4a2d      	ldr	r2, [pc, #180]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f8e:	7812      	ldrb	r2, [r2, #0]
    1f90:	b2d2      	uxtb	r2, r2
    1f92:	211f      	movs	r1, #31
    1f94:	438a      	bics	r2, r1
    1f96:	b2d2      	uxtb	r2, r2
    1f98:	701a      	strb	r2, [r3, #0]
    1f9a:	4b2a      	ldr	r3, [pc, #168]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1f9c:	222e      	movs	r2, #46	; 0x2e
    1f9e:	705a      	strb	r2, [r3, #1]
  UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
    1fa0:	4b28      	ldr	r3, [pc, #160]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1fa2:	4a28      	ldr	r2, [pc, #160]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1fa4:	7a92      	ldrb	r2, [r2, #10]
    1fa6:	b2d2      	uxtb	r2, r2
    1fa8:	b2d2      	uxtb	r2, r2
    1faa:	211f      	movs	r1, #31
    1fac:	438a      	bics	r2, r1
    1fae:	b2d2      	uxtb	r2, r2
    1fb0:	2103      	movs	r1, #3
    1fb2:	430a      	orrs	r2, r1
    1fb4:	b2d2      	uxtb	r2, r2
    1fb6:	b2d2      	uxtb	r2, r2
    1fb8:	729a      	strb	r2, [r3, #10]
  UART0_PDD_EnableSamplingOnBothEdges(UART0_BASE_PTR, PDD_ENABLE);
    1fba:	4b22      	ldr	r3, [pc, #136]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1fbc:	4a21      	ldr	r2, [pc, #132]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1fbe:	7ad2      	ldrb	r2, [r2, #11]
    1fc0:	b2d2      	uxtb	r2, r2
    1fc2:	b2d2      	uxtb	r2, r2
    1fc4:	2102      	movs	r1, #2
    1fc6:	430a      	orrs	r2, r1
    1fc8:	b2d2      	uxtb	r2, r2
    1fca:	b2d2      	uxtb	r2, r2
    1fcc:	72da      	strb	r2, [r3, #11]
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
    1fce:	4b1d      	ldr	r3, [pc, #116]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1fd0:	4a1c      	ldr	r2, [pc, #112]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1fd2:	78d2      	ldrb	r2, [r2, #3]
    1fd4:	b2d2      	uxtb	r2, r2
    1fd6:	b2d2      	uxtb	r2, r2
    1fd8:	2108      	movs	r1, #8
    1fda:	430a      	orrs	r2, r1
    1fdc:	b2d2      	uxtb	r2, r2
    1fde:	b2d2      	uxtb	r2, r2
    1fe0:	70da      	strb	r2, [r3, #3]
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
    1fe2:	4b18      	ldr	r3, [pc, #96]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1fe4:	4a17      	ldr	r2, [pc, #92]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1fe6:	78d2      	ldrb	r2, [r2, #3]
    1fe8:	b2d2      	uxtb	r2, r2
    1fea:	b2d2      	uxtb	r2, r2
    1fec:	2104      	movs	r1, #4
    1fee:	430a      	orrs	r2, r1
    1ff0:	b2d2      	uxtb	r2, r2
    1ff2:	b2d2      	uxtb	r2, r2
    1ff4:	70da      	strb	r2, [r3, #3]
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER | UART0_PDD_INTERRUPT_PARITY_ERROR | UART0_PDD_INTERRUPT_FRAMING_ERROR | UART0_PDD_INTERRUPT_NOISE_ERROR | UART0_PDD_INTERRUPT_OVERRUN_ERROR )); /* Enable interrupts */
    1ff6:	4b13      	ldr	r3, [pc, #76]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1ff8:	4a12      	ldr	r2, [pc, #72]	; (2044 <ASerialLdd2_Init+0x1ac>)
    1ffa:	78d2      	ldrb	r2, [r2, #3]
    1ffc:	b2d2      	uxtb	r2, r2
    1ffe:	2120      	movs	r1, #32
    2000:	430a      	orrs	r2, r1
    2002:	b2d2      	uxtb	r2, r2
    2004:	70da      	strb	r2, [r3, #3]
    2006:	4b0f      	ldr	r3, [pc, #60]	; (2044 <ASerialLdd2_Init+0x1ac>)
    2008:	4a0e      	ldr	r2, [pc, #56]	; (2044 <ASerialLdd2_Init+0x1ac>)
    200a:	7992      	ldrb	r2, [r2, #6]
    200c:	b2d2      	uxtb	r2, r2
    200e:	210f      	movs	r1, #15
    2010:	430a      	orrs	r2, r1
    2012:	b2d2      	uxtb	r2, r2
    2014:	719a      	strb	r2, [r3, #6]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_ASerialLdd2_ID,DeviceDataPrv);
    2016:	4b0e      	ldr	r3, [pc, #56]	; (2050 <ASerialLdd2_Init+0x1b8>)
    2018:	68fa      	ldr	r2, [r7, #12]
    201a:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((LDD_TDeviceData *)DeviceDataPrv);
    201c:	68fb      	ldr	r3, [r7, #12]
}
    201e:	1c18      	adds	r0, r3, #0
    2020:	46bd      	mov	sp, r7
    2022:	b004      	add	sp, #16
    2024:	bd80      	pop	{r7, pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	1ffff17c 	.word	0x1ffff17c
    202c:	1ffff19c 	.word	0x1ffff19c
    2030:	40047000 	.word	0x40047000
    2034:	00001034 	.word	0x00001034
    2038:	40049000 	.word	0x40049000
    203c:	fefff8ff 	.word	0xfefff8ff
    2040:	e000e100 	.word	0xe000e100
    2044:	4006a000 	.word	0x4006a000
    2048:	00001004 	.word	0x00001004
    204c:	f3ffffff 	.word	0xf3ffffff
    2050:	1ffff03c 	.word	0x1ffff03c

00002054 <ASerialLdd2_ReceiveBlock>:
**                           ERR_BUSY - The previous receive request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError ASerialLdd2_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
    2054:	b580      	push	{r7, lr}
    2056:	b086      	sub	sp, #24
    2058:	af00      	add	r7, sp, #0
    205a:	60f8      	str	r0, [r7, #12]
    205c:	60b9      	str	r1, [r7, #8]
    205e:	1dbb      	adds	r3, r7, #6
    2060:	801a      	strh	r2, [r3, #0]
  ASerialLdd2_TDeviceDataPtr DeviceDataPrv = (ASerialLdd2_TDeviceDataPtr)DeviceDataPtr;
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	617b      	str	r3, [r7, #20]

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    2066:	1dbb      	adds	r3, r7, #6
    2068:	881b      	ldrh	r3, [r3, #0]
    206a:	2b00      	cmp	r3, #0
    206c:	d101      	bne.n	2072 <ASerialLdd2_ReceiveBlock+0x1e>
    return ERR_PARAM_SIZE;             /* If no then error */
    206e:	2384      	movs	r3, #132	; 0x84
    2070:	e033      	b.n	20da <ASerialLdd2_ReceiveBlock+0x86>
  }
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the previous receive operation pending? */
    2072:	697b      	ldr	r3, [r7, #20]
    2074:	8a1b      	ldrh	r3, [r3, #16]
    2076:	2b00      	cmp	r3, #0
    2078:	d001      	beq.n	207e <ASerialLdd2_ReceiveBlock+0x2a>
    return ERR_BUSY;                   /* If yes then error */
    207a:	2308      	movs	r3, #8
    207c:	e02d      	b.n	20da <ASerialLdd2_ReceiveBlock+0x86>
  }
  /* {Default RTOS Adapter} Critical section begin, general PE function is used */
  EnterCritical();
    207e:	1c3b      	adds	r3, r7, #0
    2080:	3313      	adds	r3, #19
    2082:	f3ef 8010 	mrs	r0, PRIMASK
    2086:	b672      	cpsid	i
    2088:	7018      	strb	r0, [r3, #0]
    208a:	4b16      	ldr	r3, [pc, #88]	; (20e4 <ASerialLdd2_ReceiveBlock+0x90>)
    208c:	781b      	ldrb	r3, [r3, #0]
    208e:	b2db      	uxtb	r3, r3
    2090:	3301      	adds	r3, #1
    2092:	b2db      	uxtb	r3, r3
    2094:	4a13      	ldr	r2, [pc, #76]	; (20e4 <ASerialLdd2_ReceiveBlock+0x90>)
    2096:	1c19      	adds	r1, r3, #0
    2098:	7011      	strb	r1, [r2, #0]
    209a:	2b01      	cmp	r3, #1
    209c:	d104      	bne.n	20a8 <ASerialLdd2_ReceiveBlock+0x54>
    209e:	1c3b      	adds	r3, r7, #0
    20a0:	3313      	adds	r3, #19
    20a2:	781a      	ldrb	r2, [r3, #0]
    20a4:	4b10      	ldr	r3, [pc, #64]	; (20e8 <ASerialLdd2_ReceiveBlock+0x94>)
    20a6:	701a      	strb	r2, [r3, #0]
  DeviceDataPrv->InpDataPtr = (uint8_t*)BufferPtr; /* Store a pointer to the input data. */
    20a8:	697b      	ldr	r3, [r7, #20]
    20aa:	68ba      	ldr	r2, [r7, #8]
    20ac:	60da      	str	r2, [r3, #12]
  DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
    20ae:	697b      	ldr	r3, [r7, #20]
    20b0:	1dba      	adds	r2, r7, #6
    20b2:	8812      	ldrh	r2, [r2, #0]
    20b4:	821a      	strh	r2, [r3, #16]
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
    20b6:	697b      	ldr	r3, [r7, #20]
    20b8:	2200      	movs	r2, #0
    20ba:	811a      	strh	r2, [r3, #8]
  /* {Default RTOS Adapter} Critical section end, general PE function is used */
  ExitCritical();
    20bc:	4b09      	ldr	r3, [pc, #36]	; (20e4 <ASerialLdd2_ReceiveBlock+0x90>)
    20be:	781b      	ldrb	r3, [r3, #0]
    20c0:	b2db      	uxtb	r3, r3
    20c2:	3b01      	subs	r3, #1
    20c4:	b2db      	uxtb	r3, r3
    20c6:	4a07      	ldr	r2, [pc, #28]	; (20e4 <ASerialLdd2_ReceiveBlock+0x90>)
    20c8:	1c19      	adds	r1, r3, #0
    20ca:	7011      	strb	r1, [r2, #0]
    20cc:	2b00      	cmp	r3, #0
    20ce:	d103      	bne.n	20d8 <ASerialLdd2_ReceiveBlock+0x84>
    20d0:	4b05      	ldr	r3, [pc, #20]	; (20e8 <ASerialLdd2_ReceiveBlock+0x94>)
    20d2:	7818      	ldrb	r0, [r3, #0]
    20d4:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
    20d8:	2300      	movs	r3, #0
}
    20da:	1c18      	adds	r0, r3, #0
    20dc:	46bd      	mov	sp, r7
    20de:	b006      	add	sp, #24
    20e0:	bd80      	pop	{r7, pc}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	1ffff148 	.word	0x1ffff148
    20e8:	1ffff1e8 	.word	0x1ffff1e8

000020ec <ASerialLdd2_SendBlock>:
**                           ERR_BUSY - The previous transmit request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError ASerialLdd2_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
    20ec:	b580      	push	{r7, lr}
    20ee:	b086      	sub	sp, #24
    20f0:	af00      	add	r7, sp, #0
    20f2:	60f8      	str	r0, [r7, #12]
    20f4:	60b9      	str	r1, [r7, #8]
    20f6:	1dbb      	adds	r3, r7, #6
    20f8:	801a      	strh	r2, [r3, #0]
  ASerialLdd2_TDeviceDataPtr DeviceDataPrv = (ASerialLdd2_TDeviceDataPtr)DeviceDataPtr;
    20fa:	68fb      	ldr	r3, [r7, #12]
    20fc:	617b      	str	r3, [r7, #20]

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    20fe:	1dbb      	adds	r3, r7, #6
    2100:	881b      	ldrh	r3, [r3, #0]
    2102:	2b00      	cmp	r3, #0
    2104:	d101      	bne.n	210a <ASerialLdd2_SendBlock+0x1e>
    return ERR_PARAM_SIZE;             /* If no then error */
    2106:	2384      	movs	r3, #132	; 0x84
    2108:	e048      	b.n	219c <ASerialLdd2_SendBlock+0xb0>
  }
  if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
    210a:	697b      	ldr	r3, [r7, #20]
    210c:	8b1b      	ldrh	r3, [r3, #24]
    210e:	2b00      	cmp	r3, #0
    2110:	d001      	beq.n	2116 <ASerialLdd2_SendBlock+0x2a>
    return ERR_BUSY;                   /* If yes then error */
    2112:	2308      	movs	r3, #8
    2114:	e042      	b.n	219c <ASerialLdd2_SendBlock+0xb0>
  }
  /* {Default RTOS Adapter} Critical section begin, general PE function is used */
  EnterCritical();
    2116:	1c3b      	adds	r3, r7, #0
    2118:	3313      	adds	r3, #19
    211a:	f3ef 8010 	mrs	r0, PRIMASK
    211e:	b672      	cpsid	i
    2120:	7018      	strb	r0, [r3, #0]
    2122:	4b20      	ldr	r3, [pc, #128]	; (21a4 <ASerialLdd2_SendBlock+0xb8>)
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	b2db      	uxtb	r3, r3
    2128:	3301      	adds	r3, #1
    212a:	b2db      	uxtb	r3, r3
    212c:	4a1d      	ldr	r2, [pc, #116]	; (21a4 <ASerialLdd2_SendBlock+0xb8>)
    212e:	1c19      	adds	r1, r3, #0
    2130:	7011      	strb	r1, [r2, #0]
    2132:	2b01      	cmp	r3, #1
    2134:	d104      	bne.n	2140 <ASerialLdd2_SendBlock+0x54>
    2136:	1c3b      	adds	r3, r7, #0
    2138:	3313      	adds	r3, #19
    213a:	781a      	ldrb	r2, [r3, #0]
    213c:	4b1a      	ldr	r3, [pc, #104]	; (21a8 <ASerialLdd2_SendBlock+0xbc>)
    213e:	701a      	strb	r2, [r3, #0]
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
    2140:	697b      	ldr	r3, [r7, #20]
    2142:	68ba      	ldr	r2, [r7, #8]
    2144:	615a      	str	r2, [r3, #20]
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
    2146:	697b      	ldr	r3, [r7, #20]
    2148:	1dba      	adds	r2, r7, #6
    214a:	8812      	ldrh	r2, [r2, #0]
    214c:	831a      	strh	r2, [r3, #24]
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
    214e:	697b      	ldr	r3, [r7, #20]
    2150:	2200      	movs	r2, #0
    2152:	825a      	strh	r2, [r3, #18]
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
    2154:	697b      	ldr	r3, [r7, #20]
    2156:	881b      	ldrh	r3, [r3, #0]
    2158:	2201      	movs	r2, #1
    215a:	4313      	orrs	r3, r2
    215c:	b29a      	uxth	r2, r3
    215e:	697b      	ldr	r3, [r7, #20]
    2160:	801a      	strh	r2, [r3, #0]
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
    2162:	4b12      	ldr	r3, [pc, #72]	; (21ac <ASerialLdd2_SendBlock+0xc0>)
    2164:	4a11      	ldr	r2, [pc, #68]	; (21ac <ASerialLdd2_SendBlock+0xc0>)
    2166:	78d2      	ldrb	r2, [r2, #3]
    2168:	b2d2      	uxtb	r2, r2
    216a:	2180      	movs	r1, #128	; 0x80
    216c:	4249      	negs	r1, r1
    216e:	430a      	orrs	r2, r1
    2170:	b2d2      	uxtb	r2, r2
    2172:	70da      	strb	r2, [r3, #3]
    2174:	4b0d      	ldr	r3, [pc, #52]	; (21ac <ASerialLdd2_SendBlock+0xc0>)
    2176:	4a0d      	ldr	r2, [pc, #52]	; (21ac <ASerialLdd2_SendBlock+0xc0>)
    2178:	7992      	ldrb	r2, [r2, #6]
    217a:	b2d2      	uxtb	r2, r2
    217c:	719a      	strb	r2, [r3, #6]
  /* {Default RTOS Adapter} Critical section end, general PE function is used */
  ExitCritical();
    217e:	4b09      	ldr	r3, [pc, #36]	; (21a4 <ASerialLdd2_SendBlock+0xb8>)
    2180:	781b      	ldrb	r3, [r3, #0]
    2182:	b2db      	uxtb	r3, r3
    2184:	3b01      	subs	r3, #1
    2186:	b2db      	uxtb	r3, r3
    2188:	4a06      	ldr	r2, [pc, #24]	; (21a4 <ASerialLdd2_SendBlock+0xb8>)
    218a:	1c19      	adds	r1, r3, #0
    218c:	7011      	strb	r1, [r2, #0]
    218e:	2b00      	cmp	r3, #0
    2190:	d103      	bne.n	219a <ASerialLdd2_SendBlock+0xae>
    2192:	4b05      	ldr	r3, [pc, #20]	; (21a8 <ASerialLdd2_SendBlock+0xbc>)
    2194:	7818      	ldrb	r0, [r3, #0]
    2196:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
    219a:	2300      	movs	r3, #0
}
    219c:	1c18      	adds	r0, r3, #0
    219e:	46bd      	mov	sp, r7
    21a0:	b006      	add	sp, #24
    21a2:	bd80      	pop	{r7, pc}
    21a4:	1ffff148 	.word	0x1ffff148
    21a8:	1ffff1e8 	.word	0x1ffff1e8
    21ac:	4006a000 	.word	0x4006a000

000021b0 <InterruptRx>:
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void InterruptRx(ASerialLdd2_TDeviceDataPtr DeviceDataPrv)
{
    21b0:	b590      	push	{r4, r7, lr}
    21b2:	b083      	sub	sp, #12
    21b4:	af00      	add	r7, sp, #0
    21b6:	6078      	str	r0, [r7, #4]
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
    21b8:	4b12      	ldr	r3, [pc, #72]	; (2204 <InterruptRx+0x54>)
    21ba:	79db      	ldrb	r3, [r3, #7]
    21bc:	b2db      	uxtb	r3, r3
    21be:	1c1c      	adds	r4, r3, #0
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	8a1b      	ldrh	r3, [r3, #16]
    21c4:	2b00      	cmp	r3, #0
    21c6:	d01a      	beq.n	21fe <InterruptRx+0x4e>
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	68db      	ldr	r3, [r3, #12]
    21cc:	b2e2      	uxtb	r2, r4
    21ce:	701a      	strb	r2, [r3, #0]
    21d0:	1c5a      	adds	r2, r3, #1
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	60da      	str	r2, [r3, #12]
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
    21d6:	687b      	ldr	r3, [r7, #4]
    21d8:	891b      	ldrh	r3, [r3, #8]
    21da:	3301      	adds	r3, #1
    21dc:	b29a      	uxth	r2, r3
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	811a      	strh	r2, [r3, #8]
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	891a      	ldrh	r2, [r3, #8]
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	8a1b      	ldrh	r3, [r3, #16]
    21ea:	429a      	cmp	r2, r3
    21ec:	d107      	bne.n	21fe <InterruptRx+0x4e>
      DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to be received. */
    21ee:	687b      	ldr	r3, [r7, #4]
    21f0:	2200      	movs	r2, #0
    21f2:	821a      	strh	r2, [r3, #16]
      ASerialLdd2_OnBlockReceived(DeviceDataPrv->UserDataPtr);
    21f4:	687b      	ldr	r3, [r7, #4]
    21f6:	69db      	ldr	r3, [r3, #28]
    21f8:	1c18      	adds	r0, r3, #0
    21fa:	f7fe ffb7 	bl	116c <ASerialLdd2_OnBlockReceived>
    }
  }
}
    21fe:	46bd      	mov	sp, r7
    2200:	b003      	add	sp, #12
    2202:	bd90      	pop	{r4, r7, pc}
    2204:	4006a000 	.word	0x4006a000

00002208 <InterruptTx>:
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void InterruptTx(ASerialLdd2_TDeviceDataPtr DeviceDataPrv)
{
    2208:	b580      	push	{r7, lr}
    220a:	b082      	sub	sp, #8
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
    2210:	687b      	ldr	r3, [r7, #4]
    2212:	8a5a      	ldrh	r2, [r3, #18]
    2214:	687b      	ldr	r3, [r7, #4]
    2216:	8b1b      	ldrh	r3, [r3, #24]
    2218:	429a      	cmp	r2, r3
    221a:	d21c      	bcs.n	2256 <InterruptTx+0x4e>
    UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
    221c:	4a19      	ldr	r2, [pc, #100]	; (2284 <InterruptTx+0x7c>)
    221e:	687b      	ldr	r3, [r7, #4]
    2220:	695b      	ldr	r3, [r3, #20]
    2222:	7819      	ldrb	r1, [r3, #0]
    2224:	71d1      	strb	r1, [r2, #7]
    2226:	1c5a      	adds	r2, r3, #1
    2228:	687b      	ldr	r3, [r7, #4]
    222a:	615a      	str	r2, [r3, #20]
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	8a5b      	ldrh	r3, [r3, #18]
    2230:	3301      	adds	r3, #1
    2232:	b29a      	uxth	r2, r3
    2234:	687b      	ldr	r3, [r7, #4]
    2236:	825a      	strh	r2, [r3, #18]
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	8a5a      	ldrh	r2, [r3, #18]
    223c:	687b      	ldr	r3, [r7, #4]
    223e:	8b1b      	ldrh	r3, [r3, #24]
    2240:	429a      	cmp	r2, r3
    2242:	d11c      	bne.n	227e <InterruptTx+0x76>
      DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	2200      	movs	r2, #0
    2248:	831a      	strh	r2, [r3, #24]
      ASerialLdd2_OnBlockSent(DeviceDataPrv->UserDataPtr);
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	69db      	ldr	r3, [r3, #28]
    224e:	1c18      	adds	r0, r3, #0
    2250:	f7fe ffcc 	bl	11ec <ASerialLdd2_OnBlockSent>
    2254:	e013      	b.n	227e <InterruptTx+0x76>
    }
  } else {
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Disable TX interrupt */
    2256:	4b0b      	ldr	r3, [pc, #44]	; (2284 <InterruptTx+0x7c>)
    2258:	4a0a      	ldr	r2, [pc, #40]	; (2284 <InterruptTx+0x7c>)
    225a:	78d2      	ldrb	r2, [r2, #3]
    225c:	b2d1      	uxtb	r1, r2
    225e:	227f      	movs	r2, #127	; 0x7f
    2260:	400a      	ands	r2, r1
    2262:	b2d2      	uxtb	r2, r2
    2264:	70da      	strb	r2, [r3, #3]
    2266:	4b07      	ldr	r3, [pc, #28]	; (2284 <InterruptTx+0x7c>)
    2268:	4a06      	ldr	r2, [pc, #24]	; (2284 <InterruptTx+0x7c>)
    226a:	7992      	ldrb	r2, [r2, #6]
    226c:	b2d2      	uxtb	r2, r2
    226e:	719a      	strb	r2, [r3, #6]
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_INT */
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	881b      	ldrh	r3, [r3, #0]
    2274:	2201      	movs	r2, #1
    2276:	4393      	bics	r3, r2
    2278:	b29a      	uxth	r2, r3
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	801a      	strh	r2, [r3, #0]
  }
}
    227e:	46bd      	mov	sp, r7
    2280:	b002      	add	sp, #8
    2282:	bd80      	pop	{r7, pc}
    2284:	4006a000 	.word	0x4006a000

00002288 <ASerialLdd2_Interrupt>:
**         interrupt. Calls InterruptTX/InterruptRX methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(ASerialLdd2_Interrupt)
{
    2288:	b5f0      	push	{r4, r5, r6, r7, lr}
    228a:	4647      	mov	r7, r8
    228c:	b480      	push	{r7}
    228e:	b082      	sub	sp, #8
    2290:	af00      	add	r7, sp, #0
  /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
  ASerialLdd2_TDeviceDataPtr DeviceDataPrv = INT_UART0__DEFAULT_RTOS_ISRPARAM;
    2292:	4b3a      	ldr	r3, [pc, #232]	; (237c <ASerialLdd2_Interrupt+0xf4>)
    2294:	681b      	ldr	r3, [r3, #0]
    2296:	607b      	str	r3, [r7, #4]
  register uint16_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
    2298:	4b39      	ldr	r3, [pc, #228]	; (2380 <ASerialLdd2_Interrupt+0xf8>)
    229a:	791b      	ldrb	r3, [r3, #4]
    229c:	b2db      	uxtb	r3, r3
    229e:	1c1c      	adds	r4, r3, #0
  register uint16_t OnErrorFlags = 0U; /* Temporary variable for flags */
    22a0:	2500      	movs	r5, #0
  register uint8_t  OnBreakFlag = 0U;  /* Temporary variable flag for OnBreak event */
    22a2:	2600      	movs	r6, #0
  register uint16_t Data;              /* Temporary variable for data */

  if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* Is any error flag set? */
    22a4:	1c22      	adds	r2, r4, #0
    22a6:	230f      	movs	r3, #15
    22a8:	4013      	ands	r3, r2
    22aa:	d04b      	beq.n	2344 <ASerialLdd2_Interrupt+0xbc>
    UART0_PDD_ClearInterruptFlags(UART0_BASE_PTR, (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK));
    22ac:	4b34      	ldr	r3, [pc, #208]	; (2380 <ASerialLdd2_Interrupt+0xf8>)
    22ae:	220f      	movs	r2, #15
    22b0:	711a      	strb	r2, [r3, #4]
    Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from receiver */
    22b2:	4b33      	ldr	r3, [pc, #204]	; (2380 <ASerialLdd2_Interrupt+0xf8>)
    22b4:	79db      	ldrb	r3, [r3, #7]
    22b6:	b2db      	uxtb	r3, r3
    22b8:	4698      	mov	r8, r3
    if ((StatReg & UART0_S1_FE_MASK) != 0U) { /* Is the framing error detected? */
    22ba:	1c22      	adds	r2, r4, #0
    22bc:	2302      	movs	r3, #2
    22be:	4013      	ands	r3, r2
    22c0:	d013      	beq.n	22ea <ASerialLdd2_Interrupt+0x62>
      if (((StatReg & UART0_S1_RDRF_MASK) != 0U) && (Data == 0U)) { /* Is the zero character in the receiver? */
    22c2:	1c22      	adds	r2, r4, #0
    22c4:	2320      	movs	r3, #32
    22c6:	4013      	ands	r3, r2
    22c8:	d00c      	beq.n	22e4 <ASerialLdd2_Interrupt+0x5c>
    22ca:	4642      	mov	r2, r8
    22cc:	2a00      	cmp	r2, #0
    22ce:	d109      	bne.n	22e4 <ASerialLdd2_Interrupt+0x5c>
        OnBreakFlag++;
    22d0:	1c73      	adds	r3, r6, #1
    22d2:	b2de      	uxtb	r6, r3
        DeviceDataPrv->SerFlag |= BREAK_DETECTED; /* If yes then set the flag */
    22d4:	687b      	ldr	r3, [r7, #4]
    22d6:	881b      	ldrh	r3, [r3, #0]
    22d8:	2202      	movs	r2, #2
    22da:	4313      	orrs	r3, r2
    22dc:	b29a      	uxth	r2, r3
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	801a      	strh	r2, [r3, #0]
    22e2:	e002      	b.n	22ea <ASerialLdd2_Interrupt+0x62>
      } else {
        OnErrorFlags |= LDD_SERIAL_FRAMING_ERROR; /* If yes then set the flag */
    22e4:	2304      	movs	r3, #4
    22e6:	432b      	orrs	r3, r5
    22e8:	b29d      	uxth	r5, r3
      }
    }
    if ((StatReg & UART0_S1_OR_MASK) != 0U) { /* Is the overrun error flag set? */
    22ea:	1c22      	adds	r2, r4, #0
    22ec:	2308      	movs	r3, #8
    22ee:	4013      	ands	r3, r2
    22f0:	d002      	beq.n	22f8 <ASerialLdd2_Interrupt+0x70>
      OnErrorFlags |= LDD_SERIAL_RX_OVERRUN; /* If yes then set the flag */
    22f2:	2301      	movs	r3, #1
    22f4:	432b      	orrs	r3, r5
    22f6:	b29d      	uxth	r5, r3
    }
    if ((StatReg & UART0_S1_PF_MASK) != 0U) { /* Is the parity error flag set? */
    22f8:	1c22      	adds	r2, r4, #0
    22fa:	2301      	movs	r3, #1
    22fc:	4013      	ands	r3, r2
    22fe:	d002      	beq.n	2306 <ASerialLdd2_Interrupt+0x7e>
      OnErrorFlags |= LDD_SERIAL_PARITY_ERROR; /* If yes then set the flag */
    2300:	2302      	movs	r3, #2
    2302:	432b      	orrs	r3, r5
    2304:	b29d      	uxth	r5, r3
    }
    if ((StatReg & UART0_S1_NF_MASK) != 0U) { /* Is the noise error flag set? */
    2306:	1c22      	adds	r2, r4, #0
    2308:	2304      	movs	r3, #4
    230a:	4013      	ands	r3, r2
    230c:	d002      	beq.n	2314 <ASerialLdd2_Interrupt+0x8c>
      OnErrorFlags |= LDD_SERIAL_NOISE_ERROR; /* If yes then set the flag */
    230e:	2308      	movs	r3, #8
    2310:	432b      	orrs	r3, r5
    2312:	b29d      	uxth	r5, r3
    }
    DeviceDataPrv->ErrFlag |= OnErrorFlags; /* Copy flags status to ErrFlag status variable */
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	685a      	ldr	r2, [r3, #4]
    2318:	1c2b      	adds	r3, r5, #0
    231a:	431a      	orrs	r2, r3
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	605a      	str	r2, [r3, #4]
    StatReg &= (uint16_t)(~(uint16_t)UART0_S1_RDRF_MASK); /* Clear the receive data flag to discard the errorneous data */
    2320:	2320      	movs	r3, #32
    2322:	1c22      	adds	r2, r4, #0
    2324:	439a      	bics	r2, r3
    2326:	1c13      	adds	r3, r2, #0
    2328:	b29c      	uxth	r4, r3
    if (OnBreakFlag != 0U) {
    232a:	2e00      	cmp	r6, #0
    232c:	d005      	beq.n	233a <ASerialLdd2_Interrupt+0xb2>
      ASerialLdd2_OnBreak(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	69db      	ldr	r3, [r3, #28]
    2332:	1c18      	adds	r0, r3, #0
    2334:	f7fe ffe6 	bl	1304 <ASerialLdd2_OnBreak>
    2338:	e004      	b.n	2344 <ASerialLdd2_Interrupt+0xbc>
    } else {
      ASerialLdd2_OnError(DeviceDataPrv->UserDataPtr); /* Invoke user event */
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	69db      	ldr	r3, [r3, #28]
    233e:	1c18      	adds	r0, r3, #0
    2340:	f7fe ff98 	bl	1274 <ASerialLdd2_OnError>
    }
  }
  if (StatReg & UART0_S1_RDRF_MASK) {  /* Is the receiver's interrupt flag set? */
    2344:	1c22      	adds	r2, r4, #0
    2346:	2320      	movs	r3, #32
    2348:	4013      	ands	r3, r2
    234a:	d003      	beq.n	2354 <ASerialLdd2_Interrupt+0xcc>
    InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This routine is inlined. */
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	1c18      	adds	r0, r3, #0
    2350:	f7ff ff2e 	bl	21b0 <InterruptRx>
  }
  if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
    2354:	687b      	ldr	r3, [r7, #4]
    2356:	881b      	ldrh	r3, [r3, #0]
    2358:	1c1a      	adds	r2, r3, #0
    235a:	2301      	movs	r3, #1
    235c:	4013      	ands	r3, r2
    235e:	d007      	beq.n	2370 <ASerialLdd2_Interrupt+0xe8>
    if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
    2360:	1c22      	adds	r2, r4, #0
    2362:	2380      	movs	r3, #128	; 0x80
    2364:	4013      	ands	r3, r2
    2366:	d003      	beq.n	2370 <ASerialLdd2_Interrupt+0xe8>
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    2368:	687b      	ldr	r3, [r7, #4]
    236a:	1c18      	adds	r0, r3, #0
    236c:	f7ff ff4c 	bl	2208 <InterruptTx>
    }
  }
}
    2370:	46bd      	mov	sp, r7
    2372:	b002      	add	sp, #8
    2374:	bc04      	pop	{r2}
    2376:	4690      	mov	r8, r2
    2378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	1ffff19c 	.word	0x1ffff19c
    2380:	4006a000 	.word	0x4006a000

00002384 <ASerialLdd2_GetError>:
**                           the active clock configuration
**                           ERR_DISABLED - Component is disabled
*/
/* ===================================================================*/
LDD_TError ASerialLdd2_GetError(LDD_TDeviceData *DeviceDataPtr, LDD_SERIAL_TError *ErrorPtr)
{
    2384:	b580      	push	{r7, lr}
    2386:	b084      	sub	sp, #16
    2388:	af00      	add	r7, sp, #0
    238a:	6078      	str	r0, [r7, #4]
    238c:	6039      	str	r1, [r7, #0]
  ASerialLdd2_TDeviceDataPtr DeviceDataPrv = (ASerialLdd2_TDeviceDataPtr)DeviceDataPtr;
    238e:	687b      	ldr	r3, [r7, #4]
    2390:	60fb      	str	r3, [r7, #12]

  /* {Default RTOS Adapter} Critical section begin, general PE function is used */
  EnterCritical();
    2392:	1c3b      	adds	r3, r7, #0
    2394:	330b      	adds	r3, #11
    2396:	f3ef 8010 	mrs	r0, PRIMASK
    239a:	b672      	cpsid	i
    239c:	7018      	strb	r0, [r3, #0]
    239e:	4b14      	ldr	r3, [pc, #80]	; (23f0 <ASerialLdd2_GetError+0x6c>)
    23a0:	781b      	ldrb	r3, [r3, #0]
    23a2:	b2db      	uxtb	r3, r3
    23a4:	3301      	adds	r3, #1
    23a6:	b2db      	uxtb	r3, r3
    23a8:	4a11      	ldr	r2, [pc, #68]	; (23f0 <ASerialLdd2_GetError+0x6c>)
    23aa:	1c19      	adds	r1, r3, #0
    23ac:	7011      	strb	r1, [r2, #0]
    23ae:	2b01      	cmp	r3, #1
    23b0:	d104      	bne.n	23bc <ASerialLdd2_GetError+0x38>
    23b2:	1c3b      	adds	r3, r7, #0
    23b4:	330b      	adds	r3, #11
    23b6:	781a      	ldrb	r2, [r3, #0]
    23b8:	4b0e      	ldr	r3, [pc, #56]	; (23f4 <ASerialLdd2_GetError+0x70>)
    23ba:	701a      	strb	r2, [r3, #0]
  *ErrorPtr = DeviceDataPrv->ErrFlag;
    23bc:	68fb      	ldr	r3, [r7, #12]
    23be:	685a      	ldr	r2, [r3, #4]
    23c0:	683b      	ldr	r3, [r7, #0]
    23c2:	601a      	str	r2, [r3, #0]
  DeviceDataPrv->ErrFlag = 0x00U;      /* Reset error flags */
    23c4:	68fb      	ldr	r3, [r7, #12]
    23c6:	2200      	movs	r2, #0
    23c8:	605a      	str	r2, [r3, #4]
  /* {Default RTOS Adapter} Critical section end, general PE function is used */
  ExitCritical();
    23ca:	4b09      	ldr	r3, [pc, #36]	; (23f0 <ASerialLdd2_GetError+0x6c>)
    23cc:	781b      	ldrb	r3, [r3, #0]
    23ce:	b2db      	uxtb	r3, r3
    23d0:	3b01      	subs	r3, #1
    23d2:	b2db      	uxtb	r3, r3
    23d4:	4a06      	ldr	r2, [pc, #24]	; (23f0 <ASerialLdd2_GetError+0x6c>)
    23d6:	1c19      	adds	r1, r3, #0
    23d8:	7011      	strb	r1, [r2, #0]
    23da:	2b00      	cmp	r3, #0
    23dc:	d103      	bne.n	23e6 <ASerialLdd2_GetError+0x62>
    23de:	4b05      	ldr	r3, [pc, #20]	; (23f4 <ASerialLdd2_GetError+0x70>)
    23e0:	7818      	ldrb	r0, [r3, #0]
    23e2:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
    23e6:	2300      	movs	r3, #0
}
    23e8:	1c18      	adds	r0, r3, #0
    23ea:	46bd      	mov	sp, r7
    23ec:	b004      	add	sp, #16
    23ee:	bd80      	pop	{r7, pc}
    23f0:	1ffff148 	.word	0x1ffff148
    23f4:	1ffff1e8 	.word	0x1ffff1e8

000023f8 <ASerialLdd1_Init>:
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* ASerialLdd1_Init(LDD_TUserData *UserDataPtr)
{
    23f8:	b580      	push	{r7, lr}
    23fa:	b084      	sub	sp, #16
    23fc:	af00      	add	r7, sp, #0
    23fe:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    2400:	4b4f      	ldr	r3, [pc, #316]	; (2540 <ASerialLdd1_Init+0x148>)
    2402:	60fb      	str	r3, [r7, #12]

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
    2404:	68fb      	ldr	r3, [r7, #12]
    2406:	2200      	movs	r2, #0
    2408:	811a      	strh	r2, [r3, #8]
  DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlock() */
    240a:	68fb      	ldr	r3, [r7, #12]
    240c:	2200      	movs	r2, #0
    240e:	821a      	strh	r2, [r3, #16]
  DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
    2410:	68fb      	ldr	r3, [r7, #12]
    2412:	2200      	movs	r2, #0
    2414:	60da      	str	r2, [r3, #12]
  /* Clear the transmit counters and pointer */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
    2416:	68fb      	ldr	r3, [r7, #12]
    2418:	2200      	movs	r2, #0
    241a:	825a      	strh	r2, [r3, #18]
  DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
    241c:	68fb      	ldr	r3, [r7, #12]
    241e:	2200      	movs	r2, #0
    2420:	831a      	strh	r2, [r3, #24]
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
    2422:	68fb      	ldr	r3, [r7, #12]
    2424:	2200      	movs	r2, #0
    2426:	615a      	str	r2, [r3, #20]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    2428:	68fb      	ldr	r3, [r7, #12]
    242a:	687a      	ldr	r2, [r7, #4]
    242c:	61da      	str	r2, [r3, #28]
  /* Allocate interrupt vectors */
  /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the global variable */
  INT_UART1__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
    242e:	4b45      	ldr	r3, [pc, #276]	; (2544 <ASerialLdd1_Init+0x14c>)
    2430:	68fa      	ldr	r2, [r7, #12]
    2432:	601a      	str	r2, [r3, #0]
  /* SIM_SCGC4: UART1=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART1_MASK;
    2434:	4a44      	ldr	r2, [pc, #272]	; (2548 <ASerialLdd1_Init+0x150>)
    2436:	4944      	ldr	r1, [pc, #272]	; (2548 <ASerialLdd1_Init+0x150>)
    2438:	4b44      	ldr	r3, [pc, #272]	; (254c <ASerialLdd1_Init+0x154>)
    243a:	58cb      	ldr	r3, [r1, r3]
    243c:	2180      	movs	r1, #128	; 0x80
    243e:	0109      	lsls	r1, r1, #4
    2440:	4319      	orrs	r1, r3
    2442:	4b42      	ldr	r3, [pc, #264]	; (254c <ASerialLdd1_Init+0x154>)
    2444:	50d1      	str	r1, [r2, r3]
  /* PORTC_PCR3: ISF=0,MUX=3 */
  PORTC_PCR3 = (uint32_t)((PORTC_PCR3 & (uint32_t)~(uint32_t)(
    2446:	4b42      	ldr	r3, [pc, #264]	; (2550 <ASerialLdd1_Init+0x158>)
    2448:	4a41      	ldr	r2, [pc, #260]	; (2550 <ASerialLdd1_Init+0x158>)
    244a:	68d1      	ldr	r1, [r2, #12]
    244c:	4a41      	ldr	r2, [pc, #260]	; (2554 <ASerialLdd1_Init+0x15c>)
    244e:	400a      	ands	r2, r1
    2450:	21c0      	movs	r1, #192	; 0xc0
    2452:	0089      	lsls	r1, r1, #2
    2454:	430a      	orrs	r2, r1
    2456:	60da      	str	r2, [r3, #12]
                PORT_PCR_MUX(0x04)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x03)
               ));
  /* PORTC_PCR4: ISF=0,MUX=3 */
  PORTC_PCR4 = (uint32_t)((PORTC_PCR4 & (uint32_t)~(uint32_t)(
    2458:	4b3d      	ldr	r3, [pc, #244]	; (2550 <ASerialLdd1_Init+0x158>)
    245a:	4a3d      	ldr	r2, [pc, #244]	; (2550 <ASerialLdd1_Init+0x158>)
    245c:	6911      	ldr	r1, [r2, #16]
    245e:	4a3d      	ldr	r2, [pc, #244]	; (2554 <ASerialLdd1_Init+0x15c>)
    2460:	400a      	ands	r2, r1
    2462:	21c0      	movs	r1, #192	; 0xc0
    2464:	0089      	lsls	r1, r1, #2
    2466:	430a      	orrs	r2, r1
    2468:	611a      	str	r2, [r3, #16]
                PORT_PCR_MUX(0x04)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x03)
               ));
  /* NVIC_IPR3: PRI_13=0x80 */
  NVIC_IPR3 = (uint32_t)((NVIC_IPR3 & (uint32_t)~(uint32_t)(
    246a:	4a3b      	ldr	r2, [pc, #236]	; (2558 <ASerialLdd1_Init+0x160>)
    246c:	493a      	ldr	r1, [pc, #232]	; (2558 <ASerialLdd1_Init+0x160>)
    246e:	23c3      	movs	r3, #195	; 0xc3
    2470:	009b      	lsls	r3, r3, #2
    2472:	58c9      	ldr	r1, [r1, r3]
    2474:	4b39      	ldr	r3, [pc, #228]	; (255c <ASerialLdd1_Init+0x164>)
    2476:	400b      	ands	r3, r1
    2478:	2180      	movs	r1, #128	; 0x80
    247a:	0209      	lsls	r1, r1, #8
    247c:	4319      	orrs	r1, r3
    247e:	23c3      	movs	r3, #195	; 0xc3
    2480:	009b      	lsls	r3, r3, #2
    2482:	50d1      	str	r1, [r2, r3]
               NVIC_IP_PRI_13(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_13(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x2000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x2000);
    2484:	4b34      	ldr	r3, [pc, #208]	; (2558 <ASerialLdd1_Init+0x160>)
    2486:	4a34      	ldr	r2, [pc, #208]	; (2558 <ASerialLdd1_Init+0x160>)
    2488:	6812      	ldr	r2, [r2, #0]
    248a:	2180      	movs	r1, #128	; 0x80
    248c:	0189      	lsls	r1, r1, #6
    248e:	430a      	orrs	r2, r1
    2490:	601a      	str	r2, [r3, #0]
  UART_PDD_EnableTransmitter(UART1_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
    2492:	4b33      	ldr	r3, [pc, #204]	; (2560 <ASerialLdd1_Init+0x168>)
    2494:	4a32      	ldr	r2, [pc, #200]	; (2560 <ASerialLdd1_Init+0x168>)
    2496:	78d2      	ldrb	r2, [r2, #3]
    2498:	b2d2      	uxtb	r2, r2
    249a:	2108      	movs	r1, #8
    249c:	438a      	bics	r2, r1
    249e:	b2d2      	uxtb	r2, r2
    24a0:	70da      	strb	r2, [r3, #3]
  UART_PDD_EnableReceiver(UART1_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
    24a2:	4b2f      	ldr	r3, [pc, #188]	; (2560 <ASerialLdd1_Init+0x168>)
    24a4:	4a2e      	ldr	r2, [pc, #184]	; (2560 <ASerialLdd1_Init+0x168>)
    24a6:	78d2      	ldrb	r2, [r2, #3]
    24a8:	b2d2      	uxtb	r2, r2
    24aa:	2104      	movs	r1, #4
    24ac:	438a      	bics	r2, r1
    24ae:	b2d2      	uxtb	r2, r2
    24b0:	70da      	strb	r2, [r3, #3]
  DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
    24b2:	68fb      	ldr	r3, [r7, #12]
    24b4:	2200      	movs	r2, #0
    24b6:	801a      	strh	r2, [r3, #0]
  DeviceDataPrv->ErrFlag = 0x00U;      /* Reset error flags */
    24b8:	68fb      	ldr	r3, [r7, #12]
    24ba:	2200      	movs	r2, #0
    24bc:	605a      	str	r2, [r3, #4]
  /* UART1_C1: LOOPS=0,UARTSWAI=0,RSRC=0,M=0,WAKE=0,ILT=0,PE=0,PT=0 */
  UART1_C1 = 0x00U;                    /*  Set the C1 register */
    24be:	4b28      	ldr	r3, [pc, #160]	; (2560 <ASerialLdd1_Init+0x168>)
    24c0:	2200      	movs	r2, #0
    24c2:	709a      	strb	r2, [r3, #2]
  /* UART1_C3: R8=0,T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
  UART1_C3 = 0x00U;                    /*  Set the C3 register */
    24c4:	4b26      	ldr	r3, [pc, #152]	; (2560 <ASerialLdd1_Init+0x168>)
    24c6:	2200      	movs	r2, #0
    24c8:	719a      	strb	r2, [r3, #6]
  /* UART1_S2: LBKDIF=0,RXEDGIF=0,??=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART1_S2 = 0x00U;                    /*  Set the S2 register */
    24ca:	4b25      	ldr	r3, [pc, #148]	; (2560 <ASerialLdd1_Init+0x168>)
    24cc:	2200      	movs	r2, #0
    24ce:	715a      	strb	r2, [r3, #5]
  UART_PDD_SetBaudRate(UART1_BASE_PTR, 23U); /* Set the baud rate register. */
    24d0:	4b23      	ldr	r3, [pc, #140]	; (2560 <ASerialLdd1_Init+0x168>)
    24d2:	4a23      	ldr	r2, [pc, #140]	; (2560 <ASerialLdd1_Init+0x168>)
    24d4:	7812      	ldrb	r2, [r2, #0]
    24d6:	b2d2      	uxtb	r2, r2
    24d8:	211f      	movs	r1, #31
    24da:	438a      	bics	r2, r1
    24dc:	b2d2      	uxtb	r2, r2
    24de:	701a      	strb	r2, [r3, #0]
    24e0:	4b1f      	ldr	r3, [pc, #124]	; (2560 <ASerialLdd1_Init+0x168>)
    24e2:	2217      	movs	r2, #23
    24e4:	705a      	strb	r2, [r3, #1]
  UART_PDD_EnableTransmitter(UART1_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
    24e6:	4b1e      	ldr	r3, [pc, #120]	; (2560 <ASerialLdd1_Init+0x168>)
    24e8:	4a1d      	ldr	r2, [pc, #116]	; (2560 <ASerialLdd1_Init+0x168>)
    24ea:	78d2      	ldrb	r2, [r2, #3]
    24ec:	b2d2      	uxtb	r2, r2
    24ee:	b2d2      	uxtb	r2, r2
    24f0:	2108      	movs	r1, #8
    24f2:	430a      	orrs	r2, r1
    24f4:	b2d2      	uxtb	r2, r2
    24f6:	b2d2      	uxtb	r2, r2
    24f8:	70da      	strb	r2, [r3, #3]
  UART_PDD_EnableReceiver(UART1_BASE_PTR, PDD_ENABLE); /* Enable receiver */
    24fa:	4b19      	ldr	r3, [pc, #100]	; (2560 <ASerialLdd1_Init+0x168>)
    24fc:	4a18      	ldr	r2, [pc, #96]	; (2560 <ASerialLdd1_Init+0x168>)
    24fe:	78d2      	ldrb	r2, [r2, #3]
    2500:	b2d2      	uxtb	r2, r2
    2502:	b2d2      	uxtb	r2, r2
    2504:	2104      	movs	r1, #4
    2506:	430a      	orrs	r2, r1
    2508:	b2d2      	uxtb	r2, r2
    250a:	b2d2      	uxtb	r2, r2
    250c:	70da      	strb	r2, [r3, #3]
  UART_PDD_EnableInterrupt(UART1_BASE_PTR, ( UART_PDD_INTERRUPT_RECEIVER | UART_PDD_INTERRUPT_PARITY_ERROR | UART_PDD_INTERRUPT_FRAMING_ERROR | UART_PDD_INTERRUPT_NOISE_ERROR | UART_PDD_INTERRUPT_OVERRUN_ERROR )); /* Enable interrupts */
    250e:	4b14      	ldr	r3, [pc, #80]	; (2560 <ASerialLdd1_Init+0x168>)
    2510:	4a13      	ldr	r2, [pc, #76]	; (2560 <ASerialLdd1_Init+0x168>)
    2512:	78d2      	ldrb	r2, [r2, #3]
    2514:	b2d2      	uxtb	r2, r2
    2516:	2120      	movs	r1, #32
    2518:	430a      	orrs	r2, r1
    251a:	b2d2      	uxtb	r2, r2
    251c:	70da      	strb	r2, [r3, #3]
    251e:	4b10      	ldr	r3, [pc, #64]	; (2560 <ASerialLdd1_Init+0x168>)
    2520:	4a0f      	ldr	r2, [pc, #60]	; (2560 <ASerialLdd1_Init+0x168>)
    2522:	7992      	ldrb	r2, [r2, #6]
    2524:	b2d2      	uxtb	r2, r2
    2526:	210f      	movs	r1, #15
    2528:	430a      	orrs	r2, r1
    252a:	b2d2      	uxtb	r2, r2
    252c:	719a      	strb	r2, [r3, #6]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_ASerialLdd1_ID,DeviceDataPrv);
    252e:	4b0d      	ldr	r3, [pc, #52]	; (2564 <ASerialLdd1_Init+0x16c>)
    2530:	68fa      	ldr	r2, [r7, #12]
    2532:	649a      	str	r2, [r3, #72]	; 0x48
  return ((LDD_TDeviceData *)DeviceDataPrv);
    2534:	68fb      	ldr	r3, [r7, #12]
}
    2536:	1c18      	adds	r0, r3, #0
    2538:	46bd      	mov	sp, r7
    253a:	b004      	add	sp, #16
    253c:	bd80      	pop	{r7, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	1ffff1a0 	.word	0x1ffff1a0
    2544:	1ffff1c0 	.word	0x1ffff1c0
    2548:	40047000 	.word	0x40047000
    254c:	00001034 	.word	0x00001034
    2550:	4004b000 	.word	0x4004b000
    2554:	fefff8ff 	.word	0xfefff8ff
    2558:	e000e100 	.word	0xe000e100
    255c:	ffff00ff 	.word	0xffff00ff
    2560:	4006b000 	.word	0x4006b000
    2564:	1ffff03c 	.word	0x1ffff03c

00002568 <ASerialLdd1_ReceiveBlock>:
**                           ERR_BUSY - The previous receive request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError ASerialLdd1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
    2568:	b580      	push	{r7, lr}
    256a:	b086      	sub	sp, #24
    256c:	af00      	add	r7, sp, #0
    256e:	60f8      	str	r0, [r7, #12]
    2570:	60b9      	str	r1, [r7, #8]
    2572:	1dbb      	adds	r3, r7, #6
    2574:	801a      	strh	r2, [r3, #0]
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv = (ASerialLdd1_TDeviceDataPtr)DeviceDataPtr;
    2576:	68fb      	ldr	r3, [r7, #12]
    2578:	617b      	str	r3, [r7, #20]

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    257a:	1dbb      	adds	r3, r7, #6
    257c:	881b      	ldrh	r3, [r3, #0]
    257e:	2b00      	cmp	r3, #0
    2580:	d101      	bne.n	2586 <ASerialLdd1_ReceiveBlock+0x1e>
    return ERR_PARAM_SIZE;             /* If no then error */
    2582:	2384      	movs	r3, #132	; 0x84
    2584:	e033      	b.n	25ee <ASerialLdd1_ReceiveBlock+0x86>
  }
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the previous receive operation pending? */
    2586:	697b      	ldr	r3, [r7, #20]
    2588:	8a1b      	ldrh	r3, [r3, #16]
    258a:	2b00      	cmp	r3, #0
    258c:	d001      	beq.n	2592 <ASerialLdd1_ReceiveBlock+0x2a>
    return ERR_BUSY;                   /* If yes then error */
    258e:	2308      	movs	r3, #8
    2590:	e02d      	b.n	25ee <ASerialLdd1_ReceiveBlock+0x86>
  }
  /* {Default RTOS Adapter} Critical section begin, general PE function is used */
  EnterCritical();
    2592:	1c3b      	adds	r3, r7, #0
    2594:	3313      	adds	r3, #19
    2596:	f3ef 8010 	mrs	r0, PRIMASK
    259a:	b672      	cpsid	i
    259c:	7018      	strb	r0, [r3, #0]
    259e:	4b16      	ldr	r3, [pc, #88]	; (25f8 <ASerialLdd1_ReceiveBlock+0x90>)
    25a0:	781b      	ldrb	r3, [r3, #0]
    25a2:	b2db      	uxtb	r3, r3
    25a4:	3301      	adds	r3, #1
    25a6:	b2db      	uxtb	r3, r3
    25a8:	4a13      	ldr	r2, [pc, #76]	; (25f8 <ASerialLdd1_ReceiveBlock+0x90>)
    25aa:	1c19      	adds	r1, r3, #0
    25ac:	7011      	strb	r1, [r2, #0]
    25ae:	2b01      	cmp	r3, #1
    25b0:	d104      	bne.n	25bc <ASerialLdd1_ReceiveBlock+0x54>
    25b2:	1c3b      	adds	r3, r7, #0
    25b4:	3313      	adds	r3, #19
    25b6:	781a      	ldrb	r2, [r3, #0]
    25b8:	4b10      	ldr	r3, [pc, #64]	; (25fc <ASerialLdd1_ReceiveBlock+0x94>)
    25ba:	701a      	strb	r2, [r3, #0]
  DeviceDataPrv->InpDataPtr = (uint8_t*)BufferPtr; /* Store a pointer to the input data. */
    25bc:	697b      	ldr	r3, [r7, #20]
    25be:	68ba      	ldr	r2, [r7, #8]
    25c0:	60da      	str	r2, [r3, #12]
  DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
    25c2:	697b      	ldr	r3, [r7, #20]
    25c4:	1dba      	adds	r2, r7, #6
    25c6:	8812      	ldrh	r2, [r2, #0]
    25c8:	821a      	strh	r2, [r3, #16]
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
    25ca:	697b      	ldr	r3, [r7, #20]
    25cc:	2200      	movs	r2, #0
    25ce:	811a      	strh	r2, [r3, #8]
  /* {Default RTOS Adapter} Critical section end, general PE function is used */
  ExitCritical();
    25d0:	4b09      	ldr	r3, [pc, #36]	; (25f8 <ASerialLdd1_ReceiveBlock+0x90>)
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	b2db      	uxtb	r3, r3
    25d6:	3b01      	subs	r3, #1
    25d8:	b2db      	uxtb	r3, r3
    25da:	4a07      	ldr	r2, [pc, #28]	; (25f8 <ASerialLdd1_ReceiveBlock+0x90>)
    25dc:	1c19      	adds	r1, r3, #0
    25de:	7011      	strb	r1, [r2, #0]
    25e0:	2b00      	cmp	r3, #0
    25e2:	d103      	bne.n	25ec <ASerialLdd1_ReceiveBlock+0x84>
    25e4:	4b05      	ldr	r3, [pc, #20]	; (25fc <ASerialLdd1_ReceiveBlock+0x94>)
    25e6:	7818      	ldrb	r0, [r3, #0]
    25e8:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
    25ec:	2300      	movs	r3, #0
}
    25ee:	1c18      	adds	r0, r3, #0
    25f0:	46bd      	mov	sp, r7
    25f2:	b006      	add	sp, #24
    25f4:	bd80      	pop	{r7, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	1ffff148 	.word	0x1ffff148
    25fc:	1ffff1e8 	.word	0x1ffff1e8

00002600 <ASerialLdd1_SendBlock>:
**                           ERR_BUSY - The previous transmit request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError ASerialLdd1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
    2600:	b580      	push	{r7, lr}
    2602:	b086      	sub	sp, #24
    2604:	af00      	add	r7, sp, #0
    2606:	60f8      	str	r0, [r7, #12]
    2608:	60b9      	str	r1, [r7, #8]
    260a:	1dbb      	adds	r3, r7, #6
    260c:	801a      	strh	r2, [r3, #0]
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv = (ASerialLdd1_TDeviceDataPtr)DeviceDataPtr;
    260e:	68fb      	ldr	r3, [r7, #12]
    2610:	617b      	str	r3, [r7, #20]

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    2612:	1dbb      	adds	r3, r7, #6
    2614:	881b      	ldrh	r3, [r3, #0]
    2616:	2b00      	cmp	r3, #0
    2618:	d101      	bne.n	261e <ASerialLdd1_SendBlock+0x1e>
    return ERR_PARAM_SIZE;             /* If no then error */
    261a:	2384      	movs	r3, #132	; 0x84
    261c:	e048      	b.n	26b0 <ASerialLdd1_SendBlock+0xb0>
  }
  if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
    261e:	697b      	ldr	r3, [r7, #20]
    2620:	8b1b      	ldrh	r3, [r3, #24]
    2622:	2b00      	cmp	r3, #0
    2624:	d001      	beq.n	262a <ASerialLdd1_SendBlock+0x2a>
    return ERR_BUSY;                   /* If yes then error */
    2626:	2308      	movs	r3, #8
    2628:	e042      	b.n	26b0 <ASerialLdd1_SendBlock+0xb0>
  }
  /* {Default RTOS Adapter} Critical section begin, general PE function is used */
  EnterCritical();
    262a:	1c3b      	adds	r3, r7, #0
    262c:	3313      	adds	r3, #19
    262e:	f3ef 8010 	mrs	r0, PRIMASK
    2632:	b672      	cpsid	i
    2634:	7018      	strb	r0, [r3, #0]
    2636:	4b20      	ldr	r3, [pc, #128]	; (26b8 <ASerialLdd1_SendBlock+0xb8>)
    2638:	781b      	ldrb	r3, [r3, #0]
    263a:	b2db      	uxtb	r3, r3
    263c:	3301      	adds	r3, #1
    263e:	b2db      	uxtb	r3, r3
    2640:	4a1d      	ldr	r2, [pc, #116]	; (26b8 <ASerialLdd1_SendBlock+0xb8>)
    2642:	1c19      	adds	r1, r3, #0
    2644:	7011      	strb	r1, [r2, #0]
    2646:	2b01      	cmp	r3, #1
    2648:	d104      	bne.n	2654 <ASerialLdd1_SendBlock+0x54>
    264a:	1c3b      	adds	r3, r7, #0
    264c:	3313      	adds	r3, #19
    264e:	781a      	ldrb	r2, [r3, #0]
    2650:	4b1a      	ldr	r3, [pc, #104]	; (26bc <ASerialLdd1_SendBlock+0xbc>)
    2652:	701a      	strb	r2, [r3, #0]
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
    2654:	697b      	ldr	r3, [r7, #20]
    2656:	68ba      	ldr	r2, [r7, #8]
    2658:	615a      	str	r2, [r3, #20]
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
    265a:	697b      	ldr	r3, [r7, #20]
    265c:	1dba      	adds	r2, r7, #6
    265e:	8812      	ldrh	r2, [r2, #0]
    2660:	831a      	strh	r2, [r3, #24]
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
    2662:	697b      	ldr	r3, [r7, #20]
    2664:	2200      	movs	r2, #0
    2666:	825a      	strh	r2, [r3, #18]
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
    2668:	697b      	ldr	r3, [r7, #20]
    266a:	881b      	ldrh	r3, [r3, #0]
    266c:	2201      	movs	r2, #1
    266e:	4313      	orrs	r3, r2
    2670:	b29a      	uxth	r2, r3
    2672:	697b      	ldr	r3, [r7, #20]
    2674:	801a      	strh	r2, [r3, #0]
  UART_PDD_EnableInterrupt(UART1_BASE_PTR, UART_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
    2676:	4b12      	ldr	r3, [pc, #72]	; (26c0 <ASerialLdd1_SendBlock+0xc0>)
    2678:	4a11      	ldr	r2, [pc, #68]	; (26c0 <ASerialLdd1_SendBlock+0xc0>)
    267a:	78d2      	ldrb	r2, [r2, #3]
    267c:	b2d2      	uxtb	r2, r2
    267e:	2180      	movs	r1, #128	; 0x80
    2680:	4249      	negs	r1, r1
    2682:	430a      	orrs	r2, r1
    2684:	b2d2      	uxtb	r2, r2
    2686:	70da      	strb	r2, [r3, #3]
    2688:	4b0d      	ldr	r3, [pc, #52]	; (26c0 <ASerialLdd1_SendBlock+0xc0>)
    268a:	4a0d      	ldr	r2, [pc, #52]	; (26c0 <ASerialLdd1_SendBlock+0xc0>)
    268c:	7992      	ldrb	r2, [r2, #6]
    268e:	b2d2      	uxtb	r2, r2
    2690:	719a      	strb	r2, [r3, #6]
  /* {Default RTOS Adapter} Critical section end, general PE function is used */
  ExitCritical();
    2692:	4b09      	ldr	r3, [pc, #36]	; (26b8 <ASerialLdd1_SendBlock+0xb8>)
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	b2db      	uxtb	r3, r3
    2698:	3b01      	subs	r3, #1
    269a:	b2db      	uxtb	r3, r3
    269c:	4a06      	ldr	r2, [pc, #24]	; (26b8 <ASerialLdd1_SendBlock+0xb8>)
    269e:	1c19      	adds	r1, r3, #0
    26a0:	7011      	strb	r1, [r2, #0]
    26a2:	2b00      	cmp	r3, #0
    26a4:	d103      	bne.n	26ae <ASerialLdd1_SendBlock+0xae>
    26a6:	4b05      	ldr	r3, [pc, #20]	; (26bc <ASerialLdd1_SendBlock+0xbc>)
    26a8:	7818      	ldrb	r0, [r3, #0]
    26aa:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
    26ae:	2300      	movs	r3, #0
}
    26b0:	1c18      	adds	r0, r3, #0
    26b2:	46bd      	mov	sp, r7
    26b4:	b006      	add	sp, #24
    26b6:	bd80      	pop	{r7, pc}
    26b8:	1ffff148 	.word	0x1ffff148
    26bc:	1ffff1e8 	.word	0x1ffff1e8
    26c0:	4006b000 	.word	0x4006b000

000026c4 <InterruptRx>:
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void InterruptRx(ASerialLdd1_TDeviceDataPtr DeviceDataPrv)
{
    26c4:	b590      	push	{r4, r7, lr}
    26c6:	b083      	sub	sp, #12
    26c8:	af00      	add	r7, sp, #0
    26ca:	6078      	str	r0, [r7, #4]
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART_PDD_GetChar8(UART1_BASE_PTR); /* Read an 8-bit character from the receiver */
    26cc:	4b12      	ldr	r3, [pc, #72]	; (2718 <InterruptRx+0x54>)
    26ce:	79db      	ldrb	r3, [r3, #7]
    26d0:	b2db      	uxtb	r3, r3
    26d2:	1c1c      	adds	r4, r3, #0
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
    26d4:	687b      	ldr	r3, [r7, #4]
    26d6:	8a1b      	ldrh	r3, [r3, #16]
    26d8:	2b00      	cmp	r3, #0
    26da:	d01a      	beq.n	2712 <InterruptRx+0x4e>
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	68db      	ldr	r3, [r3, #12]
    26e0:	b2e2      	uxtb	r2, r4
    26e2:	701a      	strb	r2, [r3, #0]
    26e4:	1c5a      	adds	r2, r3, #1
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	60da      	str	r2, [r3, #12]
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	891b      	ldrh	r3, [r3, #8]
    26ee:	3301      	adds	r3, #1
    26f0:	b29a      	uxth	r2, r3
    26f2:	687b      	ldr	r3, [r7, #4]
    26f4:	811a      	strh	r2, [r3, #8]
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	891a      	ldrh	r2, [r3, #8]
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	8a1b      	ldrh	r3, [r3, #16]
    26fe:	429a      	cmp	r2, r3
    2700:	d107      	bne.n	2712 <InterruptRx+0x4e>
      DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to be received. */
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	2200      	movs	r2, #0
    2706:	821a      	strh	r2, [r3, #16]
      ASerialLdd1_OnBlockReceived(DeviceDataPrv->UserDataPtr);
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	69db      	ldr	r3, [r3, #28]
    270c:	1c18      	adds	r0, r3, #0
    270e:	f7fe fc0f 	bl	f30 <ASerialLdd1_OnBlockReceived>
    }
  }
}
    2712:	46bd      	mov	sp, r7
    2714:	b003      	add	sp, #12
    2716:	bd90      	pop	{r4, r7, pc}
    2718:	4006b000 	.word	0x4006b000

0000271c <InterruptTx>:
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void InterruptTx(ASerialLdd1_TDeviceDataPtr DeviceDataPrv)
{
    271c:	b580      	push	{r7, lr}
    271e:	b082      	sub	sp, #8
    2720:	af00      	add	r7, sp, #0
    2722:	6078      	str	r0, [r7, #4]

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	8a5a      	ldrh	r2, [r3, #18]
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	8b1b      	ldrh	r3, [r3, #24]
    272c:	429a      	cmp	r2, r3
    272e:	d21c      	bcs.n	276a <InterruptTx+0x4e>
    UART_PDD_PutChar8(UART1_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
    2730:	4a19      	ldr	r2, [pc, #100]	; (2798 <InterruptTx+0x7c>)
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	695b      	ldr	r3, [r3, #20]
    2736:	7819      	ldrb	r1, [r3, #0]
    2738:	71d1      	strb	r1, [r2, #7]
    273a:	1c5a      	adds	r2, r3, #1
    273c:	687b      	ldr	r3, [r7, #4]
    273e:	615a      	str	r2, [r3, #20]
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	8a5b      	ldrh	r3, [r3, #18]
    2744:	3301      	adds	r3, #1
    2746:	b29a      	uxth	r2, r3
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	825a      	strh	r2, [r3, #18]
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
    274c:	687b      	ldr	r3, [r7, #4]
    274e:	8a5a      	ldrh	r2, [r3, #18]
    2750:	687b      	ldr	r3, [r7, #4]
    2752:	8b1b      	ldrh	r3, [r3, #24]
    2754:	429a      	cmp	r2, r3
    2756:	d11c      	bne.n	2792 <InterruptTx+0x76>
      DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	2200      	movs	r2, #0
    275c:	831a      	strh	r2, [r3, #24]
      ASerialLdd1_OnBlockSent(DeviceDataPrv->UserDataPtr);
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	69db      	ldr	r3, [r3, #28]
    2762:	1c18      	adds	r0, r3, #0
    2764:	f7fe fc24 	bl	fb0 <ASerialLdd1_OnBlockSent>
    2768:	e013      	b.n	2792 <InterruptTx+0x76>
    }
  } else {
    UART_PDD_DisableInterrupt(UART1_BASE_PTR, UART_PDD_INTERRUPT_TRANSMITTER); /* Disable TX interrupt */
    276a:	4b0b      	ldr	r3, [pc, #44]	; (2798 <InterruptTx+0x7c>)
    276c:	4a0a      	ldr	r2, [pc, #40]	; (2798 <InterruptTx+0x7c>)
    276e:	78d2      	ldrb	r2, [r2, #3]
    2770:	b2d1      	uxtb	r1, r2
    2772:	227f      	movs	r2, #127	; 0x7f
    2774:	400a      	ands	r2, r1
    2776:	b2d2      	uxtb	r2, r2
    2778:	70da      	strb	r2, [r3, #3]
    277a:	4b07      	ldr	r3, [pc, #28]	; (2798 <InterruptTx+0x7c>)
    277c:	4a06      	ldr	r2, [pc, #24]	; (2798 <InterruptTx+0x7c>)
    277e:	7992      	ldrb	r2, [r2, #6]
    2780:	b2d2      	uxtb	r2, r2
    2782:	719a      	strb	r2, [r3, #6]
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_INT */
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	881b      	ldrh	r3, [r3, #0]
    2788:	2201      	movs	r2, #1
    278a:	4393      	bics	r3, r2
    278c:	b29a      	uxth	r2, r3
    278e:	687b      	ldr	r3, [r7, #4]
    2790:	801a      	strh	r2, [r3, #0]
  }
}
    2792:	46bd      	mov	sp, r7
    2794:	b002      	add	sp, #8
    2796:	bd80      	pop	{r7, pc}
    2798:	4006b000 	.word	0x4006b000

0000279c <ASerialLdd1_Interrupt>:
**         interrupt. Calls InterruptTX/InterruptRX methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(ASerialLdd1_Interrupt)
{
    279c:	b5f0      	push	{r4, r5, r6, r7, lr}
    279e:	4647      	mov	r7, r8
    27a0:	b480      	push	{r7}
    27a2:	b082      	sub	sp, #8
    27a4:	af00      	add	r7, sp, #0
  /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv = INT_UART1__DEFAULT_RTOS_ISRPARAM;
    27a6:	4b38      	ldr	r3, [pc, #224]	; (2888 <ASerialLdd1_Interrupt+0xec>)
    27a8:	681b      	ldr	r3, [r3, #0]
    27aa:	607b      	str	r3, [r7, #4]
  register uint16_t StatReg = UART_PDD_ReadInterruptStatusReg(UART1_BASE_PTR); /* Read status register */
    27ac:	4b37      	ldr	r3, [pc, #220]	; (288c <ASerialLdd1_Interrupt+0xf0>)
    27ae:	791b      	ldrb	r3, [r3, #4]
    27b0:	b2db      	uxtb	r3, r3
    27b2:	1c1c      	adds	r4, r3, #0
  register uint16_t OnErrorFlags = 0U; /* Temporary variable for flags */
    27b4:	2500      	movs	r5, #0
  register uint8_t  OnBreakFlag = 0U;  /* Temporary variable flag for OnBreak event */
    27b6:	2600      	movs	r6, #0
  register uint16_t Data;              /* Temporary variable for data */

  if (StatReg & (UART_S1_NF_MASK | UART_S1_OR_MASK | UART_S1_FE_MASK | UART_S1_PF_MASK)) { /* Is any error flag set? */
    27b8:	1c22      	adds	r2, r4, #0
    27ba:	230f      	movs	r3, #15
    27bc:	4013      	ands	r3, r2
    27be:	d048      	beq.n	2852 <ASerialLdd1_Interrupt+0xb6>
    Data = (uint16_t)UART_PDD_GetChar8(UART1_BASE_PTR); /* Read an 8-bit character from receiver */
    27c0:	4b32      	ldr	r3, [pc, #200]	; (288c <ASerialLdd1_Interrupt+0xf0>)
    27c2:	79db      	ldrb	r3, [r3, #7]
    27c4:	b2db      	uxtb	r3, r3
    27c6:	4698      	mov	r8, r3
    if ((StatReg & UART_S1_FE_MASK) != 0U) { /* Is the framing error detected? */
    27c8:	1c22      	adds	r2, r4, #0
    27ca:	2302      	movs	r3, #2
    27cc:	4013      	ands	r3, r2
    27ce:	d013      	beq.n	27f8 <ASerialLdd1_Interrupt+0x5c>
      if (((StatReg & UART_S1_RDRF_MASK) != 0U) && (Data == 0U)) { /* Is the zero character in the receiver? */
    27d0:	1c22      	adds	r2, r4, #0
    27d2:	2320      	movs	r3, #32
    27d4:	4013      	ands	r3, r2
    27d6:	d00c      	beq.n	27f2 <ASerialLdd1_Interrupt+0x56>
    27d8:	4642      	mov	r2, r8
    27da:	2a00      	cmp	r2, #0
    27dc:	d109      	bne.n	27f2 <ASerialLdd1_Interrupt+0x56>
        OnBreakFlag++;
    27de:	1c73      	adds	r3, r6, #1
    27e0:	b2de      	uxtb	r6, r3
        DeviceDataPrv->SerFlag |= BREAK_DETECTED; /* If yes then set the flag */
    27e2:	687b      	ldr	r3, [r7, #4]
    27e4:	881b      	ldrh	r3, [r3, #0]
    27e6:	2202      	movs	r2, #2
    27e8:	4313      	orrs	r3, r2
    27ea:	b29a      	uxth	r2, r3
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	801a      	strh	r2, [r3, #0]
    27f0:	e002      	b.n	27f8 <ASerialLdd1_Interrupt+0x5c>
      } else {
        OnErrorFlags |= LDD_SERIAL_FRAMING_ERROR; /* If yes then set the flag */
    27f2:	2304      	movs	r3, #4
    27f4:	432b      	orrs	r3, r5
    27f6:	b29d      	uxth	r5, r3
      }
    }
    if ((StatReg & UART_S1_OR_MASK) != 0U) { /* Is the overrun error flag set? */
    27f8:	1c22      	adds	r2, r4, #0
    27fa:	2308      	movs	r3, #8
    27fc:	4013      	ands	r3, r2
    27fe:	d002      	beq.n	2806 <ASerialLdd1_Interrupt+0x6a>
      OnErrorFlags |= LDD_SERIAL_RX_OVERRUN; /* If yes then set the flag */
    2800:	2301      	movs	r3, #1
    2802:	432b      	orrs	r3, r5
    2804:	b29d      	uxth	r5, r3
    }
    if ((StatReg & UART_S1_PF_MASK) != 0U) { /* Is the parity error flag set? */
    2806:	1c22      	adds	r2, r4, #0
    2808:	2301      	movs	r3, #1
    280a:	4013      	ands	r3, r2
    280c:	d002      	beq.n	2814 <ASerialLdd1_Interrupt+0x78>
      OnErrorFlags |= LDD_SERIAL_PARITY_ERROR; /* If yes then set the flag */
    280e:	2302      	movs	r3, #2
    2810:	432b      	orrs	r3, r5
    2812:	b29d      	uxth	r5, r3
    }
    if ((StatReg & UART_S1_NF_MASK) != 0U) { /* Is the noise error flag set? */
    2814:	1c22      	adds	r2, r4, #0
    2816:	2304      	movs	r3, #4
    2818:	4013      	ands	r3, r2
    281a:	d002      	beq.n	2822 <ASerialLdd1_Interrupt+0x86>
      OnErrorFlags |= LDD_SERIAL_NOISE_ERROR; /* If yes then set the flag */
    281c:	2308      	movs	r3, #8
    281e:	432b      	orrs	r3, r5
    2820:	b29d      	uxth	r5, r3
    }
    DeviceDataPrv->ErrFlag |= OnErrorFlags; /* Copy flags status to ErrFlag status variable */
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	685a      	ldr	r2, [r3, #4]
    2826:	1c2b      	adds	r3, r5, #0
    2828:	431a      	orrs	r2, r3
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	605a      	str	r2, [r3, #4]
    StatReg &= (uint16_t)(~(uint16_t)UART_S1_RDRF_MASK); /* Clear the receive data flag to discard the errorneous data */
    282e:	2320      	movs	r3, #32
    2830:	1c22      	adds	r2, r4, #0
    2832:	439a      	bics	r2, r3
    2834:	1c13      	adds	r3, r2, #0
    2836:	b29c      	uxth	r4, r3
    if (OnBreakFlag != 0U) {
    2838:	2e00      	cmp	r6, #0
    283a:	d005      	beq.n	2848 <ASerialLdd1_Interrupt+0xac>
      ASerialLdd1_OnBreak(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	69db      	ldr	r3, [r3, #28]
    2840:	1c18      	adds	r0, r3, #0
    2842:	f7fe fc41 	bl	10c8 <ASerialLdd1_OnBreak>
    2846:	e004      	b.n	2852 <ASerialLdd1_Interrupt+0xb6>
    } else {
      ASerialLdd1_OnError(DeviceDataPrv->UserDataPtr); /* Invoke user event */
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	69db      	ldr	r3, [r3, #28]
    284c:	1c18      	adds	r0, r3, #0
    284e:	f7fe fbf3 	bl	1038 <ASerialLdd1_OnError>
    }
  }
  if (StatReg & UART_S1_RDRF_MASK) {   /* Is the receiver's interrupt flag set? */
    2852:	1c22      	adds	r2, r4, #0
    2854:	2320      	movs	r3, #32
    2856:	4013      	ands	r3, r2
    2858:	d003      	beq.n	2862 <ASerialLdd1_Interrupt+0xc6>
    InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This routine is inlined. */
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	1c18      	adds	r0, r3, #0
    285e:	f7ff ff31 	bl	26c4 <InterruptRx>
  }
  if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	881b      	ldrh	r3, [r3, #0]
    2866:	1c1a      	adds	r2, r3, #0
    2868:	2301      	movs	r3, #1
    286a:	4013      	ands	r3, r2
    286c:	d007      	beq.n	287e <ASerialLdd1_Interrupt+0xe2>
    if (StatReg & UART_S1_TDRE_MASK) { /* Is the transmitter empty? */
    286e:	1c22      	adds	r2, r4, #0
    2870:	2380      	movs	r3, #128	; 0x80
    2872:	4013      	ands	r3, r2
    2874:	d003      	beq.n	287e <ASerialLdd1_Interrupt+0xe2>
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	1c18      	adds	r0, r3, #0
    287a:	f7ff ff4f 	bl	271c <InterruptTx>
    }
  }
}
    287e:	46bd      	mov	sp, r7
    2880:	b002      	add	sp, #8
    2882:	bc04      	pop	{r2}
    2884:	4690      	mov	r8, r2
    2886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2888:	1ffff1c0 	.word	0x1ffff1c0
    288c:	4006b000 	.word	0x4006b000

00002890 <ASerialLdd1_GetError>:
**                           the active clock configuration
**                           ERR_DISABLED - Component is disabled
*/
/* ===================================================================*/
LDD_TError ASerialLdd1_GetError(LDD_TDeviceData *DeviceDataPtr, LDD_SERIAL_TError *ErrorPtr)
{
    2890:	b580      	push	{r7, lr}
    2892:	b084      	sub	sp, #16
    2894:	af00      	add	r7, sp, #0
    2896:	6078      	str	r0, [r7, #4]
    2898:	6039      	str	r1, [r7, #0]
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv = (ASerialLdd1_TDeviceDataPtr)DeviceDataPtr;
    289a:	687b      	ldr	r3, [r7, #4]
    289c:	60fb      	str	r3, [r7, #12]

  /* {Default RTOS Adapter} Critical section begin, general PE function is used */
  EnterCritical();
    289e:	1c3b      	adds	r3, r7, #0
    28a0:	330b      	adds	r3, #11
    28a2:	f3ef 8010 	mrs	r0, PRIMASK
    28a6:	b672      	cpsid	i
    28a8:	7018      	strb	r0, [r3, #0]
    28aa:	4b14      	ldr	r3, [pc, #80]	; (28fc <ASerialLdd1_GetError+0x6c>)
    28ac:	781b      	ldrb	r3, [r3, #0]
    28ae:	b2db      	uxtb	r3, r3
    28b0:	3301      	adds	r3, #1
    28b2:	b2db      	uxtb	r3, r3
    28b4:	4a11      	ldr	r2, [pc, #68]	; (28fc <ASerialLdd1_GetError+0x6c>)
    28b6:	1c19      	adds	r1, r3, #0
    28b8:	7011      	strb	r1, [r2, #0]
    28ba:	2b01      	cmp	r3, #1
    28bc:	d104      	bne.n	28c8 <ASerialLdd1_GetError+0x38>
    28be:	1c3b      	adds	r3, r7, #0
    28c0:	330b      	adds	r3, #11
    28c2:	781a      	ldrb	r2, [r3, #0]
    28c4:	4b0e      	ldr	r3, [pc, #56]	; (2900 <ASerialLdd1_GetError+0x70>)
    28c6:	701a      	strb	r2, [r3, #0]
  *ErrorPtr = DeviceDataPrv->ErrFlag;
    28c8:	68fb      	ldr	r3, [r7, #12]
    28ca:	685a      	ldr	r2, [r3, #4]
    28cc:	683b      	ldr	r3, [r7, #0]
    28ce:	601a      	str	r2, [r3, #0]
  DeviceDataPrv->ErrFlag = 0x00U;      /* Reset error flags */
    28d0:	68fb      	ldr	r3, [r7, #12]
    28d2:	2200      	movs	r2, #0
    28d4:	605a      	str	r2, [r3, #4]
  /* {Default RTOS Adapter} Critical section end, general PE function is used */
  ExitCritical();
    28d6:	4b09      	ldr	r3, [pc, #36]	; (28fc <ASerialLdd1_GetError+0x6c>)
    28d8:	781b      	ldrb	r3, [r3, #0]
    28da:	b2db      	uxtb	r3, r3
    28dc:	3b01      	subs	r3, #1
    28de:	b2db      	uxtb	r3, r3
    28e0:	4a06      	ldr	r2, [pc, #24]	; (28fc <ASerialLdd1_GetError+0x6c>)
    28e2:	1c19      	adds	r1, r3, #0
    28e4:	7011      	strb	r1, [r2, #0]
    28e6:	2b00      	cmp	r3, #0
    28e8:	d103      	bne.n	28f2 <ASerialLdd1_GetError+0x62>
    28ea:	4b05      	ldr	r3, [pc, #20]	; (2900 <ASerialLdd1_GetError+0x70>)
    28ec:	7818      	ldrb	r0, [r3, #0]
    28ee:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
    28f2:	2300      	movs	r3, #0
}
    28f4:	1c18      	adds	r0, r3, #0
    28f6:	46bd      	mov	sp, r7
    28f8:	b004      	add	sp, #16
    28fa:	bd80      	pop	{r7, pc}
    28fc:	1ffff148 	.word	0x1ffff148
    2900:	1ffff1e8 	.word	0x1ffff1e8

00002904 <zero_fill_bss>:



static void zero_fill_bss(void)

{
    2904:	b580      	push	{r7, lr}
    2906:	af00      	add	r7, sp, #0

	extern char __END_BSS[];



	memset(__START_BSS, 0, (__END_BSS - __START_BSS));
    2908:	4a05      	ldr	r2, [pc, #20]	; (2920 <zero_fill_bss+0x1c>)
    290a:	4b06      	ldr	r3, [pc, #24]	; (2924 <zero_fill_bss+0x20>)
    290c:	1ad3      	subs	r3, r2, r3
    290e:	4a05      	ldr	r2, [pc, #20]	; (2924 <zero_fill_bss+0x20>)
    2910:	1c10      	adds	r0, r2, #0
    2912:	2100      	movs	r1, #0
    2914:	1c1a      	adds	r2, r3, #0
    2916:	f000 fb8d 	bl	3034 <memset>

}
    291a:	46bd      	mov	sp, r7
    291c:	bd80      	pop	{r7, pc}
    291e:	46c0      	nop			; (mov r8, r8)
    2920:	1ffff1ec 	.word	0x1ffff1ec
    2924:	1ffff000 	.word	0x1ffff000

00002928 <__thumb_startup>:

{

		// Setup registers

		__init_registers();
    2928:	f000 fc54 	bl	31d4 <__init_registers>



		// setup hardware

		__init_hardware();
    292c:	f7fe fd06 	bl	133c <__init_hardware>

#endif

		//	zero-fill the .bss section

		zero_fill_bss();
    2930:	f7ff ffe8 	bl	2904 <zero_fill_bss>

#if SUPPORT_ROM_TO_RAM

		if (__S_romp != 0L)

			__copy_rom_sections_to_ram();
    2934:	f000 fc26 	bl	3184 <__copy_rom_sections_to_ram>



		//	call C++ static initializers

		__call_static_initializers();
    2938:	f000 fbc2 	bl	30c0 <__init_cpp>



		// initializations before main, user specific

		__init_user();
    293c:	f000 fc58 	bl	31f0 <__init_user>

		exit(main(__argc_argv(__MAX_CMDLINE_ARGS, argv), argv));

#else

		exit(main(0, argv));
    2940:	4b04      	ldr	r3, [pc, #16]	; (2954 <__thumb_startup+0x2c>)
    2942:	2000      	movs	r0, #0
    2944:	1c19      	adds	r1, r3, #0
    2946:	f000 f80d 	bl	2964 <main>
    294a:	1c03      	adds	r3, r0, #0
    294c:	1c18      	adds	r0, r3, #0
    294e:	f000 fb55 	bl	2ffc <exit>
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	1ffff1c4 	.word	0x1ffff1c4

00002958 <_ExitProcess>:

extern void _ExitProcess(int status) _EWL_WEAK;

extern void _ExitProcess(int status)

{
    2958:	b580      	push	{r7, lr}
    295a:	b082      	sub	sp, #8
    295c:	af00      	add	r7, sp, #0
    295e:	6078      	str	r0, [r7, #4]

	sys_exit(status);

#endif

	while (1);
    2960:	e7fe      	b.n	2960 <_ExitProcess+0x8>
    2962:	46c0      	nop			; (mov r8, r8)

00002964 <main>:


/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
    2964:	b580      	push	{r7, lr}
    2966:	b086      	sub	sp, #24
    2968:	af00      	add	r7, sp, #0
    
   
  
  uint16_t i; // for serial debug only
  
    flagStopWhite=0;
    296a:	1c3b      	adds	r3, r7, #0
    296c:	3316      	adds	r3, #22
    296e:	2200      	movs	r2, #0
    2970:	801a      	strh	r2, [r3, #0]
  
  
  /* initialize the correction counters 
   * they follow how often in a loop cycle the error appears
   */
  correctionS1 = 0;
    2972:	1c3b      	adds	r3, r7, #0
    2974:	3314      	adds	r3, #20
    2976:	2200      	movs	r2, #0
    2978:	801a      	strh	r2, [r3, #0]
  correctionS2 = 0;
    297a:	1c3b      	adds	r3, r7, #0
    297c:	3312      	adds	r3, #18
    297e:	2200      	movs	r2, #0
    2980:	801a      	strh	r2, [r3, #0]
  
  
  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
    2982:	f7fe fd6b 	bl	145c <PE_low_level_init>
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */

  initializePlatform();
    2986:	f000 f9a5 	bl	2cd4 <initializePlatform>
  
  /* Wait for a button press before doing anything*/
  while(Button_GetVal()) {}
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	4bc9      	ldr	r3, [pc, #804]	; (2cb4 <main+0x350>)
    298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2990:	1c18      	adds	r0, r3, #0
    2992:	f7ff f9f5 	bl	1d80 <BitIoLdd11_GetVal>
    2996:	1c03      	adds	r3, r0, #0
    2998:	2b00      	cmp	r3, #0
    299a:	d1f7      	bne.n	298c <main+0x28>
    299c:	e000      	b.n	29a0 <main+0x3c>
  		  }

  	  }
#endif
  	    	   	  
  }
    299e:	46c0      	nop			; (mov r8, r8)
  
  while (1)
  {

  	  /* Read the input sensors */
  	  readSensors(sensorsVector);
    29a0:	1c3b      	adds	r3, r7, #0
    29a2:	1c18      	adds	r0, r3, #0
    29a4:	f000 f9b6 	bl	2d14 <readSensors>

	  robotTurnsLeftMotor = sensorsVector[0] + sensorsVector[1] + sensorsVector[2];
    29a8:	1c3b      	adds	r3, r7, #0
    29aa:	881a      	ldrh	r2, [r3, #0]
    29ac:	1c3b      	adds	r3, r7, #0
    29ae:	885b      	ldrh	r3, [r3, #2]
    29b0:	18d3      	adds	r3, r2, r3
    29b2:	b299      	uxth	r1, r3
    29b4:	1c3b      	adds	r3, r7, #0
    29b6:	889a      	ldrh	r2, [r3, #4]
    29b8:	1c3b      	adds	r3, r7, #0
    29ba:	330e      	adds	r3, #14
    29bc:	188a      	adds	r2, r1, r2
    29be:	801a      	strh	r2, [r3, #0]
	  robotTurnsRightMotor = sensorsVector[3] + sensorsVector [4] + sensorsVector[5];
    29c0:	1c3b      	adds	r3, r7, #0
    29c2:	88da      	ldrh	r2, [r3, #6]
    29c4:	1c3b      	adds	r3, r7, #0
    29c6:	891b      	ldrh	r3, [r3, #8]
    29c8:	18d3      	adds	r3, r2, r3
    29ca:	b299      	uxth	r1, r3
    29cc:	1c3b      	adds	r3, r7, #0
    29ce:	895a      	ldrh	r2, [r3, #10]
    29d0:	1c3b      	adds	r3, r7, #0
    29d2:	330c      	adds	r3, #12
    29d4:	188a      	adds	r2, r1, r2
    29d6:	801a      	strh	r2, [r3, #0]

	  
	  
#if 1 	  
  	  for (i = 0; i < NUMBER_OF_SENSORS; i++)
    29d8:	1c3b      	adds	r3, r7, #0
    29da:	3310      	adds	r3, #16
    29dc:	2200      	movs	r2, #0
    29de:	801a      	strh	r2, [r3, #0]
    29e0:	e012      	b.n	2a08 <main+0xa4>
  	  {
  		  Term2_SendNum(sensorsVector[i]);
    29e2:	1c3b      	adds	r3, r7, #0
    29e4:	3310      	adds	r3, #16
    29e6:	881a      	ldrh	r2, [r3, #0]
    29e8:	1c3b      	adds	r3, r7, #0
    29ea:	0052      	lsls	r2, r2, #1
    29ec:	5ad3      	ldrh	r3, [r2, r3]
    29ee:	1c18      	adds	r0, r3, #0
    29f0:	f7fd ff36 	bl	860 <Term2_SendNum>
  		  Term2_SendChar(' ');
    29f4:	2020      	movs	r0, #32
    29f6:	f7fd fe61 	bl	6bc <Term2_SendChar>
	  robotTurnsRightMotor = sensorsVector[3] + sensorsVector [4] + sensorsVector[5];

	  
	  
#if 1 	  
  	  for (i = 0; i < NUMBER_OF_SENSORS; i++)
    29fa:	1c3b      	adds	r3, r7, #0
    29fc:	3310      	adds	r3, #16
    29fe:	1c3a      	adds	r2, r7, #0
    2a00:	3210      	adds	r2, #16
    2a02:	8812      	ldrh	r2, [r2, #0]
    2a04:	3201      	adds	r2, #1
    2a06:	801a      	strh	r2, [r3, #0]
    2a08:	1c3b      	adds	r3, r7, #0
    2a0a:	3310      	adds	r3, #16
    2a0c:	881b      	ldrh	r3, [r3, #0]
    2a0e:	2b05      	cmp	r3, #5
    2a10:	d9e7      	bls.n	29e2 <main+0x7e>
  	  {
  		  Term2_SendNum(sensorsVector[i]);
  		  Term2_SendChar(' ');
  	  }
  		  Term2_SendChar('R');
    2a12:	2052      	movs	r0, #82	; 0x52
    2a14:	f7fd fe52 	bl	6bc <Term2_SendChar>
  		  Term2_SendChar('=');		  
    2a18:	203d      	movs	r0, #61	; 0x3d
    2a1a:	f7fd fe4f 	bl	6bc <Term2_SendChar>
  		  Term2_SendNum(robotTurnsRightMotor);
    2a1e:	1c3b      	adds	r3, r7, #0
    2a20:	330c      	adds	r3, #12
    2a22:	881b      	ldrh	r3, [r3, #0]
    2a24:	1c18      	adds	r0, r3, #0
    2a26:	f7fd ff1b 	bl	860 <Term2_SendNum>
  		  Term2_SendChar(' ');
    2a2a:	2020      	movs	r0, #32
    2a2c:	f7fd fe46 	bl	6bc <Term2_SendChar>
  		  Term2_SendChar('L');
    2a30:	204c      	movs	r0, #76	; 0x4c
    2a32:	f7fd fe43 	bl	6bc <Term2_SendChar>
  		  Term2_SendChar('=');		  
    2a36:	203d      	movs	r0, #61	; 0x3d
    2a38:	f7fd fe40 	bl	6bc <Term2_SendChar>
  		  Term2_SendNum(robotTurnsLeftMotor);
    2a3c:	1c3b      	adds	r3, r7, #0
    2a3e:	330e      	adds	r3, #14
    2a40:	881b      	ldrh	r3, [r3, #0]
    2a42:	1c18      	adds	r0, r3, #0
    2a44:	f7fd ff0c 	bl	860 <Term2_SendNum>
  		  Term2_CRLF();  	  
    2a48:	f7fd fe4a 	bl	6e0 <Term2_CRLF>
  		//setRightMotorSpeed(FULL_SPEED);
  		//setLeftMotorSpeed(FULL_SPEED);
  		  
  		  
  	  /* motor right turns faster case robot turns left as issue is on the left side  */
  	  if (robotTurnsRightMotor > robotTurnsLeftMotor){
    2a4c:	1c3a      	adds	r2, r7, #0
    2a4e:	320c      	adds	r2, #12
    2a50:	1c3b      	adds	r3, r7, #0
    2a52:	330e      	adds	r3, #14
    2a54:	8812      	ldrh	r2, [r2, #0]
    2a56:	881b      	ldrh	r3, [r3, #0]
    2a58:	429a      	cmp	r2, r3
    2a5a:	d95e      	bls.n	2b1a <main+0x1b6>
  		  
  		/* if last sensor is seeing the black line 
  		 * is pretty bad so speed has to be pretty high
  		 * also if situation repeats correction must be more dramatic
  		 * */
  		  if (sensorsVector[0]==0 && sensorsVector[1]!= 0){ 
    2a5c:	1c3b      	adds	r3, r7, #0
    2a5e:	881b      	ldrh	r3, [r3, #0]
    2a60:	2b00      	cmp	r3, #0
    2a62:	d12d      	bne.n	2ac0 <main+0x15c>
    2a64:	1c3b      	adds	r3, r7, #0
    2a66:	885b      	ldrh	r3, [r3, #2]
    2a68:	2b00      	cmp	r3, #0
    2a6a:	d029      	beq.n	2ac0 <main+0x15c>
  			
  			  if(correctionS1 < TOLERANCE_S1)
    2a6c:	1c3b      	adds	r3, r7, #0
    2a6e:	3314      	adds	r3, #20
    2a70:	881b      	ldrh	r3, [r3, #0]
    2a72:	2b18      	cmp	r3, #24
    2a74:	d806      	bhi.n	2a84 <main+0x120>
  				correctionS1= correctionS1 + CORRECTION_STEP_S1;
    2a76:	1c3b      	adds	r3, r7, #0
    2a78:	3314      	adds	r3, #20
    2a7a:	1c3a      	adds	r2, r7, #0
    2a7c:	3214      	adds	r2, #20
    2a7e:	8812      	ldrh	r2, [r2, #0]
    2a80:	3205      	adds	r2, #5
    2a82:	801a      	strh	r2, [r3, #0]
  			   			  
  			  setRightMotorSpeed(FULL_SPEED);
    2a84:	2032      	movs	r0, #50	; 0x32
    2a86:	f000 fa79 	bl	2f7c <setRightMotorSpeed>
  			  setRightMotorSpeed(SPEED_MOTOR_S1_HIGH_REFERENCE + correctionS1);
    2a8a:	1c3b      	adds	r3, r7, #0
    2a8c:	3314      	adds	r3, #20
    2a8e:	881b      	ldrh	r3, [r3, #0]
    2a90:	3319      	adds	r3, #25
    2a92:	b29b      	uxth	r3, r3
    2a94:	1c18      	adds	r0, r3, #0
    2a96:	f000 fa71 	bl	2f7c <setRightMotorSpeed>
  			  setLeftMotorSpeed(SPEED_MOTOR_S1_LOW_REFERENCE - correctionS1);
    2a9a:	1c3b      	adds	r3, r7, #0
    2a9c:	3314      	adds	r3, #20
    2a9e:	881b      	ldrh	r3, [r3, #0]
    2aa0:	2232      	movs	r2, #50	; 0x32
    2aa2:	1ad3      	subs	r3, r2, r3
    2aa4:	b29b      	uxth	r3, r3
    2aa6:	1c18      	adds	r0, r3, #0
    2aa8:	f000 fa30 	bl	2f0c <setLeftMotorSpeed>
  		      
  			  /* clean up correction flag for RS2*/
  			  WAIT1_Waitus(WAIT_SENSORS_1);
    2aac:	23fa      	movs	r3, #250	; 0xfa
    2aae:	011b      	lsls	r3, r3, #4
    2ab0:	1c18      	adds	r0, r3, #0
    2ab2:	f7fd fd6d 	bl	590 <WAIT1_WaitCycles>
  			  
  			  correctionS2 = 0;
    2ab6:	1c3b      	adds	r3, r7, #0
    2ab8:	3312      	adds	r3, #18
    2aba:	2200      	movs	r2, #0
    2abc:	801a      	strh	r2, [r3, #0]
    2abe:	e028      	b.n	2b12 <main+0x1ae>
  		     
  		  /* the case in which second sensor sees black line
  		   * less critical but also with potential of becoming an 
  		   * issue
  		   */
  		  else if( sensorsVector[1]==0){ 
    2ac0:	1c3b      	adds	r3, r7, #0
    2ac2:	885b      	ldrh	r3, [r3, #2]
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d124      	bne.n	2b12 <main+0x1ae>
  			
  			      if(correctionS2 < TOLERANCE_S2)
    2ac8:	1c3b      	adds	r3, r7, #0
    2aca:	3312      	adds	r3, #18
    2acc:	881b      	ldrh	r3, [r3, #0]
    2ace:	2b18      	cmp	r3, #24
    2ad0:	d806      	bhi.n	2ae0 <main+0x17c>
  				     correctionS2 = correctionS2 + CORRECTION_STEP_S2;
    2ad2:	1c3b      	adds	r3, r7, #0
    2ad4:	3312      	adds	r3, #18
    2ad6:	1c3a      	adds	r2, r7, #0
    2ad8:	3212      	adds	r2, #18
    2ada:	8812      	ldrh	r2, [r2, #0]
    2adc:	3205      	adds	r2, #5
    2ade:	801a      	strh	r2, [r3, #0]
  			   			  
  			      setRightMotorSpeed(SPEED_MOTOR_S2_HIGH_REFERENCE + correctionS2);
    2ae0:	1c3b      	adds	r3, r7, #0
    2ae2:	3312      	adds	r3, #18
    2ae4:	881b      	ldrh	r3, [r3, #0]
    2ae6:	3332      	adds	r3, #50	; 0x32
    2ae8:	b29b      	uxth	r3, r3
    2aea:	1c18      	adds	r0, r3, #0
    2aec:	f000 fa46 	bl	2f7c <setRightMotorSpeed>
  			      setLeftMotorSpeed(SPEED_MOTOR_S2_LOW_REFERENCE - correctionS2);
    2af0:	1c3b      	adds	r3, r7, #0
    2af2:	3312      	adds	r3, #18
    2af4:	881b      	ldrh	r3, [r3, #0]
    2af6:	2219      	movs	r2, #25
    2af8:	1ad3      	subs	r3, r2, r3
    2afa:	b29b      	uxth	r3, r3
    2afc:	1c18      	adds	r0, r3, #0
    2afe:	f000 fa05 	bl	2f0c <setLeftMotorSpeed>
  			  
  			  
  			      /* clean up the correction flag for RS1 */
  			      correctionS1 = 0;
    2b02:	1c3b      	adds	r3, r7, #0
    2b04:	3314      	adds	r3, #20
    2b06:	2200      	movs	r2, #0
    2b08:	801a      	strh	r2, [r3, #0]
  			  
  			      WAIT1_Waitus(WAIT_SENSORS_2);
    2b0a:	4b6b      	ldr	r3, [pc, #428]	; (2cb8 <main+0x354>)
    2b0c:	1c18      	adds	r0, r3, #0
    2b0e:	f7fd fd3f 	bl	590 <WAIT1_WaitCycles>
  		  
  		          }
  		  
  		  flagStopWhite=0;
    2b12:	1c3b      	adds	r3, r7, #0
    2b14:	3316      	adds	r3, #22
    2b16:	2200      	movs	r2, #0
    2b18:	801a      	strh	r2, [r3, #0]
  		    	  
  	  }
  	  
  	  /* motor left turns robot goes to right as issue is on the right side  */ 
  	  if ( robotTurnsLeftMotor > robotTurnsRightMotor){
    2b1a:	1c3a      	adds	r2, r7, #0
    2b1c:	320e      	adds	r2, #14
    2b1e:	1c3b      	adds	r3, r7, #0
    2b20:	330c      	adds	r3, #12
    2b22:	8812      	ldrh	r2, [r2, #0]
    2b24:	881b      	ldrh	r3, [r3, #0]
    2b26:	429a      	cmp	r2, r3
    2b28:	d95b      	bls.n	2be2 <main+0x27e>
   
  		/* if last sensor is seeing the black line 
  		 * is pretty bad so speed has to be pretty high
  		 * also if situation repeats correction must be more dramatic
  		*/
  		  if (sensorsVector[5]==0 && sensorsVector[4]!=0){ 
    2b2a:	1c3b      	adds	r3, r7, #0
    2b2c:	895b      	ldrh	r3, [r3, #10]
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d12a      	bne.n	2b88 <main+0x224>
    2b32:	1c3b      	adds	r3, r7, #0
    2b34:	891b      	ldrh	r3, [r3, #8]
    2b36:	2b00      	cmp	r3, #0
    2b38:	d026      	beq.n	2b88 <main+0x224>
  		  			
  		  	  if(correctionS1 < TOLERANCE_S1)
    2b3a:	1c3b      	adds	r3, r7, #0
    2b3c:	3314      	adds	r3, #20
    2b3e:	881b      	ldrh	r3, [r3, #0]
    2b40:	2b18      	cmp	r3, #24
    2b42:	d806      	bhi.n	2b52 <main+0x1ee>
  		  			correctionS1= correctionS1 + CORRECTION_STEP_S1;
    2b44:	1c3b      	adds	r3, r7, #0
    2b46:	3314      	adds	r3, #20
    2b48:	1c3a      	adds	r2, r7, #0
    2b4a:	3214      	adds	r2, #20
    2b4c:	8812      	ldrh	r2, [r2, #0]
    2b4e:	3205      	adds	r2, #5
    2b50:	801a      	strh	r2, [r3, #0]
  		  			   			  
  		  	  setRightMotorSpeed(SPEED_MOTOR_S1_LOW_REFERENCE - correctionS1);
    2b52:	1c3b      	adds	r3, r7, #0
    2b54:	3314      	adds	r3, #20
    2b56:	881b      	ldrh	r3, [r3, #0]
    2b58:	2232      	movs	r2, #50	; 0x32
    2b5a:	1ad3      	subs	r3, r2, r3
    2b5c:	b29b      	uxth	r3, r3
    2b5e:	1c18      	adds	r0, r3, #0
    2b60:	f000 fa0c 	bl	2f7c <setRightMotorSpeed>
  		  	  setLeftMotorSpeed(SPEED_MOTOR_S1_HIGH_REFERENCE + correctionS1);
    2b64:	1c3b      	adds	r3, r7, #0
    2b66:	3314      	adds	r3, #20
    2b68:	881b      	ldrh	r3, [r3, #0]
    2b6a:	3319      	adds	r3, #25
    2b6c:	b29b      	uxth	r3, r3
    2b6e:	1c18      	adds	r0, r3, #0
    2b70:	f000 f9cc 	bl	2f0c <setLeftMotorSpeed>
  		  		  
  		      /* clean up correction flag for S2*/
  		  			  
  		  	  WAIT1_Waitus(WAIT_SENSORS_1); 
    2b74:	23fa      	movs	r3, #250	; 0xfa
    2b76:	011b      	lsls	r3, r3, #4
    2b78:	1c18      	adds	r0, r3, #0
    2b7a:	f7fd fd09 	bl	590 <WAIT1_WaitCycles>
  		  	  correctionS2 = 0;
    2b7e:	1c3b      	adds	r3, r7, #0
    2b80:	3312      	adds	r3, #18
    2b82:	2200      	movs	r2, #0
    2b84:	801a      	strh	r2, [r3, #0]
    2b86:	e028      	b.n	2bda <main+0x276>
  		/* the case in which second sensor sees black line
  		  		  		   * less critical but also with potential of becoming an 
  		  		  		   * issue
  		  		  		   */
  		  
  		  else if (sensorsVector[4]==0){ 
    2b88:	1c3b      	adds	r3, r7, #0
    2b8a:	891b      	ldrh	r3, [r3, #8]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d124      	bne.n	2bda <main+0x276>
  		  			
  		  			  if(correctionS2 < TOLERANCE_S2)
    2b90:	1c3b      	adds	r3, r7, #0
    2b92:	3312      	adds	r3, #18
    2b94:	881b      	ldrh	r3, [r3, #0]
    2b96:	2b18      	cmp	r3, #24
    2b98:	d806      	bhi.n	2ba8 <main+0x244>
  		  				correctionS2 = correctionS2 + CORRECTION_STEP_S2;
    2b9a:	1c3b      	adds	r3, r7, #0
    2b9c:	3312      	adds	r3, #18
    2b9e:	1c3a      	adds	r2, r7, #0
    2ba0:	3212      	adds	r2, #18
    2ba2:	8812      	ldrh	r2, [r2, #0]
    2ba4:	3205      	adds	r2, #5
    2ba6:	801a      	strh	r2, [r3, #0]
  		  			   			  
  		  			  setRightMotorSpeed(SPEED_MOTOR_S2_LOW_REFERENCE - correctionS2);
    2ba8:	1c3b      	adds	r3, r7, #0
    2baa:	3312      	adds	r3, #18
    2bac:	881b      	ldrh	r3, [r3, #0]
    2bae:	2219      	movs	r2, #25
    2bb0:	1ad3      	subs	r3, r2, r3
    2bb2:	b29b      	uxth	r3, r3
    2bb4:	1c18      	adds	r0, r3, #0
    2bb6:	f000 f9e1 	bl	2f7c <setRightMotorSpeed>
  		  			  setLeftMotorSpeed(SPEED_MOTOR_S2_HIGH_REFERENCE + correctionS2);
    2bba:	1c3b      	adds	r3, r7, #0
    2bbc:	3312      	adds	r3, #18
    2bbe:	881b      	ldrh	r3, [r3, #0]
    2bc0:	3332      	adds	r3, #50	; 0x32
    2bc2:	b29b      	uxth	r3, r3
    2bc4:	1c18      	adds	r0, r3, #0
    2bc6:	f000 f9a1 	bl	2f0c <setLeftMotorSpeed>
  		  		    
  		  			  /* clean up the correction flag for RS1 */
  		  			  correctionS1 = 0;
    2bca:	1c3b      	adds	r3, r7, #0
    2bcc:	3314      	adds	r3, #20
    2bce:	2200      	movs	r2, #0
    2bd0:	801a      	strh	r2, [r3, #0]
  		  			
  		  			  WAIT1_Waitus(WAIT_SENSORS_2);
    2bd2:	4b39      	ldr	r3, [pc, #228]	; (2cb8 <main+0x354>)
    2bd4:	1c18      	adds	r0, r3, #0
    2bd6:	f7fd fcdb 	bl	590 <WAIT1_WaitCycles>
  		  	 
  		      }
  		  		  
  		   flagStopWhite=0;
    2bda:	1c3b      	adds	r3, r7, #0
    2bdc:	3316      	adds	r3, #22
    2bde:	2200      	movs	r2, #0
    2be0:	801a      	strh	r2, [r3, #0]
  		  		    		  	  
  	  }
  	    	  
  	  
  	  //case line is correctly read and it should move full speed 
  	  if(robotTurnsRightMotor!=0 && robotTurnsLeftMotor != 0 && sensorsVector[2]==0 && sensorsVector[3]==0){
    2be2:	1c3b      	adds	r3, r7, #0
    2be4:	330c      	adds	r3, #12
    2be6:	881b      	ldrh	r3, [r3, #0]
    2be8:	2b00      	cmp	r3, #0
    2bea:	d02e      	beq.n	2c4a <main+0x2e6>
    2bec:	1c3b      	adds	r3, r7, #0
    2bee:	330e      	adds	r3, #14
    2bf0:	881b      	ldrh	r3, [r3, #0]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d029      	beq.n	2c4a <main+0x2e6>
    2bf6:	1c3b      	adds	r3, r7, #0
    2bf8:	889b      	ldrh	r3, [r3, #4]
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d125      	bne.n	2c4a <main+0x2e6>
    2bfe:	1c3b      	adds	r3, r7, #0
    2c00:	88db      	ldrh	r3, [r3, #6]
    2c02:	2b00      	cmp	r3, #0
    2c04:	d121      	bne.n	2c4a <main+0x2e6>
  		  
  		if(robotTurnsRightMotor==robotTurnsLeftMotor && robotTurnsRightMotor== 2){  
    2c06:	1c3a      	adds	r2, r7, #0
    2c08:	320c      	adds	r2, #12
    2c0a:	1c3b      	adds	r3, r7, #0
    2c0c:	330e      	adds	r3, #14
    2c0e:	8812      	ldrh	r2, [r2, #0]
    2c10:	881b      	ldrh	r3, [r3, #0]
    2c12:	429a      	cmp	r2, r3
    2c14:	d119      	bne.n	2c4a <main+0x2e6>
    2c16:	1c3b      	adds	r3, r7, #0
    2c18:	330c      	adds	r3, #12
    2c1a:	881b      	ldrh	r3, [r3, #0]
    2c1c:	2b02      	cmp	r3, #2
    2c1e:	d114      	bne.n	2c4a <main+0x2e6>
  			setRightMotorSpeed(FULL_SPEED);
    2c20:	2032      	movs	r0, #50	; 0x32
    2c22:	f000 f9ab 	bl	2f7c <setRightMotorSpeed>
  			setLeftMotorSpeed (FULL_SPEED);
    2c26:	2032      	movs	r0, #50	; 0x32
    2c28:	f000 f970 	bl	2f0c <setLeftMotorSpeed>
  			
  		    WAIT1_Waitus(WAIT_NORMAL);
    2c2c:	2006      	movs	r0, #6
    2c2e:	f7fd fcef 	bl	610 <WAIT1_Waitms>
  		
  		    correctionS1 = 0;
    2c32:	1c3b      	adds	r3, r7, #0
    2c34:	3314      	adds	r3, #20
    2c36:	2200      	movs	r2, #0
    2c38:	801a      	strh	r2, [r3, #0]
  		    correctionS2 = 0;
    2c3a:	1c3b      	adds	r3, r7, #0
    2c3c:	3312      	adds	r3, #18
    2c3e:	2200      	movs	r2, #0
    2c40:	801a      	strh	r2, [r3, #0]
  		    flagStopWhite=0;
    2c42:	1c3b      	adds	r3, r7, #0
    2c44:	3316      	adds	r3, #22
    2c46:	2200      	movs	r2, #0
    2c48:	801a      	strh	r2, [r3, #0]
  		}
	  }
  	  
  	  //case when it is on the black it also stops
  	  if (robotTurnsRightMotor==0 && robotTurnsLeftMotor == 0 ){
    2c4a:	1c3b      	adds	r3, r7, #0
    2c4c:	330c      	adds	r3, #12
    2c4e:	881b      	ldrh	r3, [r3, #0]
    2c50:	2b00      	cmp	r3, #0
    2c52:	d116      	bne.n	2c82 <main+0x31e>
    2c54:	1c3b      	adds	r3, r7, #0
    2c56:	330e      	adds	r3, #14
    2c58:	881b      	ldrh	r3, [r3, #0]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d111      	bne.n	2c82 <main+0x31e>
  		  
    		setRightMotorSpeed(0);
    2c5e:	2000      	movs	r0, #0
    2c60:	f000 f98c 	bl	2f7c <setRightMotorSpeed>
    		setLeftMotorSpeed (0);
    2c64:	2000      	movs	r0, #0
    2c66:	f000 f951 	bl	2f0c <setLeftMotorSpeed>
    		
    		correctionS1 = 0;
    2c6a:	1c3b      	adds	r3, r7, #0
    2c6c:	3314      	adds	r3, #20
    2c6e:	2200      	movs	r2, #0
    2c70:	801a      	strh	r2, [r3, #0]
   	        correctionS2 = 0;
    2c72:	1c3b      	adds	r3, r7, #0
    2c74:	3312      	adds	r3, #18
    2c76:	2200      	movs	r2, #0
    2c78:	801a      	strh	r2, [r3, #0]
  	        
  	        flagStopWhite=0;
    2c7a:	1c3b      	adds	r3, r7, #0
    2c7c:	3316      	adds	r3, #22
    2c7e:	2200      	movs	r2, #0
    2c80:	801a      	strh	r2, [r3, #0]
  	  }
  	  
  	  // case when it is on white board not sensor read black it stops
  	  
  	  if (robotTurnsRightMotor==3 && robotTurnsLeftMotor == 3 ){
    2c82:	1c3b      	adds	r3, r7, #0
    2c84:	330c      	adds	r3, #12
    2c86:	881b      	ldrh	r3, [r3, #0]
    2c88:	2b03      	cmp	r3, #3
    2c8a:	d000      	beq.n	2c8e <main+0x32a>
    2c8c:	e687      	b.n	299e <main+0x3a>
    2c8e:	1c3b      	adds	r3, r7, #0
    2c90:	330e      	adds	r3, #14
    2c92:	881b      	ldrh	r3, [r3, #0]
    2c94:	2b03      	cmp	r3, #3
    2c96:	d000      	beq.n	2c9a <main+0x336>
    2c98:	e681      	b.n	299e <main+0x3a>
  		  
  		  if(flagStopWhite==TIME_TO_STOP_ON_WHITE){
    2c9a:	1c3b      	adds	r3, r7, #0
    2c9c:	3316      	adds	r3, #22
    2c9e:	881b      	ldrh	r3, [r3, #0]
    2ca0:	2b96      	cmp	r3, #150	; 0x96
    2ca2:	d10b      	bne.n	2cbc <main+0x358>
  		   		setRightMotorSpeed(0);
    2ca4:	2000      	movs	r0, #0
    2ca6:	f000 f969 	bl	2f7c <setRightMotorSpeed>
    		    setLeftMotorSpeed (0);
    2caa:	2000      	movs	r0, #0
    2cac:	f000 f92e 	bl	2f0c <setLeftMotorSpeed>
  		  }

  	  }
#endif
  	    	   	  
  }
    2cb0:	e675      	b.n	299e <main+0x3a>
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	1ffff03c 	.word	0x1ffff03c
    2cb8:	00002710 	.word	0x00002710
  		  if(flagStopWhite==TIME_TO_STOP_ON_WHITE){
  		   		setRightMotorSpeed(0);
    		    setLeftMotorSpeed (0);
  		  }
  		  else{
  			    flagStopWhite++;
    2cbc:	1c3b      	adds	r3, r7, #0
    2cbe:	3316      	adds	r3, #22
    2cc0:	1c3a      	adds	r2, r7, #0
    2cc2:	3216      	adds	r2, #22
    2cc4:	8812      	ldrh	r2, [r2, #0]
    2cc6:	3201      	adds	r2, #1
    2cc8:	801a      	strh	r2, [r3, #0]
  			    WAIT1_Waitus(WAIT_NORMAL);
    2cca:	2006      	movs	r0, #6
    2ccc:	f7fd fca0 	bl	610 <WAIT1_Waitms>
  		  }

  	  }
#endif
  	    	   	  
  }
    2cd0:	e665      	b.n	299e <main+0x3a>
    2cd2:	46c0      	nop			; (mov r8, r8)

00002cd4 <initializePlatform>:
 * sensorsValue[n] = 1 if LSn/RSn reads white
 *   
 */
uint16 sensorsValue[NUMBER_OF_SENSORS];

void initializePlatform(){
    2cd4:	b580      	push	{r7, lr}
    2cd6:	af00      	add	r7, sp, #0
	
/* Initialize the PWMs that will be used to driver the motors*/
	PWM_dreapta_SetRatio16(0xFFFF); // 0xFFFF = duty cycle 0%
    2cd8:	4b0c      	ldr	r3, [pc, #48]	; (2d0c <initializePlatform+0x38>)
    2cda:	691a      	ldr	r2, [r3, #16]
    2cdc:	4b0c      	ldr	r3, [pc, #48]	; (2d10 <initializePlatform+0x3c>)
    2cde:	1c10      	adds	r0, r2, #0
    2ce0:	1c19      	adds	r1, r3, #0
    2ce2:	f7fe f80d 	bl	d00 <PwmLdd1_SetRatio16>
	PWM_stanga_SetRatio16(0xFFFF);
    2ce6:	4b09      	ldr	r3, [pc, #36]	; (2d0c <initializePlatform+0x38>)
    2ce8:	695a      	ldr	r2, [r3, #20]
    2cea:	4b09      	ldr	r3, [pc, #36]	; (2d10 <initializePlatform+0x3c>)
    2cec:	1c10      	adds	r0, r2, #0
    2cee:	1c19      	adds	r1, r3, #0
    2cf0:	f7fd ff7a 	bl	be8 <PwmLdd2_SetRatio16>
	PWM_dreapta_Enable();
    2cf4:	4b05      	ldr	r3, [pc, #20]	; (2d0c <initializePlatform+0x38>)
    2cf6:	691b      	ldr	r3, [r3, #16]
    2cf8:	1c18      	adds	r0, r3, #0
    2cfa:	f7fd ffe9 	bl	cd0 <PwmLdd1_Enable>
	PWM_stanga_Enable();
    2cfe:	4b03      	ldr	r3, [pc, #12]	; (2d0c <initializePlatform+0x38>)
    2d00:	695b      	ldr	r3, [r3, #20]
    2d02:	1c18      	adds	r0, r3, #0
    2d04:	f7fd ff58 	bl	bb8 <PwmLdd2_Enable>
	
}
    2d08:	46bd      	mov	sp, r7
    2d0a:	bd80      	pop	{r7, pc}
    2d0c:	1ffff03c 	.word	0x1ffff03c
    2d10:	0000ffff 	.word	0x0000ffff

00002d14 <readSensors>:
**     				0 - black
**     Returns     : Nothing
** ===================================================================
*/

void readSensors(uint16_t sensorsValue[NUMBER_OF_SENSORS]){
    2d14:	b580      	push	{r7, lr}
    2d16:	b084      	sub	sp, #16
    2d18:	af00      	add	r7, sp, #0
    2d1a:	6078      	str	r0, [r7, #4]
	uint16_t counterReadValue; 
	uint16_t i;
	
	
/* start the infrared LED */
	IR_LED_SetVal();
    2d1c:	4b7a      	ldr	r3, [pc, #488]	; (2f08 <readSensors+0x1f4>)
    2d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2d20:	1c18      	adds	r0, r3, #0
    2d22:	f7ff f871 	bl	1e08 <BitIoLdd10_SetVal>
		
/* init the vector to reflecting by default
 * it will be populated with values in case reflection is discovered
 * - just a convention 0 means black and 1 means white */
	
	for (i=0;i<NUMBER_OF_SENSORS;i++){
    2d26:	1c3b      	adds	r3, r7, #0
    2d28:	330c      	adds	r3, #12
    2d2a:	2200      	movs	r2, #0
    2d2c:	801a      	strh	r2, [r3, #0]
    2d2e:	e00e      	b.n	2d4e <readSensors+0x3a>
			sensorsValue[i]=0;
    2d30:	1c3b      	adds	r3, r7, #0
    2d32:	330c      	adds	r3, #12
    2d34:	881b      	ldrh	r3, [r3, #0]
    2d36:	005b      	lsls	r3, r3, #1
    2d38:	687a      	ldr	r2, [r7, #4]
    2d3a:	18d3      	adds	r3, r2, r3
    2d3c:	2200      	movs	r2, #0
    2d3e:	801a      	strh	r2, [r3, #0]
		
/* init the vector to reflecting by default
 * it will be populated with values in case reflection is discovered
 * - just a convention 0 means black and 1 means white */
	
	for (i=0;i<NUMBER_OF_SENSORS;i++){
    2d40:	1c3b      	adds	r3, r7, #0
    2d42:	330c      	adds	r3, #12
    2d44:	1c3a      	adds	r2, r7, #0
    2d46:	320c      	adds	r2, #12
    2d48:	8812      	ldrh	r2, [r2, #0]
    2d4a:	3201      	adds	r2, #1
    2d4c:	801a      	strh	r2, [r3, #0]
    2d4e:	1c3b      	adds	r3, r7, #0
    2d50:	330c      	adds	r3, #12
    2d52:	881b      	ldrh	r3, [r3, #0]
    2d54:	2b05      	cmp	r3, #5
    2d56:	d9eb      	bls.n	2d30 <readSensors+0x1c>
			sensorsValue[i]=0;
	}
		
/* set sensors as output and put them into 1 */
	LS1_SetDir(TRUE); 
    2d58:	4b6b      	ldr	r3, [pc, #428]	; (2f08 <readSensors+0x1f4>)
    2d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d5c:	1c18      	adds	r0, r3, #0
    2d5e:	2101      	movs	r1, #1
    2d60:	f7fe ff0c 	bl	1b7c <BitIoLdd4_SetDir>
	LS1_SetVal();
    2d64:	4b68      	ldr	r3, [pc, #416]	; (2f08 <readSensors+0x1f4>)
    2d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d68:	1c18      	adds	r0, r3, #0
    2d6a:	f7fe ff43 	bl	1bf4 <BitIoLdd4_SetVal>
	
	A1_SetDir(TRUE);
    2d6e:	4b66      	ldr	r3, [pc, #408]	; (2f08 <readSensors+0x1f4>)
    2d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d72:	1c18      	adds	r0, r3, #0
    2d74:	2101      	movs	r1, #1
    2d76:	f7fe ff01 	bl	1b7c <BitIoLdd4_SetDir>
	A1_SetVal();
    2d7a:	4b63      	ldr	r3, [pc, #396]	; (2f08 <readSensors+0x1f4>)
    2d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d7e:	1c18      	adds	r0, r3, #0
    2d80:	f7fe ff38 	bl	1bf4 <BitIoLdd4_SetVal>
	
	LS2_SetDir(TRUE); 
    2d84:	4b60      	ldr	r3, [pc, #384]	; (2f08 <readSensors+0x1f4>)
    2d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d88:	1c18      	adds	r0, r3, #0
    2d8a:	2101      	movs	r1, #1
    2d8c:	f7fe fe7e 	bl	1a8c <BitIoLdd5_SetDir>
	LS2_SetVal();
    2d90:	4b5d      	ldr	r3, [pc, #372]	; (2f08 <readSensors+0x1f4>)
    2d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d94:	1c18      	adds	r0, r3, #0
    2d96:	f7fe feb5 	bl	1b04 <BitIoLdd5_SetVal>
	
	LS3_SetDir(TRUE); 
    2d9a:	4b5b      	ldr	r3, [pc, #364]	; (2f08 <readSensors+0x1f4>)
    2d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d9e:	1c18      	adds	r0, r3, #0
    2da0:	2101      	movs	r1, #1
    2da2:	f7fe fdfb 	bl	199c <BitIoLdd6_SetDir>
	LS3_SetVal();
    2da6:	4b58      	ldr	r3, [pc, #352]	; (2f08 <readSensors+0x1f4>)
    2da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2daa:	1c18      	adds	r0, r3, #0
    2dac:	f7fe fe32 	bl	1a14 <BitIoLdd6_SetVal>

	RS3_SetDir(TRUE); 
    2db0:	4b55      	ldr	r3, [pc, #340]	; (2f08 <readSensors+0x1f4>)
    2db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2db4:	1c18      	adds	r0, r3, #0
    2db6:	2101      	movs	r1, #1
    2db8:	f7fe fd78 	bl	18ac <BitIoLdd7_SetDir>
	RS3_SetVal();
    2dbc:	4b52      	ldr	r3, [pc, #328]	; (2f08 <readSensors+0x1f4>)
    2dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2dc0:	1c18      	adds	r0, r3, #0
    2dc2:	f7fe fdaf 	bl	1924 <BitIoLdd7_SetVal>

	RS2_SetDir(TRUE); 
    2dc6:	4b50      	ldr	r3, [pc, #320]	; (2f08 <readSensors+0x1f4>)
    2dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2dca:	1c18      	adds	r0, r3, #0
    2dcc:	2101      	movs	r1, #1
    2dce:	f7fe fcf5 	bl	17bc <BitIoLdd8_SetDir>
	RS2_SetVal();
    2dd2:	4b4d      	ldr	r3, [pc, #308]	; (2f08 <readSensors+0x1f4>)
    2dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2dd6:	1c18      	adds	r0, r3, #0
    2dd8:	f7fe fd2c 	bl	1834 <BitIoLdd8_SetVal>
	
	RS1_SetDir(TRUE); 
    2ddc:	4b4a      	ldr	r3, [pc, #296]	; (2f08 <readSensors+0x1f4>)
    2dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2de0:	1c18      	adds	r0, r3, #0
    2de2:	2101      	movs	r1, #1
    2de4:	f7fe fc72 	bl	16cc <BitIoLdd9_SetDir>
	RS1_SetVal();
    2de8:	4b47      	ldr	r3, [pc, #284]	; (2f08 <readSensors+0x1f4>)
    2dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2dec:	1c18      	adds	r0, r3, #0
    2dee:	f7fe fca9 	bl	1744 <BitIoLdd9_SetVal>
	
/* wait until sensors capacitor is fully up */
	WAIT1_Waitus(USEC_WAITING_FOR_CAPACITOR_TO_CHARGE);
    2df2:	23c8      	movs	r3, #200	; 0xc8
    2df4:	005b      	lsls	r3, r3, #1
    2df6:	1c18      	adds	r0, r3, #0
    2df8:	f7fd fbca 	bl	590 <WAIT1_WaitCycles>

/* set all sensors as inputs to read them */
	
	LS1_SetDir(FALSE); 
    2dfc:	4b42      	ldr	r3, [pc, #264]	; (2f08 <readSensors+0x1f4>)
    2dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e00:	1c18      	adds	r0, r3, #0
    2e02:	2100      	movs	r1, #0
    2e04:	f7fe feba 	bl	1b7c <BitIoLdd4_SetDir>
	LS2_SetDir(FALSE); 
    2e08:	4b3f      	ldr	r3, [pc, #252]	; (2f08 <readSensors+0x1f4>)
    2e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e0c:	1c18      	adds	r0, r3, #0
    2e0e:	2100      	movs	r1, #0
    2e10:	f7fe fe3c 	bl	1a8c <BitIoLdd5_SetDir>
	LS3_SetDir(FALSE); 
    2e14:	4b3c      	ldr	r3, [pc, #240]	; (2f08 <readSensors+0x1f4>)
    2e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e18:	1c18      	adds	r0, r3, #0
    2e1a:	2100      	movs	r1, #0
    2e1c:	f7fe fdbe 	bl	199c <BitIoLdd6_SetDir>
	RS3_SetDir(FALSE); 
    2e20:	4b39      	ldr	r3, [pc, #228]	; (2f08 <readSensors+0x1f4>)
    2e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2e24:	1c18      	adds	r0, r3, #0
    2e26:	2100      	movs	r1, #0
    2e28:	f7fe fd40 	bl	18ac <BitIoLdd7_SetDir>
	RS2_SetDir(FALSE); 
    2e2c:	4b36      	ldr	r3, [pc, #216]	; (2f08 <readSensors+0x1f4>)
    2e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2e30:	1c18      	adds	r0, r3, #0
    2e32:	2100      	movs	r1, #0
    2e34:	f7fe fcc2 	bl	17bc <BitIoLdd8_SetDir>
	RS1_SetDir(FALSE); 
    2e38:	4b33      	ldr	r3, [pc, #204]	; (2f08 <readSensors+0x1f4>)
    2e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2e3c:	1c18      	adds	r0, r3, #0
    2e3e:	2100      	movs	r1, #0
    2e40:	f7fe fc44 	bl	16cc <BitIoLdd9_SetDir>

/* reset of the counter (using periods of 6.1 usec) used to count time
 * sensor needs till it line is falling to 0
 */

	CountTimer_ResetCounter((LDD_TDeviceData *)NULL);
    2e44:	2000      	movs	r0, #0
    2e46:	f7fe fbf7 	bl	1638 <CountTimer_ResetCounter>
	
/* effective reading of the value of the line + decision if it is black or white
 * the sensor is seeing
 */
	counterReadValue = CountTimer_GetCounterValue((LDD_TDeviceData *)NULL);
    2e4a:	2000      	movs	r0, #0
    2e4c:	f7fe fc02 	bl	1654 <CountTimer_GetCounterValue>
    2e50:	1c02      	adds	r2, r0, #0
    2e52:	1c3b      	adds	r3, r7, #0
    2e54:	330e      	adds	r3, #14
    2e56:	801a      	strh	r2, [r3, #0]
	
	while (counterReadValue < BLACK_OR_WHITE_BOUNDRY){
    2e58:	e006      	b.n	2e68 <readSensors+0x154>
	/* do nothing wait till enough time has passed
	 * after this time has passed the sensors should be
	 * in correct shape	 */
		counterReadValue = CountTimer_GetCounterValue((LDD_TDeviceData *)NULL);
    2e5a:	2000      	movs	r0, #0
    2e5c:	f7fe fbfa 	bl	1654 <CountTimer_GetCounterValue>
    2e60:	1c02      	adds	r2, r0, #0
    2e62:	1c3b      	adds	r3, r7, #0
    2e64:	330e      	adds	r3, #14
    2e66:	801a      	strh	r2, [r3, #0]
/* effective reading of the value of the line + decision if it is black or white
 * the sensor is seeing
 */
	counterReadValue = CountTimer_GetCounterValue((LDD_TDeviceData *)NULL);
	
	while (counterReadValue < BLACK_OR_WHITE_BOUNDRY){
    2e68:	1c3b      	adds	r3, r7, #0
    2e6a:	330e      	adds	r3, #14
    2e6c:	881b      	ldrh	r3, [r3, #0]
    2e6e:	2b18      	cmp	r3, #24
    2e70:	d9f3      	bls.n	2e5a <readSensors+0x146>
	/* basically if level did not reach 0 which means it is black 
	 * and that is recorded in the sensors vector with a value of 1 
	 * a bit tricky and maybe confusing here are they are opposite */
	
	
	if(LS1_GetVal()==0){ 
    2e72:	4b25      	ldr	r3, [pc, #148]	; (2f08 <readSensors+0x1f4>)
    2e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e76:	1c18      	adds	r0, r3, #0
    2e78:	f7fe fe9e 	bl	1bb8 <BitIoLdd4_GetVal>
    2e7c:	1c03      	adds	r3, r0, #0
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d102      	bne.n	2e88 <readSensors+0x174>
		sensorsValue[0] = 1;  
    2e82:	687b      	ldr	r3, [r7, #4]
    2e84:	2201      	movs	r2, #1
    2e86:	801a      	strh	r2, [r3, #0]
	}

	if(LS2_GetVal()==0){ 
    2e88:	4b1f      	ldr	r3, [pc, #124]	; (2f08 <readSensors+0x1f4>)
    2e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e8c:	1c18      	adds	r0, r3, #0
    2e8e:	f7fe fe1b 	bl	1ac8 <BitIoLdd5_GetVal>
    2e92:	1c03      	adds	r3, r0, #0
    2e94:	2b00      	cmp	r3, #0
    2e96:	d103      	bne.n	2ea0 <readSensors+0x18c>
		sensorsValue[1] = 1;  
    2e98:	687b      	ldr	r3, [r7, #4]
    2e9a:	3302      	adds	r3, #2
    2e9c:	2201      	movs	r2, #1
    2e9e:	801a      	strh	r2, [r3, #0]
	}
	
	if(LS3_GetVal()==0){ 
    2ea0:	4b19      	ldr	r3, [pc, #100]	; (2f08 <readSensors+0x1f4>)
    2ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ea4:	1c18      	adds	r0, r3, #0
    2ea6:	f7fe fd97 	bl	19d8 <BitIoLdd6_GetVal>
    2eaa:	1c03      	adds	r3, r0, #0
    2eac:	2b00      	cmp	r3, #0
    2eae:	d103      	bne.n	2eb8 <readSensors+0x1a4>
		sensorsValue[2] = 1;  
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	3304      	adds	r3, #4
    2eb4:	2201      	movs	r2, #1
    2eb6:	801a      	strh	r2, [r3, #0]
	}
	if(RS3_GetVal()==0){ 
    2eb8:	4b13      	ldr	r3, [pc, #76]	; (2f08 <readSensors+0x1f4>)
    2eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2ebc:	1c18      	adds	r0, r3, #0
    2ebe:	f7fe fd13 	bl	18e8 <BitIoLdd7_GetVal>
    2ec2:	1c03      	adds	r3, r0, #0
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d103      	bne.n	2ed0 <readSensors+0x1bc>
		sensorsValue[3] = 1;
    2ec8:	687b      	ldr	r3, [r7, #4]
    2eca:	3306      	adds	r3, #6
    2ecc:	2201      	movs	r2, #1
    2ece:	801a      	strh	r2, [r3, #0]
	}
	if(RS2_GetVal()==0){ 
    2ed0:	4b0d      	ldr	r3, [pc, #52]	; (2f08 <readSensors+0x1f4>)
    2ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2ed4:	1c18      	adds	r0, r3, #0
    2ed6:	f7fe fc8f 	bl	17f8 <BitIoLdd8_GetVal>
    2eda:	1c03      	adds	r3, r0, #0
    2edc:	2b00      	cmp	r3, #0
    2ede:	d103      	bne.n	2ee8 <readSensors+0x1d4>
		sensorsValue[4] = 1; 
    2ee0:	687b      	ldr	r3, [r7, #4]
    2ee2:	3308      	adds	r3, #8
    2ee4:	2201      	movs	r2, #1
    2ee6:	801a      	strh	r2, [r3, #0]
	}
	if(RS1_GetVal()==0){  
    2ee8:	4b07      	ldr	r3, [pc, #28]	; (2f08 <readSensors+0x1f4>)
    2eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2eec:	1c18      	adds	r0, r3, #0
    2eee:	f7fe fc0b 	bl	1708 <BitIoLdd9_GetVal>
    2ef2:	1c03      	adds	r3, r0, #0
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	d103      	bne.n	2f00 <readSensors+0x1ec>
		sensorsValue[5] = 1; 
    2ef8:	687b      	ldr	r3, [r7, #4]
    2efa:	330a      	adds	r3, #10
    2efc:	2201      	movs	r2, #1
    2efe:	801a      	strh	r2, [r3, #0]
	/* shut down the LED emitting infrared - need to see if this step is needed 
	 * here decision taken not to shut down the sensor 
	 * */
//	IR_LED_ClrVal();
	
}
    2f00:	46bd      	mov	sp, r7
    2f02:	b004      	add	sp, #16
    2f04:	bd80      	pop	{r7, pc}
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	1ffff03c 	.word	0x1ffff03c

00002f0c <setLeftMotorSpeed>:
**     Parameters  : speed
**     Returns     : Nothing
** ===================================================================
*/

void setLeftMotorSpeed(uint16 speed){
    2f0c:	b580      	push	{r7, lr}
    2f0e:	b084      	sub	sp, #16
    2f10:	af00      	add	r7, sp, #0
    2f12:	1c02      	adds	r2, r0, #0
    2f14:	1dbb      	adds	r3, r7, #6
    2f16:	801a      	strh	r2, [r3, #0]
	
	uint16_t value;
	
	if (speed > 100)
    2f18:	1dbb      	adds	r3, r7, #6
    2f1a:	881b      	ldrh	r3, [r3, #0]
    2f1c:	2b64      	cmp	r3, #100	; 0x64
    2f1e:	d904      	bls.n	2f2a <setLeftMotorSpeed+0x1e>
		value = 100;
    2f20:	1c3b      	adds	r3, r7, #0
    2f22:	330e      	adds	r3, #14
    2f24:	2264      	movs	r2, #100	; 0x64
    2f26:	801a      	strh	r2, [r3, #0]
    2f28:	e004      	b.n	2f34 <setLeftMotorSpeed+0x28>
	else
		value = speed;
    2f2a:	1c3b      	adds	r3, r7, #0
    2f2c:	330e      	adds	r3, #14
    2f2e:	1dba      	adds	r2, r7, #6
    2f30:	8812      	ldrh	r2, [r2, #0]
    2f32:	801a      	strh	r2, [r3, #0]
	
	value = 0xFFFF - (value*0xFFFF)/100;
    2f34:	1c3b      	adds	r3, r7, #0
    2f36:	330e      	adds	r3, #14
    2f38:	881a      	ldrh	r2, [r3, #0]
    2f3a:	1c13      	adds	r3, r2, #0
    2f3c:	041b      	lsls	r3, r3, #16
    2f3e:	1a9b      	subs	r3, r3, r2
    2f40:	1c18      	adds	r0, r3, #0
    2f42:	2164      	movs	r1, #100	; 0x64
    2f44:	f7fd fab2 	bl	4ac <__aeabi_idiv>
    2f48:	1c03      	adds	r3, r0, #0
    2f4a:	b29a      	uxth	r2, r3
    2f4c:	1c3b      	adds	r3, r7, #0
    2f4e:	330e      	adds	r3, #14
    2f50:	43d2      	mvns	r2, r2
    2f52:	801a      	strh	r2, [r3, #0]
	
	sens_stanga_PutVal(0);
    2f54:	4b08      	ldr	r3, [pc, #32]	; (2f78 <setLeftMotorSpeed+0x6c>)
    2f56:	689b      	ldr	r3, [r3, #8]
    2f58:	1c18      	adds	r0, r3, #0
    2f5a:	2100      	movs	r1, #0
    2f5c:	f7fe fe8a 	bl	1c74 <BitIoLdd3_PutVal>
	PWM_stanga_SetRatio16(value);
    2f60:	4b05      	ldr	r3, [pc, #20]	; (2f78 <setLeftMotorSpeed+0x6c>)
    2f62:	695a      	ldr	r2, [r3, #20]
    2f64:	1c3b      	adds	r3, r7, #0
    2f66:	330e      	adds	r3, #14
    2f68:	881b      	ldrh	r3, [r3, #0]
    2f6a:	1c10      	adds	r0, r2, #0
    2f6c:	1c19      	adds	r1, r3, #0
    2f6e:	f7fd fe3b 	bl	be8 <PwmLdd2_SetRatio16>
		
}
    2f72:	46bd      	mov	sp, r7
    2f74:	b004      	add	sp, #16
    2f76:	bd80      	pop	{r7, pc}
    2f78:	1ffff03c 	.word	0x1ffff03c

00002f7c <setRightMotorSpeed>:
**     Parameters  : speed
**     Returns     : Nothing
** ===================================================================
*/

void setRightMotorSpeed(uint16 speed){
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b084      	sub	sp, #16
    2f80:	af00      	add	r7, sp, #0
    2f82:	1c02      	adds	r2, r0, #0
    2f84:	1dbb      	adds	r3, r7, #6
    2f86:	801a      	strh	r2, [r3, #0]
	
	uint16_t value;
	
	if (speed > 100)
    2f88:	1dbb      	adds	r3, r7, #6
    2f8a:	881b      	ldrh	r3, [r3, #0]
    2f8c:	2b64      	cmp	r3, #100	; 0x64
    2f8e:	d904      	bls.n	2f9a <setRightMotorSpeed+0x1e>
		value = 100;
    2f90:	1c3b      	adds	r3, r7, #0
    2f92:	330e      	adds	r3, #14
    2f94:	2264      	movs	r2, #100	; 0x64
    2f96:	801a      	strh	r2, [r3, #0]
    2f98:	e004      	b.n	2fa4 <setRightMotorSpeed+0x28>
	else
		value = speed;
    2f9a:	1c3b      	adds	r3, r7, #0
    2f9c:	330e      	adds	r3, #14
    2f9e:	1dba      	adds	r2, r7, #6
    2fa0:	8812      	ldrh	r2, [r2, #0]
    2fa2:	801a      	strh	r2, [r3, #0]
	
	value = 0xFFFF - (value*0xFFFF)/100;
    2fa4:	1c3b      	adds	r3, r7, #0
    2fa6:	330e      	adds	r3, #14
    2fa8:	881a      	ldrh	r2, [r3, #0]
    2faa:	1c13      	adds	r3, r2, #0
    2fac:	041b      	lsls	r3, r3, #16
    2fae:	1a9b      	subs	r3, r3, r2
    2fb0:	1c18      	adds	r0, r3, #0
    2fb2:	2164      	movs	r1, #100	; 0x64
    2fb4:	f7fd fa7a 	bl	4ac <__aeabi_idiv>
    2fb8:	1c03      	adds	r3, r0, #0
    2fba:	b29a      	uxth	r2, r3
    2fbc:	1c3b      	adds	r3, r7, #0
    2fbe:	330e      	adds	r3, #14
    2fc0:	43d2      	mvns	r2, r2
    2fc2:	801a      	strh	r2, [r3, #0]
	
	sens_dreapta_PutVal(0);
    2fc4:	4b08      	ldr	r3, [pc, #32]	; (2fe8 <setRightMotorSpeed+0x6c>)
    2fc6:	685b      	ldr	r3, [r3, #4]
    2fc8:	1c18      	adds	r0, r3, #0
    2fca:	2100      	movs	r1, #0
    2fcc:	f7fe fea0 	bl	1d10 <BitIoLdd2_PutVal>
	PWM_dreapta_SetRatio16(value);
    2fd0:	4b05      	ldr	r3, [pc, #20]	; (2fe8 <setRightMotorSpeed+0x6c>)
    2fd2:	691a      	ldr	r2, [r3, #16]
    2fd4:	1c3b      	adds	r3, r7, #0
    2fd6:	330e      	adds	r3, #14
    2fd8:	881b      	ldrh	r3, [r3, #0]
    2fda:	1c10      	adds	r0, r2, #0
    2fdc:	1c19      	adds	r1, r3, #0
    2fde:	f7fd fe8f 	bl	d00 <PwmLdd1_SetRatio16>
		
}
    2fe2:	46bd      	mov	sp, r7
    2fe4:	b004      	add	sp, #16
    2fe6:	bd80      	pop	{r7, pc}
    2fe8:	1ffff03c 	.word	0x1ffff03c

00002fec <Cpu_OnNMIINT>:
**         occurred. This event is automatically enabled when the [NMI
**         interrupt] property is set to 'Enabled'.
*/
/* ===================================================================*/
void Cpu_OnNMIINT(void)
{
    2fec:	b580      	push	{r7, lr}
    2fee:	af00      	add	r7, sp, #0
  /* Write your code here ... */
}
    2ff0:	46bd      	mov	sp, r7
    2ff2:	bd80      	pop	{r7, pc}

00002ff4 <Periodic_timer_OnInterrupt>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void Periodic_timer_OnInterrupt(void)
{
    2ff4:	b580      	push	{r7, lr}
    2ff6:	af00      	add	r7, sp, #0
  /* Write your code here ... */
}
    2ff8:	46bd      	mov	sp, r7
    2ffa:	bd80      	pop	{r7, pc}

00002ffc <exit>:
    2ffc:	b538      	push	{r3, r4, r5, lr}
    2ffe:	1c05      	adds	r5, r0, #0
    3000:	f000 f8da 	bl	31b8 <__destroy_global_chain>
    3004:	f000 f880 	bl	3108 <__fini_cpp>
    3008:	4c08      	ldr	r4, [pc, #32]	; (302c <exit+0x30>)
    300a:	6823      	ldr	r3, [r4, #0]
    300c:	2b00      	cmp	r3, #0
    300e:	d002      	beq.n	3016 <exit+0x1a>
    3010:	4798      	blx	r3
    3012:	2000      	movs	r0, #0
    3014:	6020      	str	r0, [r4, #0]
    3016:	4c06      	ldr	r4, [pc, #24]	; (3030 <exit+0x34>)
    3018:	6821      	ldr	r1, [r4, #0]
    301a:	2900      	cmp	r1, #0
    301c:	d002      	beq.n	3024 <exit+0x28>
    301e:	4788      	blx	r1
    3020:	2200      	movs	r2, #0
    3022:	6022      	str	r2, [r4, #0]
    3024:	1c28      	adds	r0, r5, #0
    3026:	f7ff fc97 	bl	2958 <_ExitProcess>
    302a:	bd38      	pop	{r3, r4, r5, pc}
    302c:	1ffff1c8 	.word	0x1ffff1c8
    3030:	1ffff1cc 	.word	0x1ffff1cc

00003034 <memset>:
    3034:	b510      	push	{r4, lr}
    3036:	1c04      	adds	r4, r0, #0
    3038:	f000 f802 	bl	3040 <__fill_mem>
    303c:	1c20      	adds	r0, r4, #0
    303e:	bd10      	pop	{r4, pc}

00003040 <__fill_mem>:
    3040:	b530      	push	{r4, r5, lr}
    3042:	b2c9      	uxtb	r1, r1
    3044:	1c03      	adds	r3, r0, #0
    3046:	2a1f      	cmp	r2, #31
    3048:	d931      	bls.n	30ae <__fill_mem+0x6e>
    304a:	4244      	negs	r4, r0
    304c:	2303      	movs	r3, #3
    304e:	4023      	ands	r3, r4
    3050:	d005      	beq.n	305e <__fill_mem+0x1e>
    3052:	1ad2      	subs	r2, r2, r3
    3054:	18c5      	adds	r5, r0, r3
    3056:	7001      	strb	r1, [r0, #0]
    3058:	3001      	adds	r0, #1
    305a:	42a8      	cmp	r0, r5
    305c:	d1fb      	bne.n	3056 <__fill_mem+0x16>
    305e:	2900      	cmp	r1, #0
    3060:	d005      	beq.n	306e <__fill_mem+0x2e>
    3062:	060d      	lsls	r5, r1, #24
    3064:	040c      	lsls	r4, r1, #16
    3066:	432c      	orrs	r4, r5
    3068:	020b      	lsls	r3, r1, #8
    306a:	4321      	orrs	r1, r4
    306c:	4319      	orrs	r1, r3
    306e:	0954      	lsrs	r4, r2, #5
    3070:	1c03      	adds	r3, r0, #0
    3072:	2c00      	cmp	r4, #0
    3074:	d00e      	beq.n	3094 <__fill_mem+0x54>
    3076:	1c25      	adds	r5, r4, #0
    3078:	3d01      	subs	r5, #1
    307a:	6019      	str	r1, [r3, #0]
    307c:	6059      	str	r1, [r3, #4]
    307e:	6099      	str	r1, [r3, #8]
    3080:	60d9      	str	r1, [r3, #12]
    3082:	6119      	str	r1, [r3, #16]
    3084:	6159      	str	r1, [r3, #20]
    3086:	6199      	str	r1, [r3, #24]
    3088:	61d9      	str	r1, [r3, #28]
    308a:	3320      	adds	r3, #32
    308c:	2d00      	cmp	r5, #0
    308e:	d1f3      	bne.n	3078 <__fill_mem+0x38>
    3090:	0163      	lsls	r3, r4, #5
    3092:	18c3      	adds	r3, r0, r3
    3094:	06d0      	lsls	r0, r2, #27
    3096:	0f40      	lsrs	r0, r0, #29
    3098:	d007      	beq.n	30aa <__fill_mem+0x6a>
    309a:	1c04      	adds	r4, r0, #0
    309c:	1c1d      	adds	r5, r3, #0
    309e:	3c01      	subs	r4, #1
    30a0:	c502      	stmia	r5!, {r1}
    30a2:	2c00      	cmp	r4, #0
    30a4:	d1fb      	bne.n	309e <__fill_mem+0x5e>
    30a6:	0080      	lsls	r0, r0, #2
    30a8:	181b      	adds	r3, r3, r0
    30aa:	2403      	movs	r4, #3
    30ac:	4022      	ands	r2, r4
    30ae:	189d      	adds	r5, r3, r2
    30b0:	2a00      	cmp	r2, #0
    30b2:	d003      	beq.n	30bc <__fill_mem+0x7c>
    30b4:	7019      	strb	r1, [r3, #0]
    30b6:	3301      	adds	r3, #1
    30b8:	42ab      	cmp	r3, r5
    30ba:	d1fb      	bne.n	30b4 <__fill_mem+0x74>
    30bc:	bd30      	pop	{r4, r5, pc}
	...

000030c0 <__init_cpp>:
    30c0:	b510      	push	{r4, lr}
    30c2:	4c0b      	ldr	r4, [pc, #44]	; (30f0 <__init_cpp+0x30>)
    30c4:	4b0b      	ldr	r3, [pc, #44]	; (30f4 <__init_cpp+0x34>)
    30c6:	429c      	cmp	r4, r3
    30c8:	d002      	beq.n	30d0 <__init_cpp+0x10>
    30ca:	cc01      	ldmia	r4!, {r0}
    30cc:	4780      	blx	r0
    30ce:	e7f9      	b.n	30c4 <__init_cpp+0x4>
    30d0:	4c09      	ldr	r4, [pc, #36]	; (30f8 <__init_cpp+0x38>)
    30d2:	480a      	ldr	r0, [pc, #40]	; (30fc <__init_cpp+0x3c>)
    30d4:	4284      	cmp	r4, r0
    30d6:	d002      	beq.n	30de <__init_cpp+0x1e>
    30d8:	cc08      	ldmia	r4!, {r3}
    30da:	4798      	blx	r3
    30dc:	e7f9      	b.n	30d2 <__init_cpp+0x12>
    30de:	4c08      	ldr	r4, [pc, #32]	; (3100 <__init_cpp+0x40>)
    30e0:	4908      	ldr	r1, [pc, #32]	; (3104 <__init_cpp+0x44>)
    30e2:	428c      	cmp	r4, r1
    30e4:	d002      	beq.n	30ec <__init_cpp+0x2c>
    30e6:	cc04      	ldmia	r4!, {r2}
    30e8:	4790      	blx	r2
    30ea:	e7f9      	b.n	30e0 <__init_cpp+0x20>
    30ec:	bd10      	pop	{r4, pc}
    30ee:	46c0      	nop			; (mov r8, r8)
    30f0:	000031fc 	.word	0x000031fc
    30f4:	000031fc 	.word	0x000031fc
    30f8:	000031fc 	.word	0x000031fc
    30fc:	000031fc 	.word	0x000031fc
    3100:	000031fc 	.word	0x000031fc
    3104:	000031fc 	.word	0x000031fc

00003108 <__fini_cpp>:
    3108:	b510      	push	{r4, lr}
    310a:	4c08      	ldr	r4, [pc, #32]	; (312c <__fini_cpp+0x24>)
    310c:	4b08      	ldr	r3, [pc, #32]	; (3130 <__fini_cpp+0x28>)
    310e:	429c      	cmp	r4, r3
    3110:	d002      	beq.n	3118 <__fini_cpp+0x10>
    3112:	cc04      	ldmia	r4!, {r2}
    3114:	4790      	blx	r2
    3116:	e7f9      	b.n	310c <__fini_cpp+0x4>
    3118:	4c06      	ldr	r4, [pc, #24]	; (3134 <__fini_cpp+0x2c>)
    311a:	4807      	ldr	r0, [pc, #28]	; (3138 <__fini_cpp+0x30>)
    311c:	4284      	cmp	r4, r0
    311e:	d003      	beq.n	3128 <__fini_cpp+0x20>
    3120:	3c04      	subs	r4, #4
    3122:	6821      	ldr	r1, [r4, #0]
    3124:	4788      	blx	r1
    3126:	e7f8      	b.n	311a <__fini_cpp+0x12>
    3128:	bd10      	pop	{r4, pc}
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	000031fc 	.word	0x000031fc
    3130:	000031fc 	.word	0x000031fc
    3134:	000031fc 	.word	0x000031fc
    3138:	000031fc 	.word	0x000031fc

0000313c <__copy_rom_section>:
    313c:	b500      	push	{lr}
    313e:	4288      	cmp	r0, r1
    3140:	d01f      	beq.n	3182 <__copy_rom_section+0x46>
    3142:	2a00      	cmp	r2, #0
    3144:	d01d      	beq.n	3182 <__copy_rom_section+0x46>
    3146:	2303      	movs	r3, #3
    3148:	4219      	tst	r1, r3
    314a:	d107      	bne.n	315c <__copy_rom_section+0x20>
    314c:	4218      	tst	r0, r3
    314e:	d105      	bne.n	315c <__copy_rom_section+0x20>
    3150:	429a      	cmp	r2, r3
    3152:	d903      	bls.n	315c <__copy_rom_section+0x20>
    3154:	c908      	ldmia	r1!, {r3}
    3156:	3a04      	subs	r2, #4
    3158:	c008      	stmia	r0!, {r3}
    315a:	e7f2      	b.n	3142 <__copy_rom_section+0x6>
    315c:	2301      	movs	r3, #1
    315e:	4219      	tst	r1, r3
    3160:	d109      	bne.n	3176 <__copy_rom_section+0x3a>
    3162:	4218      	tst	r0, r3
    3164:	d107      	bne.n	3176 <__copy_rom_section+0x3a>
    3166:	429a      	cmp	r2, r3
    3168:	d905      	bls.n	3176 <__copy_rom_section+0x3a>
    316a:	880b      	ldrh	r3, [r1, #0]
    316c:	3a02      	subs	r2, #2
    316e:	8003      	strh	r3, [r0, #0]
    3170:	3102      	adds	r1, #2
    3172:	3002      	adds	r0, #2
    3174:	e7e5      	b.n	3142 <__copy_rom_section+0x6>
    3176:	780b      	ldrb	r3, [r1, #0]
    3178:	3a01      	subs	r2, #1
    317a:	7003      	strb	r3, [r0, #0]
    317c:	3101      	adds	r1, #1
    317e:	3001      	adds	r0, #1
    3180:	e7df      	b.n	3142 <__copy_rom_section+0x6>
    3182:	bd00      	pop	{pc}

00003184 <__copy_rom_sections_to_ram>:
    3184:	b538      	push	{r3, r4, r5, lr}
    3186:	4d0b      	ldr	r5, [pc, #44]	; (31b4 <__copy_rom_sections_to_ram+0x30>)
    3188:	2d00      	cmp	r5, #0
    318a:	d011      	beq.n	31b0 <__copy_rom_sections_to_ram+0x2c>
    318c:	2400      	movs	r4, #0
    318e:	192b      	adds	r3, r5, r4
    3190:	6819      	ldr	r1, [r3, #0]
    3192:	2900      	cmp	r1, #0
    3194:	d006      	beq.n	31a4 <__copy_rom_sections_to_ram+0x20>
    3196:	192b      	adds	r3, r5, r4
    3198:	6858      	ldr	r0, [r3, #4]
    319a:	689a      	ldr	r2, [r3, #8]
    319c:	f7ff ffce 	bl	313c <__copy_rom_section>
    31a0:	340c      	adds	r4, #12
    31a2:	e7f4      	b.n	318e <__copy_rom_sections_to_ram+0xa>
    31a4:	685a      	ldr	r2, [r3, #4]
    31a6:	2a00      	cmp	r2, #0
    31a8:	d1f5      	bne.n	3196 <__copy_rom_sections_to_ram+0x12>
    31aa:	6898      	ldr	r0, [r3, #8]
    31ac:	2800      	cmp	r0, #0
    31ae:	d1f2      	bne.n	3196 <__copy_rom_sections_to_ram+0x12>
    31b0:	bd38      	pop	{r3, r4, r5, pc}
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	000031fc 	.word	0x000031fc

000031b8 <__destroy_global_chain>:
    31b8:	4b05      	ldr	r3, [pc, #20]	; (31d0 <__destroy_global_chain+0x18>)
    31ba:	b510      	push	{r4, lr}
    31bc:	681c      	ldr	r4, [r3, #0]
    31be:	2c00      	cmp	r4, #0
    31c0:	d004      	beq.n	31cc <__destroy_global_chain+0x14>
    31c2:	68a0      	ldr	r0, [r4, #8]
    31c4:	6861      	ldr	r1, [r4, #4]
    31c6:	4788      	blx	r1
    31c8:	6824      	ldr	r4, [r4, #0]
    31ca:	e7f8      	b.n	31be <__destroy_global_chain+0x6>
    31cc:	bd10      	pop	{r4, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	1ffff1dc 	.word	0x1ffff1dc

000031d4 <__init_registers>:
    31d4:	4b05      	ldr	r3, [pc, #20]	; (31ec <skip_sp+0x4>)
    31d6:	1c18      	adds	r0, r3, #0
    31d8:	2800      	cmp	r0, #0
    31da:	d005      	beq.n	31e8 <skip_sp>
    31dc:	4685      	mov	sp, r0
    31de:	b081      	sub	sp, #4
    31e0:	2000      	movs	r0, #0
    31e2:	43c0      	mvns	r0, r0
    31e4:	9000      	str	r0, [sp, #0]
    31e6:	b001      	add	sp, #4

000031e8 <skip_sp>:
    31e8:	46f7      	mov	pc, lr
    31ea:	4770      	bx	lr
    31ec:	20003000 	.word	0x20003000

000031f0 <__init_user>:
    31f0:	46f7      	mov	pc, lr
    31f2:	4770      	bx	lr

000031f4 <ChannelDevice>:
    31f4:	0005 0000                                   ....

000031f8 <ChannelMode>:
    31f8:	0000 0000                                   ....
